
LSA08 BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800e680  0800e680  0000f680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb30  0800eb30  000102e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb30  0800eb30  0000fb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb38  0800eb38  000102e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb38  0800eb38  0000fb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb3c  0800eb3c  0000fb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  0800eb40  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001660  200002e8  0800ee24  000102e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001948  0800ee24  00010948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174d7  00000000  00000000  00010314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ac  00000000  00000000  000277eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fac  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a276  00000000  00000000  0002d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001975d  00000000  00000000  0004781a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f1d  00000000  00000000  00060f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4e94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab0  00000000  00000000  000f4ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fb988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e668 	.word	0x0800e668

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	0800e668 	.word	0x0800e668

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800100c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001010:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001014:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	e000      	b.n	8001020 <ITM_SendChar+0x2c>
    {
      __NOP();
 800101e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f9      	beq.n	800101e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_write>:
	HAL_UART_Transmit(&huart1, packet, 4, 10);
	HAL_Delay(10);

}

int _write(int file, char *ptr, int len) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x26>
		ITM_SendChar(*ptr++);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffc9 	bl	8000ff4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x12>
	}
	return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <line_data>:

const int weights[8] = {0, 10, 20, 30, 40, 50, 60, 70};

uint8_t line_data() {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
    uint8_t rxByte = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <line_data+0x44>)
 800108c:	f001 fa5c 	bl	8002548 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001090:	2001      	movs	r0, #1
 8001092:	f000 ff0d 	bl	8001eb0 <HAL_Delay>
    HAL_UART_Receive(&huart1, &rxByte, 1, HAL_MAX_DELAY);
 8001096:	1df9      	adds	r1, r7, #7
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	2201      	movs	r2, #1
 800109e:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <line_data+0x48>)
 80010a0:	f003 ff8c 	bl	8004fbc <HAL_UART_Receive>
    HAL_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 ff03 	bl	8001eb0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2101      	movs	r1, #1
 80010ae:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <line_data+0x44>)
 80010b0:	f001 fa4a 	bl	8002548 <HAL_GPIO_WritePin>
    return rxByte;
 80010b4:	79fb      	ldrb	r3, [r7, #7]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020400 	.word	0x40020400
 80010c4:	200003c8 	.word	0x200003c8

080010c8 <process_byte>:

int process_byte(uint8_t byte) {
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    int weighted_sum = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
    int count_active_sensors = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < 8; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e014      	b.n	800110a <process_byte+0x42>
        if (byte & (1 << i)) {
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d009      	beq.n	8001104 <process_byte+0x3c>
            weighted_sum += weights[i];
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <process_byte+0x68>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4413      	add	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]
            count_active_sensors++;
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	3301      	adds	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 8; i++) {
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b07      	cmp	r3, #7
 800110e:	dde7      	ble.n	80010e0 <process_byte+0x18>
        }
    }

    if (count_active_sensors == 0) {
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <process_byte+0x52>
        return 255;
 8001116:	23ff      	movs	r3, #255	@ 0xff
 8001118:	e003      	b.n	8001122 <process_byte+0x5a>
    }

    return weighted_sum / count_active_sensors;
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	0800e6c8 	.word	0x0800e6c8

08001134 <setMotorSpeed>:
int junction_data() {
	int j_data = HAL_GPIO_ReadPin(JPULSE_GPIO_Port, JPULSE_Pin);
	return j_data;
}

void setMotorSpeed(uint8_t motor, int32_t speed) {
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
	uint16_t pwm = abs(speed);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bfb8      	it	lt
 8001146:	425b      	neglt	r3, r3
 8001148:	81fb      	strh	r3, [r7, #14]
//	printf("in motor speed");
	if (pwm > 200)
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	2bc8      	cmp	r3, #200	@ 0xc8
 800114e:	d901      	bls.n	8001154 <setMotorSpeed+0x20>
		pwm = 200;
 8001150:	23c8      	movs	r3, #200	@ 0xc8
 8001152:	81fb      	strh	r3, [r7, #14]

	if (motor == 0) { // Motor 1
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d112      	bne.n	8001180 <setMotorSpeed+0x4c>
		if (speed > 0) {
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dd07      	ble.n	8001170 <setMotorSpeed+0x3c>
			TIM2->CCR1 = pwm;  // Set PWM duty cycle for channel 1
 8001160:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM3->CCR1 = 0;          // Set PWM duty cycle for channel 2
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <setMotorSpeed+0x80>)
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR3 = 0;          // Set PWM duty cycle for channel 3
			TIM3->CCR4 = pwm;  // Set PWM duty cycle for channel 4
		}
	}

}
 800116e:	e01a      	b.n	80011a6 <setMotorSpeed+0x72>
			TIM2->CCR1 = 0;          // Set PWM duty cycle for channel 1
 8001170:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001174:	2200      	movs	r2, #0
 8001176:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR1 = pwm;  // Set PWM duty cycle for channel 2
 8001178:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <setMotorSpeed+0x80>)
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800117e:	e012      	b.n	80011a6 <setMotorSpeed+0x72>
	} else if (motor == 1) { // Motor 2
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d10f      	bne.n	80011a6 <setMotorSpeed+0x72>
		if (speed > 0) {
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dd06      	ble.n	800119a <setMotorSpeed+0x66>
			TIM3->CCR3 = pwm;  // Set PWM duty cycle for channel 3
 800118c:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <setMotorSpeed+0x80>)
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM3->CCR4 = 0;          // Set PWM duty cycle for channel 4
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <setMotorSpeed+0x80>)
 8001194:	2200      	movs	r2, #0
 8001196:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001198:	e005      	b.n	80011a6 <setMotorSpeed+0x72>
			TIM3->CCR3 = 0;          // Set PWM duty cycle for channel 3
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <setMotorSpeed+0x80>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = pwm;  // Set PWM duty cycle for channel 4
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <setMotorSpeed+0x80>)
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40000400 	.word	0x40000400

080011b8 <computePID>:

void computePID(double error, int32_t input) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0b02 	vstr	d0, [r7, #8]
 80011c2:	6078      	str	r0, [r7, #4]

	double timeChange = (double) (HAL_GetTick() - lastTime);
 80011c4:	f000 fe68 	bl	8001e98 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001380 <computePID+0x1c8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f99f 	bl	8000514 <__aeabi_ui2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	e9c7 2304 	strd	r2, r3, [r7, #16]
//	printf("Inside compute pid error = %f\n", error);
	P = kp * error;
 80011de:	a364      	add	r3, pc, #400	@ (adr r3, 8001370 <computePID+0x1b8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011e8:	f7ff fa0e 	bl	8000608 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4964      	ldr	r1, [pc, #400]	@ (8001384 <computePID+0x1cc>)
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
	I += ki * error * timeChange;
 80011f6:	a360      	add	r3, pc, #384	@ (adr r3, 8001378 <computePID+0x1c0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001200:	f7ff fa02 	bl	8000608 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001210:	f7ff f9fa 	bl	8000608 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	4b5a      	ldr	r3, [pc, #360]	@ (8001388 <computePID+0x1d0>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f83b 	bl	800029c <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4957      	ldr	r1, [pc, #348]	@ (8001388 <computePID+0x1d0>)
 800122c:	e9c1 2300 	strd	r2, r3, [r1]
	if (I > integralMax) I = integralMax;
 8001230:	4b55      	ldr	r3, [pc, #340]	@ (8001388 <computePID+0x1d0>)
 8001232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001236:	4b55      	ldr	r3, [pc, #340]	@ (800138c <computePID+0x1d4>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fc74 	bl	8000b28 <__aeabi_dcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <computePID+0x9a>
 8001246:	4b51      	ldr	r3, [pc, #324]	@ (800138c <computePID+0x1d4>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	494e      	ldr	r1, [pc, #312]	@ (8001388 <computePID+0x1d0>)
 800124e:	e9c1 2300 	strd	r2, r3, [r1]
	if (I < integralMin) I = integralMin;
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <computePID+0x1d0>)
 8001254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001258:	4b4d      	ldr	r3, [pc, #308]	@ (8001390 <computePID+0x1d8>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff fc45 	bl	8000aec <__aeabi_dcmplt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <computePID+0xbc>
 8001268:	4b49      	ldr	r3, [pc, #292]	@ (8001390 <computePID+0x1d8>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	4946      	ldr	r1, [pc, #280]	@ (8001388 <computePID+0x1d0>)
 8001270:	e9c1 2300 	strd	r2, r3, [r1]
	D = kd * (input - lastInput) / timeChange;
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f95d 	bl	8000534 <__aeabi_i2d>
 800127a:	4b46      	ldr	r3, [pc, #280]	@ (8001394 <computePID+0x1dc>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f80a 	bl	8000298 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <computePID+0x1e0>)
 8001292:	f7ff f9b9 	bl	8000608 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012a2:	f7ff fadb 	bl	800085c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	493c      	ldr	r1, [pc, #240]	@ (800139c <computePID+0x1e4>)
 80012ac:	e9c1 2300 	strd	r2, r3, [r1]

	correction = P + I + D;
 80012b0:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <computePID+0x1cc>)
 80012b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b6:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <computePID+0x1d0>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7fe ffee 	bl	800029c <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <computePID+0x1e4>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7fe ffe5 	bl	800029c <__adddf3>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4932      	ldr	r1, [pc, #200]	@ (80013a0 <computePID+0x1e8>)
 80012d8:	e9c1 2300 	strd	r2, r3, [r1]
	lastInput = input;
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f929 	bl	8000534 <__aeabi_i2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	492b      	ldr	r1, [pc, #172]	@ (8001394 <computePID+0x1dc>)
 80012e8:	e9c1 2300 	strd	r2, r3, [r1]
	lastTime = HAL_GetTick();
 80012ec:	f000 fdd4 	bl	8001e98 <HAL_GetTick>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a23      	ldr	r2, [pc, #140]	@ (8001380 <computePID+0x1c8>)
 80012f4:	6013      	str	r3, [r2, #0]
	correction = floor(correction);
 80012f6:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <computePID+0x1e8>)
 80012f8:	ed93 7b00 	vldr	d7, [r3]
 80012fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001300:	eef0 0a67 	vmov.f32	s1, s15
 8001304:	f00d f934 	bl	800e570 <floor>
 8001308:	eeb0 7a40 	vmov.f32	s14, s0
 800130c:	eef0 7a60 	vmov.f32	s15, s1
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <computePID+0x1e8>)
 8001312:	ed83 7b00 	vstr	d7, [r3]
////	printf("motor0: %f, motor1:%f\n" ,base_speed_left,base_speed_right);
////	setMotorSpeed(0, base_speed_left);
////	setMotorSpeed(1, base_speed_right);
//	printf("motor0: %f, motor1:%f\n", base_speed + correction,
//			base_speed - correction);
	setMotorSpeed(0, base_speed + correction);
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <computePID+0x1ec>)
 8001318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <computePID+0x1e8>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7fe ffbb 	bl	800029c <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc1b 	bl	8000b68 <__aeabi_d2iz>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fefc 	bl	8001134 <setMotorSpeed>
	setMotorSpeed(1, base_speed - correction);
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <computePID+0x1ec>)
 800133e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <computePID+0x1e8>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7fe ffa6 	bl	8000298 <__aeabi_dsub>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc08 	bl	8000b68 <__aeabi_d2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff fee9 	bl	8001134 <setMotorSpeed>

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	9999999a 	.word	0x9999999a
 8001374:	40219999 	.word	0x40219999
 8001378:	a0b5ed8d 	.word	0xa0b5ed8d
 800137c:	3ed0c6f7 	.word	0x3ed0c6f7
 8001380:	20000330 	.word	0x20000330
 8001384:	20000308 	.word	0x20000308
 8001388:	20000310 	.word	0x20000310
 800138c:	20000010 	.word	0x20000010
 8001390:	20000008 	.word	0x20000008
 8001394:	20000328 	.word	0x20000328
 8001398:	3fe00000 	.word	0x3fe00000
 800139c:	20000318 	.word	0x20000318
 80013a0:	20000320 	.word	0x20000320
 80013a4:	20000018 	.word	0x20000018

080013a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013ae:	f000 fd0d 	bl	8001dcc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013b2:	f000 f8a3 	bl	80014fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013b6:	f000 fa37 	bl	8001828 <MX_GPIO_Init>
	MX_TIM2_Init();
 80013ba:	f000 f90b 	bl	80015d4 <MX_TIM2_Init>
	MX_TIM3_Init();
 80013be:	f000 f97d 	bl	80016bc <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80013c2:	f000 fa07 	bl	80017d4 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 80013c6:	f008 f87f 	bl	80094c8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
//    send_to_lsa('C', 0);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013ca:	2100      	movs	r1, #0
 80013cc:	4847      	ldr	r0, [pc, #284]	@ (80014ec <main+0x144>)
 80013ce:	f003 f825 	bl	800441c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80013d2:	210c      	movs	r1, #12
 80013d4:	4845      	ldr	r0, [pc, #276]	@ (80014ec <main+0x144>)
 80013d6:	f003 f821 	bl	800441c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80013da:	2108      	movs	r1, #8
 80013dc:	4843      	ldr	r0, [pc, #268]	@ (80014ec <main+0x144>)
 80013de:	f003 f81d 	bl	800441c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013e2:	2100      	movs	r1, #0
 80013e4:	4842      	ldr	r0, [pc, #264]	@ (80014f0 <main+0x148>)
 80013e6:	f003 f819 	bl	800441c <HAL_TIM_PWM_Start>
//  HAL_Delay(6000);
	HAL_Delay(2000);
 80013ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ee:	f000 fd5f 	bl	8001eb0 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		int input_byte = line_data();
 80013f2:	f7ff fe43 	bl	800107c <line_data>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60bb      	str	r3, [r7, #8]
		int input = process_byte(input_byte);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fe62 	bl	80010c8 <process_byte>
 8001404:	60f8      	str	r0, [r7, #12]
//		printf("Input: %d\n", input);
//		printf("input byte: %d\n", input_byte);
//		printf("Turn: %d\n", turn);
//		printf("junction: %d\n", junction);
		turn = input > 50 && input <= 70 ? 1 : input < 20 ? -1 : turn;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b32      	cmp	r3, #50	@ 0x32
 800140a:	dd02      	ble.n	8001412 <main+0x6a>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b46      	cmp	r3, #70	@ 0x46
 8001410:	dd08      	ble.n	8001424 <main+0x7c>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b13      	cmp	r3, #19
 8001416:	dd02      	ble.n	800141e <main+0x76>
 8001418:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <main+0x14c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	e003      	b.n	8001426 <main+0x7e>
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e000      	b.n	8001426 <main+0x7e>
 8001424:	2301      	movs	r3, #1
 8001426:	4a33      	ldr	r2, [pc, #204]	@ (80014f4 <main+0x14c>)
 8001428:	6013      	str	r3, [r2, #0]
//		    } else if (turn == -1) {
//		        turn = 1;
//		    }
//		}

		if (turn) {
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <main+0x14c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d033      	beq.n	800149a <main+0xf2>
			while (input == 255) {
 8001432:	e025      	b.n	8001480 <main+0xd8>
//				printf("here");
				if (turn == 1) {
 8001434:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <main+0x14c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d109      	bne.n	8001450 <main+0xa8>
					setMotorSpeed(0, 150);
 800143c:	2196      	movs	r1, #150	@ 0x96
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fe78 	bl	8001134 <setMotorSpeed>
					setMotorSpeed(1, -150);
 8001444:	f06f 0195 	mvn.w	r1, #149	@ 0x95
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fe73 	bl	8001134 <setMotorSpeed>
 800144e:	e00d      	b.n	800146c <main+0xc4>
				} else if(turn == -1) {
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <main+0x14c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d108      	bne.n	800146c <main+0xc4>
					setMotorSpeed(0, -150);
 800145a:	f06f 0195 	mvn.w	r1, #149	@ 0x95
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fe68 	bl	8001134 <setMotorSpeed>
					setMotorSpeed(1, 150);
 8001464:	2196      	movs	r1, #150	@ 0x96
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fe64 	bl	8001134 <setMotorSpeed>
				}
				input_byte = line_data();
 800146c:	f7ff fe06 	bl	800107c <line_data>
 8001470:	4603      	mov	r3, r0
 8001472:	60bb      	str	r3, [r7, #8]
				input = process_byte(input_byte);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fe25 	bl	80010c8 <process_byte>
 800147e:	60f8      	str	r0, [r7, #12]
			while (input == 255) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2bff      	cmp	r3, #255	@ 0xff
 8001484:	d0d6      	beq.n	8001434 <main+0x8c>
			}
//			turn = 0;
//			continue;
//			input = line_data();
			input_byte = line_data();
 8001486:	f7ff fdf9 	bl	800107c <line_data>
 800148a:	4603      	mov	r3, r0
 800148c:	60bb      	str	r3, [r7, #8]
			input = process_byte(input_byte);
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fe18 	bl	80010c8 <process_byte>
 8001498:	60f8      	str	r0, [r7, #12]
		}
//		turn = 0;
		turn = input > 52 && input <= 70 ? 1 : input < 20 ? -1 : turn;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b34      	cmp	r3, #52	@ 0x34
 800149e:	dd02      	ble.n	80014a6 <main+0xfe>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b46      	cmp	r3, #70	@ 0x46
 80014a4:	dd08      	ble.n	80014b8 <main+0x110>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b13      	cmp	r3, #19
 80014aa:	dd02      	ble.n	80014b2 <main+0x10a>
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <main+0x14c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	e003      	b.n	80014ba <main+0x112>
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e000      	b.n	80014ba <main+0x112>
 80014b8:	2301      	movs	r3, #1
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <main+0x14c>)
 80014bc:	6013      	str	r3, [r2, #0]
		if (input == 255) {
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2bff      	cmp	r3, #255	@ 0xff
 80014c2:	d010      	beq.n	80014e6 <main+0x13e>
//				HAL_Delay(200);
//			}
//			input = line_data();
//		}
//	else{
		double error = input - setpoint;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <main+0x150>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f831 	bl	8000534 <__aeabi_i2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2300 	strd	r2, r3, [r7]
//		if(turn){
//			error = error * 1.5;
//		}
		computePID(error, input);
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	ed97 0b00 	vldr	d0, [r7]
 80014e0:	f7ff fe6a 	bl	80011b8 <computePID>
 80014e4:	e785      	b.n	80013f2 <main+0x4a>
			continue;
 80014e6:	bf00      	nop
	while (1) {
 80014e8:	e783      	b.n	80013f2 <main+0x4a>
 80014ea:	bf00      	nop
 80014ec:	20000380 	.word	0x20000380
 80014f0:	20000338 	.word	0x20000338
 80014f4:	20000334 	.word	0x20000334
 80014f8:	20000000 	.word	0x20000000

080014fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	@ 0x50
 8001500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	@ 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f009 fc57 	bl	800adbe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <SystemClock_Config+0xd0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a28      	ldr	r2, [pc, #160]	@ (80015cc <SystemClock_Config+0xd0>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001530:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <SystemClock_Config+0xd0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <SystemClock_Config+0xd4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001548:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <SystemClock_Config+0xd4>)
 800154a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <SystemClock_Config+0xd4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001570:	2319      	movs	r3, #25
 8001572:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001574:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001578:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800157a:	2304      	movs	r3, #4
 800157c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800157e:	2307      	movs	r3, #7
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fa48 	bl	8003a1c <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9a>
		Error_Handler();
 8001592:	f000 f9bf 	bl	8001914 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2102      	movs	r1, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fcaa 	bl	8003f0c <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xc6>
		Error_Handler();
 80015be:	f000 f9a9 	bl	8001914 <Error_Handler>
	}
}
 80015c2:	bf00      	nop
 80015c4:	3750      	adds	r7, #80	@ 0x50
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	@ 0x38
 80015d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001604:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800160a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 21 - 1;
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 800160e:	2214      	movs	r2, #20
 8001610:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 200;
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 800161a:	22c8      	movs	r2, #200	@ 0xc8
 800161c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800162a:	4823      	ldr	r0, [pc, #140]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 800162c:	f002 fe4e 	bl	80042cc <HAL_TIM_Base_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0x66>
		Error_Handler();
 8001636:	f000 f96d 	bl	8001914 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001640:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001644:	4619      	mov	r1, r3
 8001646:	481c      	ldr	r0, [pc, #112]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 8001648:	f003 f85a 	bl	8004700 <HAL_TIM_ConfigClockSource>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0x82>
		Error_Handler();
 8001652:	f000 f95f 	bl	8001914 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001656:	4818      	ldr	r0, [pc, #96]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 8001658:	f002 fe87 	bl	800436a <HAL_TIM_PWM_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0x92>
		Error_Handler();
 8001662:	f000 f957 	bl	8001914 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	4619      	mov	r1, r3
 8001674:	4810      	ldr	r0, [pc, #64]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 8001676:	f003 fbe3 	bl	8004e40 <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001680:	f000 f948 	bl	8001914 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001684:	2360      	movs	r3, #96	@ 0x60
 8001686:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 800169c:	f002 ff6e 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80016a6:	f000 f935 	bl	8001914 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80016aa:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <MX_TIM2_Init+0xe4>)
 80016ac:	f000 f996 	bl	80019dc <HAL_TIM_MspPostInit>

}
 80016b0:	bf00      	nop
 80016b2:	3738      	adds	r7, #56	@ 0x38
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000338 	.word	0x20000338

080016bc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	@ 0x38
 80016c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80016ec:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <MX_TIM3_Init+0x110>)
 80016ee:	4a38      	ldr	r2, [pc, #224]	@ (80017d0 <MX_TIM3_Init+0x114>)
 80016f0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 21 - 1;
 80016f2:	4b36      	ldr	r3, [pc, #216]	@ (80017cc <MX_TIM3_Init+0x110>)
 80016f4:	2214      	movs	r2, #20
 80016f6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <MX_TIM3_Init+0x110>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 200;
 80016fe:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <MX_TIM3_Init+0x110>)
 8001700:	22c8      	movs	r2, #200	@ 0xc8
 8001702:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <MX_TIM3_Init+0x110>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <MX_TIM3_Init+0x110>)
 800170c:	2280      	movs	r2, #128	@ 0x80
 800170e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001710:	482e      	ldr	r0, [pc, #184]	@ (80017cc <MX_TIM3_Init+0x110>)
 8001712:	f002 fddb 	bl	80042cc <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x64>
		Error_Handler();
 800171c:	f000 f8fa 	bl	8001914 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172a:	4619      	mov	r1, r3
 800172c:	4827      	ldr	r0, [pc, #156]	@ (80017cc <MX_TIM3_Init+0x110>)
 800172e:	f002 ffe7 	bl	8004700 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x80>
		Error_Handler();
 8001738:	f000 f8ec 	bl	8001914 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800173c:	4823      	ldr	r0, [pc, #140]	@ (80017cc <MX_TIM3_Init+0x110>)
 800173e:	f002 fe14 	bl	800436a <HAL_TIM_PWM_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM3_Init+0x90>
		Error_Handler();
 8001748:	f000 f8e4 	bl	8001914 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4619      	mov	r1, r3
 800175a:	481c      	ldr	r0, [pc, #112]	@ (80017cc <MX_TIM3_Init+0x110>)
 800175c:	f003 fb70 	bl	8004e40 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8001766:	f000 f8d5 	bl	8001914 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176a:	2360      	movs	r3, #96	@ 0x60
 800176c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	4812      	ldr	r0, [pc, #72]	@ (80017cc <MX_TIM3_Init+0x110>)
 8001782:	f002 fefb 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 800178c:	f000 f8c2 	bl	8001914 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2208      	movs	r2, #8
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <MX_TIM3_Init+0x110>)
 8001798:	f002 fef0 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0xea>
			!= HAL_OK) {
		Error_Handler();
 80017a2:	f000 f8b7 	bl	8001914 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	220c      	movs	r2, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_TIM3_Init+0x110>)
 80017ae:	f002 fee5 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0x100>
			!= HAL_OK) {
		Error_Handler();
 80017b8:	f000 f8ac 	bl	8001914 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80017bc:	4803      	ldr	r0, [pc, #12]	@ (80017cc <MX_TIM3_Init+0x110>)
 80017be:	f000 f90d 	bl	80019dc <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	@ 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000380 	.word	0x20000380
 80017d0:	40000400 	.word	0x40000400

080017d4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <MX_USART1_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 800180c:	f003 fb86 	bl	8004f1c <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001816:	f000 f87d 	bl	8001914 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200003c8 	.word	0x200003c8
 8001824:	40011000 	.word	0x40011000

08001828 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <MX_GPIO_Init+0xe0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <MX_GPIO_Init+0xe0>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <MX_GPIO_Init+0xe0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <MX_GPIO_Init+0xe0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a29      	ldr	r2, [pc, #164]	@ (8001908 <MX_GPIO_Init+0xe0>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <MX_GPIO_Init+0xe0>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <MX_GPIO_Init+0xe0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <MX_GPIO_Init+0xe0>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <MX_GPIO_Init+0xe0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GND_Pin | UEN_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001898:	481c      	ldr	r0, [pc, #112]	@ (800190c <MX_GPIO_Init+0xe4>)
 800189a:	f000 fe55 	bl	8002548 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GND1_GPIO_Port, GND1_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018a4:	481a      	ldr	r0, [pc, #104]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018a6:	f000 fe4f 	bl	8002548 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GND_Pin UEN_Pin */
	GPIO_InitStruct.Pin = GND_Pin | UEN_Pin;
 80018aa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b4:	2302      	movs	r3, #2
 80018b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	4619      	mov	r1, r3
 80018c2:	4812      	ldr	r0, [pc, #72]	@ (800190c <MX_GPIO_Init+0xe4>)
 80018c4:	f000 fcbc 	bl	8002240 <HAL_GPIO_Init>

	/*Configure GPIO pin : GND1_Pin */
	GPIO_InitStruct.Pin = GND1_Pin;
 80018c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d2:	2302      	movs	r3, #2
 80018d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GND1_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4619      	mov	r1, r3
 80018e0:	480b      	ldr	r0, [pc, #44]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018e2:	f000 fcad 	bl	8002240 <HAL_GPIO_Init>

	/*Configure GPIO pin : JPULSE_Pin */
	GPIO_InitStruct.Pin = JPULSE_Pin;
 80018e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(JPULSE_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018fc:	f000 fca0 	bl	8002240 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400

08001914 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <Error_Handler+0x8>

08001920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	4a0f      	ldr	r2, [pc, #60]	@ (800196c <HAL_MspInit+0x4c>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001934:	6453      	str	r3, [r2, #68]	@ 0x44
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <HAL_MspInit+0x4c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001980:	d10e      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800199e:	e012      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0c      	ldr	r2, [pc, #48]	@ (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10d      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40000400 	.word	0x40000400

080019dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019fc:	d11e      	bne.n	8001a3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a30      	ldr	r2, [pc, #192]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4825      	ldr	r0, [pc, #148]	@ (8001acc <HAL_TIM_MspPostInit+0xf0>)
 8001a36:	f000 fc03 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a3a:	e040      	b.n	8001abe <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a23      	ldr	r2, [pc, #140]	@ (8001ad0 <HAL_TIM_MspPostInit+0xf4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d13b      	bne.n	8001abe <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_TIM_MspPostInit+0xec>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a7e:	2340      	movs	r3, #64	@ 0x40
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <HAL_TIM_MspPostInit+0xf0>)
 8001a9a:	f000 fbd1 	bl	8002240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <HAL_TIM_MspPostInit+0xf8>)
 8001aba:	f000 fbc1 	bl	8002240 <HAL_GPIO_Init>
}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	@ 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40020400 	.word	0x40020400

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b6c <HAL_UART_MspInit+0x94>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d134      	bne.n	8001b64 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_UART_MspInit+0x98>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a1b      	ldr	r2, [pc, #108]	@ (8001b70 <HAL_UART_MspInit+0x98>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_UART_MspInit+0x98>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_UART_MspInit+0x98>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <HAL_UART_MspInit+0x98>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_UART_MspInit+0x98>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b44:	2307      	movs	r3, #7
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4809      	ldr	r0, [pc, #36]	@ (8001b74 <HAL_UART_MspInit+0x9c>)
 8001b50:	f000 fb76 	bl	8002240 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2025      	movs	r0, #37	@ 0x25
 8001b5a:	f000 faa8 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b5e:	2025      	movs	r0, #37	@ 0x25
 8001b60:	f000 fac1 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <MemManage_Handler+0x4>

08001b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <UsageFault_Handler+0x4>

08001ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bce:	f000 f94f 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <USART1_IRQHandler+0x10>)
 8001bde:	f003 fa85 	bl	80050ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200003c8 	.word	0x200003c8

08001bec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <OTG_FS_IRQHandler+0x10>)
 8001bf2:	f000 fe06 	bl	8002802 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200010f8 	.word	0x200010f8

08001c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_kill>:

int _kill(int pid, int sig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1a:	f009 f923 	bl	800ae64 <__errno>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2216      	movs	r2, #22
 8001c22:	601a      	str	r2, [r3, #0]
  return -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_exit>:

void _exit (int status)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffe7 	bl	8001c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c42:	bf00      	nop
 8001c44:	e7fd      	b.n	8001c42 <_exit+0x12>

08001c46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e00a      	b.n	8001c6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c58:	f3af 8000 	nop.w
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	60ba      	str	r2, [r7, #8]
 8001c64:	b2ca      	uxtb	r2, r1
 8001c66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dbf0      	blt.n	8001c58 <_read+0x12>
  }

  return len;
 8001c76:	687b      	ldr	r3, [r7, #4]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca8:	605a      	str	r2, [r3, #4]
  return 0;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_isatty>:

int _isatty(int file)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf0:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <_sbrk+0x5c>)
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <_sbrk+0x60>)
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <_sbrk+0x64>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <_sbrk+0x68>)
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d207      	bcs.n	8001d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d18:	f009 f8a4 	bl	800ae64 <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	220c      	movs	r2, #12
 8001d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	e009      	b.n	8001d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <_sbrk+0x64>)
 8001d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20010000 	.word	0x20010000
 8001d48:	00000400 	.word	0x00000400
 8001d4c:	20000410 	.word	0x20000410
 8001d50:	20001948 	.word	0x20001948

08001d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d7c:	f7ff ffea 	bl	8001d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480c      	ldr	r0, [pc, #48]	@ (8001db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d82:	490d      	ldr	r1, [pc, #52]	@ (8001db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d84:	4a0d      	ldr	r2, [pc, #52]	@ (8001dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d98:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da6:	f009 f863 	bl	800ae70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff fafd 	bl	80013a8 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001dbc:	0800eb40 	.word	0x0800eb40
  ldr r2, =_sbss
 8001dc0:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8001dc4:	20001948 	.word	0x20001948

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	@ (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f94f 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fd8e 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f967 	bl	8002102 <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 f92f 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000020 	.word	0x20000020
 8001e68:	20000028 	.word	0x20000028
 8001e6c:	20000024 	.word	0x20000024

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000028 	.word	0x20000028
 8001e94:	20000414 	.word	0x20000414

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000414 	.word	0x20000414

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000028 	.word	0x20000028

08001ef8 <__NVIC_SetPriorityGrouping>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	@ (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff feb6 	bl	8001e98 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d008      	beq.n	800214c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e052      	b.n	80021f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0216 	bic.w	r2, r2, #22
 800215a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800216a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <HAL_DMA_Abort+0x62>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0208 	bic.w	r2, r2, #8
 800218a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219c:	e013      	b.n	80021c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800219e:	f7ff fe7b 	bl	8001e98 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d90c      	bls.n	80021c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e015      	b.n	80021f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e4      	bne.n	800219e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	223f      	movs	r2, #63	@ 0x3f
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2280      	movs	r2, #128	@ 0x80
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e00c      	b.n	8002232 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e159      	b.n	8002510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 8148 	bne.w	800250a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d005      	beq.n	8002292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	2b02      	cmp	r3, #2
 8002290:	d130      	bne.n	80022f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 0201 	and.w	r2, r3, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d017      	beq.n	8002330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a2 	beq.w	800250a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b57      	ldr	r3, [pc, #348]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4a56      	ldr	r2, [pc, #344]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d6:	4b54      	ldr	r3, [pc, #336]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023e2:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_GPIO_Init+0x2ec>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a49      	ldr	r2, [pc, #292]	@ (8002530 <HAL_GPIO_Init+0x2f0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x202>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a48      	ldr	r2, [pc, #288]	@ (8002534 <HAL_GPIO_Init+0x2f4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x1fe>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a47      	ldr	r2, [pc, #284]	@ (8002538 <HAL_GPIO_Init+0x2f8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x1fa>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a46      	ldr	r2, [pc, #280]	@ (800253c <HAL_GPIO_Init+0x2fc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x1f6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a45      	ldr	r2, [pc, #276]	@ (8002540 <HAL_GPIO_Init+0x300>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x1f2>
 800242e:	2304      	movs	r3, #4
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002432:	2307      	movs	r3, #7
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x204>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x204>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002442:	2300      	movs	r3, #0
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002454:	4935      	ldr	r1, [pc, #212]	@ (800252c <HAL_GPIO_Init+0x2ec>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002462:	4b38      	ldr	r3, [pc, #224]	@ (8002544 <HAL_GPIO_Init+0x304>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002486:	4a2f      	ldr	r2, [pc, #188]	@ (8002544 <HAL_GPIO_Init+0x304>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800248c:	4b2d      	ldr	r3, [pc, #180]	@ (8002544 <HAL_GPIO_Init+0x304>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b0:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b6:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024da:	4a1a      	ldr	r2, [pc, #104]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002504:	4a0f      	ldr	r2, [pc, #60]	@ (8002544 <HAL_GPIO_Init+0x304>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	f67f aea2 	bls.w	800225c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3724      	adds	r7, #36	@ 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40013800 	.word	0x40013800
 8002530:	40020000 	.word	0x40020000
 8002534:	40020400 	.word	0x40020400
 8002538:	40020800 	.word	0x40020800
 800253c:	40020c00 	.word	0x40020c00
 8002540:	40021000 	.word	0x40021000
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af02      	add	r7, sp, #8
 8002580:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e101      	b.n	8002790 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f007 f96e 	bl	8009888 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2203      	movs	r2, #3
 80025b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ba:	d102      	bne.n	80025c2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fdcd 	bl	8006166 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7c1a      	ldrb	r2, [r3, #16]
 80025d4:	f88d 2000 	strb.w	r2, [sp]
 80025d8:	3304      	adds	r3, #4
 80025da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025dc:	f003 fcac 	bl	8005f38 <USB_CoreInit>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0ce      	b.n	8002790 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fdc5 	bl	8006188 <USB_SetCurrentMode>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0bf      	b.n	8002790 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e04a      	b.n	80026ac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3315      	adds	r3, #21
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3314      	adds	r3, #20
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	b298      	uxth	r0, r3
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	332e      	adds	r3, #46	@ 0x2e
 8002652:	4602      	mov	r2, r0
 8002654:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3318      	adds	r3, #24
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	331c      	adds	r3, #28
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3320      	adds	r3, #32
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3324      	adds	r3, #36	@ 0x24
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	3301      	adds	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	791b      	ldrb	r3, [r3, #4]
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d3af      	bcc.n	8002616 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e044      	b.n	8002746 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	3301      	adds	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	791b      	ldrb	r3, [r3, #4]
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	429a      	cmp	r2, r3
 800274e:	d3b5      	bcc.n	80026bc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7c1a      	ldrb	r2, [r3, #16]
 8002758:	f88d 2000 	strb.w	r2, [sp]
 800275c:	3304      	adds	r3, #4
 800275e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002760:	f003 fd5e 	bl	8006220 <USB_DevInit>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00c      	b.n	8002790 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f004 fda2 	bl	80072d2 <USB_DevDisconnect>

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_PCD_Start+0x1c>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e022      	b.n	80027fa <HAL_PCD_Start+0x62>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d009      	beq.n	80027dc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fcaf 	bl	8006144 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 fd50 	bl	8007290 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002802:	b590      	push	{r4, r7, lr}
 8002804:	b08d      	sub	sp, #52	@ 0x34
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f004 fe0e 	bl	800743a <USB_GetMode>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 848c 	bne.w	800313e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f004 fd72 	bl	8007314 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8482 	beq.w	800313c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fd5f 	bl	8007314 <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d107      	bne.n	8002870 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f002 0202 	and.w	r2, r2, #2
 800286e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f004 fd4d 	bl	8007314 <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b10      	cmp	r3, #16
 8002882:	d161      	bne.n	8002948 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0210 	bic.w	r2, r2, #16
 8002892:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4413      	add	r3, r2
 80028b0:	3304      	adds	r3, #4
 80028b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	0c5b      	lsrs	r3, r3, #17
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d124      	bne.n	800290a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d035      	beq.n	8002938 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	6a38      	ldr	r0, [r7, #32]
 80028e0:	f004 fb84 	bl	8006fec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f0:	441a      	add	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002902:	441a      	add	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	615a      	str	r2, [r3, #20]
 8002908:	e016      	b.n	8002938 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	0c5b      	lsrs	r3, r3, #17
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	2b06      	cmp	r3, #6
 8002914:	d110      	bne.n	8002938 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800291c:	2208      	movs	r2, #8
 800291e:	4619      	mov	r1, r3
 8002920:	6a38      	ldr	r0, [r7, #32]
 8002922:	f004 fb63 	bl	8006fec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002932:	441a      	add	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0210 	orr.w	r2, r2, #16
 8002946:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fce1 	bl	8007314 <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002958:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800295c:	f040 80a7 	bne.w	8002aae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f004 fce6 	bl	800733a <USB_ReadDevAllOutEpInterrupt>
 800296e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002970:	e099      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 808e 	beq.w	8002a9a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fd0a 	bl	80073a2 <USB_ReadDevOutEPInterrupt>
 800298e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	2301      	movs	r3, #1
 80029aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fea2 	bl	80036f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ca:	461a      	mov	r2, r3
 80029cc:	2308      	movs	r3, #8
 80029ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 ff78 	bl	80038c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ee:	461a      	mov	r2, r3
 80029f0:	2310      	movs	r3, #16
 80029f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d030      	beq.n	8002a60 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b80      	cmp	r3, #128	@ 0x80
 8002a08:	d109      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a1c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	3304      	adds	r3, #4
 8002a32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	78db      	ldrb	r3, [r3, #3]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d108      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f007 f819 	bl	8009a80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a76:	461a      	mov	r2, r3
 8002a78:	2320      	movs	r3, #32
 8002a7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a92:	461a      	mov	r2, r3
 8002a94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f af62 	bne.w	8002972 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fc2e 	bl	8007314 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002abe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ac2:	f040 80db 	bne.w	8002c7c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fc4f 	bl	800736e <USB_ReadDevAllInEpInterrupt>
 8002ad0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ad6:	e0cd      	b.n	8002c74 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80c2 	beq.w	8002c68 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fc75 	bl	80073de <USB_ReadDevInEPInterrupt>
 8002af4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d057      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	2201      	movs	r2, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69f9      	ldr	r1, [r7, #28]
 8002b1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b20:	4013      	ands	r3, r2
 8002b22:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b30:	461a      	mov	r2, r3
 8002b32:	2301      	movs	r3, #1
 8002b34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	799b      	ldrb	r3, [r3, #6]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d132      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3320      	adds	r3, #32
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4403      	add	r3, r0
 8002b5e:	331c      	adds	r3, #28
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4419      	add	r1, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4403      	add	r3, r0
 8002b72:	3320      	adds	r3, #32
 8002b74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d113      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x3a2>
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3324      	adds	r3, #36	@ 0x24
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	f004 fc7c 	bl	800749c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f006 feed 	bl	800998a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2308      	movs	r3, #8
 8002bca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002be2:	461a      	mov	r2, r3
 8002be4:	2310      	movs	r3, #16
 8002be6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2340      	movs	r3, #64	@ 0x40
 8002c02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d023      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c10:	6a38      	ldr	r0, [r7, #32]
 8002c12:	f003 fc69 	bl	80064e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3310      	adds	r3, #16
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	78db      	ldrb	r3, [r3, #3]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f006 ff30 	bl	8009aa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c50:	461a      	mov	r2, r3
 8002c52:	2302      	movs	r3, #2
 8002c54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fcbb 	bl	80035de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f47f af2e 	bne.w	8002ad8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fb47 	bl	8007314 <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c90:	d122      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d108      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fea2 	bl	8003a04 <HAL_PCDEx_LPM_Callback>
 8002cc0:	e002      	b.n	8002cc8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f006 fece 	bl	8009a64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 fb19 	bl	8007314 <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cec:	d112      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f006 fe8a 	bl	8009a18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d12:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f004 fafb 	bl	8007314 <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d28:	f040 80b7 	bne.w	8002e9a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2110      	movs	r1, #16
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 fbce 	bl	80064e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d50:	e046      	b.n	8002de0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d92:	461a      	mov	r2, r3
 8002d94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002daa:	0151      	lsls	r1, r2, #5
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	440a      	add	r2, r1
 8002db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002db4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002db8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dca:	0151      	lsls	r1, r2, #5
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	440a      	add	r2, r1
 8002dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002dd8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	3301      	adds	r3, #1
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	791b      	ldrb	r3, [r3, #4]
 8002de4:	461a      	mov	r2, r3
 8002de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d3b2      	bcc.n	8002d52 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dfa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002dfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7bdb      	ldrb	r3, [r3, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d016      	beq.n	8002e36 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e18:	f043 030b 	orr.w	r3, r3, #11
 8002e1c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e2e:	f043 030b 	orr.w	r3, r3, #11
 8002e32:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e34:	e015      	b.n	8002e62 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e48:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5c:	f043 030b 	orr.w	r3, r3, #11
 8002e60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e70:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e84:	461a      	mov	r2, r3
 8002e86:	f004 fb09 	bl	800749c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 fa38 	bl	8007314 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eae:	d123      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 face 	bl	8007456 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fb8b 	bl	80065da <USB_GetDevSpeed>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681c      	ldr	r4, [r3, #0]
 8002ed0:	f001 f9c8 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eda:	461a      	mov	r2, r3
 8002edc:	4620      	mov	r0, r4
 8002ede:	f003 f88f 	bl	8006000 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f006 fd79 	bl	80099da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f004 fa09 	bl	8007314 <USB_ReadInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d10a      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f006 fd56 	bl	80099be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f002 0208 	and.w	r2, r2, #8
 8002f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 f9f4 	bl	8007314 <USB_ReadInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b80      	cmp	r3, #128	@ 0x80
 8002f34:	d123      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f42:	2301      	movs	r3, #1
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f46:	e014      	b.n	8002f72 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fb08 	bl	800357c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	3301      	adds	r3, #1
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	791b      	ldrb	r3, [r3, #4]
 8002f76:	461a      	mov	r2, r3
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d3e4      	bcc.n	8002f48 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 f9c6 	bl	8007314 <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f92:	d13c      	bne.n	800300e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f94:	2301      	movs	r3, #1
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f98:	e02b      	b.n	8002ff2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3318      	adds	r3, #24
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d115      	bne.n	8002fec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fc0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da12      	bge.n	8002fec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3317      	adds	r3, #23
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fac8 	bl	800357c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	3301      	adds	r3, #1
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	791b      	ldrb	r3, [r3, #4]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d3cd      	bcc.n	8002f9a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800300c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f004 f97e 	bl	8007314 <USB_ReadInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800301e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003022:	d156      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003024:	2301      	movs	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
 8003028:	e045      	b.n	80030b6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d12e      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003052:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003054:	2b00      	cmp	r3, #0
 8003056:	da2b      	bge.n	80030b0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003064:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003068:	429a      	cmp	r2, r3
 800306a:	d121      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ac:	6053      	str	r3, [r2, #4]
            break;
 80030ae:	e008      	b.n	80030c2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	3301      	adds	r3, #1
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	791b      	ldrb	r3, [r3, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	4293      	cmp	r3, r2
 80030c0:	d3b3      	bcc.n	800302a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f91c 	bl	8007314 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e6:	d10a      	bne.n	80030fe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f006 fced 	bl	8009ac8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f004 f906 	bl	8007314 <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d115      	bne.n	800313e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f006 fcdd 	bl	8009ae4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e000      	b.n	800313e <HAL_PCD_IRQHandler+0x93c>
      return;
 800313c:	bf00      	nop
    }
  }
}
 800313e:	3734      	adds	r7, #52	@ 0x34
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}

08003144 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_PCD_SetAddress+0x1a>
 800315a:	2302      	movs	r3, #2
 800315c:	e012      	b.n	8003184 <HAL_PCD_SetAddress+0x40>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f004 f865 	bl	8007244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	4608      	mov	r0, r1
 8003196:	4611      	mov	r1, r2
 8003198:	461a      	mov	r2, r3
 800319a:	4603      	mov	r3, r0
 800319c:	70fb      	strb	r3, [r7, #3]
 800319e:	460b      	mov	r3, r1
 80031a0:	803b      	strh	r3, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da0f      	bge.n	80031d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	3310      	adds	r3, #16
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	3304      	adds	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	705a      	strb	r2, [r3, #1]
 80031d0:	e00f      	b.n	80031f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 020f 	and.w	r2, r3, #15
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031fe:	883a      	ldrh	r2, [r7, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	78ba      	ldrb	r2, [r7, #2]
 8003208:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800321c:	78bb      	ldrb	r3, [r7, #2]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d102      	bne.n	8003228 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_PCD_EP_Open+0xaa>
 8003232:	2302      	movs	r3, #2
 8003234:	e00e      	b.n	8003254 <HAL_PCD_EP_Open+0xc8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	4618      	mov	r0, r3
 8003246:	f003 f9ed 	bl	8006624 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003252:	7afb      	ldrb	r3, [r7, #11]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da0f      	bge.n	8003290 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3310      	adds	r3, #16
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	3304      	adds	r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	705a      	strb	r2, [r3, #1]
 800328e:	e00f      	b.n	80032b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	3304      	adds	r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_PCD_EP_Close+0x6e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e00e      	b.n	80032e8 <HAL_PCD_EP_Close+0x8c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fa2b 	bl	8006734 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2200      	movs	r2, #0
 8003330:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	b2da      	uxtb	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	799b      	ldrb	r3, [r3, #6]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	799b      	ldrb	r3, [r3, #6]
 8003354:	461a      	mov	r2, r3
 8003356:	6979      	ldr	r1, [r7, #20]
 8003358:	f003 fac8 	bl	80068ec <USB_EPStartXfer>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003388:	681b      	ldr	r3, [r3, #0]
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	460b      	mov	r3, r1
 80033a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	7afb      	ldrb	r3, [r7, #11]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	3310      	adds	r3, #16
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2201      	movs	r2, #1
 80033d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	799b      	ldrb	r3, [r3, #6]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	799b      	ldrb	r3, [r3, #6]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6979      	ldr	r1, [r7, #20]
 80033fc:	f003 fa76 	bl	80068ec <USB_EPStartXfer>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	7912      	ldrb	r2, [r2, #4]
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e04f      	b.n	80034c8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da0f      	bge.n	8003450 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3310      	adds	r3, #16
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	705a      	strb	r2, [r3, #1]
 800344e:	e00d      	b.n	800346c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_PCD_EP_SetStall+0x82>
 8003488:	2302      	movs	r3, #2
 800348a:	e01d      	b.n	80034c8 <HAL_PCD_EP_SetStall+0xbe>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fdfe 	bl	800709c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7999      	ldrb	r1, [r3, #6]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034b8:	461a      	mov	r2, r3
 80034ba:	f003 ffef 	bl	800749c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	7912      	ldrb	r2, [r2, #4]
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e042      	b.n	8003574 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da0f      	bge.n	8003516 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	3310      	adds	r3, #16
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	3304      	adds	r3, #4
 800350c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	705a      	strb	r2, [r3, #1]
 8003514:	e00f      	b.n	8003536 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_PCD_EP_ClrStall+0x86>
 8003552:	2302      	movs	r3, #2
 8003554:	e00e      	b.n	8003574 <HAL_PCD_EP_ClrStall+0xa4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	4618      	mov	r0, r3
 8003566:	f003 fe07 	bl	8007178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	da0c      	bge.n	80035aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3310      	adds	r3, #16
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e00c      	b.n	80035c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	f003 020f 	and.w	r2, r3, #15
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68f9      	ldr	r1, [r7, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fc26 	bl	8006e1c <USB_EPStopXfer>
 80035d0:	4603      	mov	r3, r0
 80035d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035d4:	7afb      	ldrb	r3, [r7, #11]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	@ 0x28
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	3310      	adds	r3, #16
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	3304      	adds	r3, #4
 8003604:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	429a      	cmp	r2, r3
 8003610:	d901      	bls.n	8003616 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	429a      	cmp	r2, r3
 800362a:	d902      	bls.n	8003632 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3303      	adds	r3, #3
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800363a:	e02a      	b.n	8003692 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	429a      	cmp	r2, r3
 8003650:	d902      	bls.n	8003658 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3303      	adds	r3, #3
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68d9      	ldr	r1, [r3, #12]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4603      	mov	r3, r0
 8003674:	6978      	ldr	r0, [r7, #20]
 8003676:	f003 fc7b 	bl	8006f70 <USB_WritePacket>

    ep->xfer_buff  += len;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	441a      	add	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	441a      	add	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d809      	bhi.n	80036bc <PCD_WriteEmptyTxFifo+0xde>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d203      	bcs.n	80036bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1bf      	bne.n	800363c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d811      	bhi.n	80036ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	2201      	movs	r2, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	6939      	ldr	r1, [r7, #16]
 80036e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036e8:	4013      	ands	r3, r2
 80036ea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	333c      	adds	r3, #60	@ 0x3c
 8003710:	3304      	adds	r3, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	799b      	ldrb	r3, [r3, #6]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d17b      	bne.n	8003826 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	4a61      	ldr	r2, [pc, #388]	@ (80038c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	f240 80b9 	bls.w	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80b3 	beq.w	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375a:	461a      	mov	r2, r3
 800375c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003760:	6093      	str	r3, [r2, #8]
 8003762:	e0a7      	b.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377a:	461a      	mov	r2, r3
 800377c:	2320      	movs	r3, #32
 800377e:	6093      	str	r3, [r2, #8]
 8003780:	e098      	b.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 8093 	bne.w	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4a4b      	ldr	r2, [pc, #300]	@ (80038c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d90f      	bls.n	80037b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ac:	461a      	mov	r2, r3
 80037ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b2:	6093      	str	r3, [r2, #8]
 80037b4:	e07e      	b.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	0159      	lsls	r1, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	440b      	add	r3, r1
 80037d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d114      	bne.n	8003818 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003800:	461a      	mov	r2, r3
 8003802:	2101      	movs	r1, #1
 8003804:	f003 fe4a 	bl	800749c <USB_EP0_OutStart>
 8003808:	e006      	b.n	8003818 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f006 f898 	bl	8009954 <HAL_PCD_DataOutStageCallback>
 8003824:	e046      	b.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d124      	bne.n	8003878 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384a:	6093      	str	r3, [r2, #8]
 800384c:	e032      	b.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003864:	461a      	mov	r2, r3
 8003866:	2320      	movs	r3, #32
 8003868:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	4619      	mov	r1, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f006 f86f 	bl	8009954 <HAL_PCD_DataOutStageCallback>
 8003876:	e01d      	b.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d114      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038a0:	461a      	mov	r2, r3
 80038a2:	2100      	movs	r1, #0
 80038a4:	f003 fdfa 	bl	800749c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f006 f850 	bl	8009954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	4f54300a 	.word	0x4f54300a
 80038c4:	4f54310a 	.word	0x4f54310a

080038c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	333c      	adds	r3, #60	@ 0x3c
 80038e0:	3304      	adds	r3, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <PCD_EP_OutSetupPacket_int+0x88>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d90e      	bls.n	800391c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f006 f807 	bl	8009930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a0a      	ldr	r2, [pc, #40]	@ (8003950 <PCD_EP_OutSetupPacket_int+0x88>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d90c      	bls.n	8003944 <PCD_EP_OutSetupPacket_int+0x7c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	799b      	ldrb	r3, [r3, #6]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d108      	bne.n	8003944 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800393c:	461a      	mov	r2, r3
 800393e:	2101      	movs	r1, #1
 8003940:	f003 fdac 	bl	800749c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	4f54300a 	.word	0x4f54300a

08003954 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
 8003960:	4613      	mov	r3, r2
 8003962:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003972:	883b      	ldrh	r3, [r7, #0]
 8003974:	0419      	lsls	r1, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	430a      	orrs	r2, r1
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003980:	e028      	b.n	80039d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4413      	add	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	e00d      	b.n	80039b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	3340      	adds	r3, #64	@ 0x40
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4413      	add	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	3301      	adds	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3ec      	bcc.n	8003996 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039bc:	883b      	ldrh	r3, [r7, #0]
 80039be:	0418      	lsls	r0, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	4302      	orrs	r2, r0
 80039cc:	3340      	adds	r3, #64	@ 0x40
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e267      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d075      	beq.n	8003b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3a:	4b88      	ldr	r3, [pc, #544]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d00c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b85      	ldr	r3, [pc, #532]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d112      	bne.n	8003a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a52:	4b82      	ldr	r3, [pc, #520]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a5e:	d10b      	bne.n	8003a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	4b7e      	ldr	r3, [pc, #504]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05b      	beq.n	8003b24 <HAL_RCC_OscConfig+0x108>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d157      	bne.n	8003b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e242      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x74>
 8003a82:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a75      	ldr	r2, [pc, #468]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xb0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x98>
 8003a9a:	4b70      	ldr	r3, [pc, #448]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6c      	ldr	r2, [pc, #432]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xb0>
 8003ab4:	4b69      	ldr	r3, [pc, #420]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a68      	ldr	r2, [pc, #416]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b66      	ldr	r3, [pc, #408]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a65      	ldr	r2, [pc, #404]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe f9e0 	bl	8001e98 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe f9dc 	bl	8001e98 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	@ 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e207      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b5b      	ldr	r3, [pc, #364]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xc0>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fe f9cc 	bl	8001e98 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe f9c8 	bl	8001e98 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1f3      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b51      	ldr	r3, [pc, #324]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0xe8>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d063      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b32:	4b4a      	ldr	r3, [pc, #296]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b47      	ldr	r3, [pc, #284]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b44      	ldr	r3, [pc, #272]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCC_OscConfig+0x152>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1c7      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4937      	ldr	r1, [pc, #220]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	e03a      	b.n	8003bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8c:	4b34      	ldr	r3, [pc, #208]	@ (8003c60 <HAL_RCC_OscConfig+0x244>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fe f981 	bl	8001e98 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9a:	f7fe f97d 	bl	8001e98 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e1a8      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bac:	4b2b      	ldr	r3, [pc, #172]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b28      	ldr	r3, [pc, #160]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4925      	ldr	r1, [pc, #148]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]
 8003bcc:	e015      	b.n	8003bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bce:	4b24      	ldr	r3, [pc, #144]	@ (8003c60 <HAL_RCC_OscConfig+0x244>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f960 	bl	8001e98 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7fe f95c 	bl	8001e98 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e187      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d036      	beq.n	8003c74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0e:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <HAL_RCC_OscConfig+0x248>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fe f940 	bl	8001e98 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7fe f93c 	bl	8001e98 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e167      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_OscConfig+0x240>)
 8003c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x200>
 8003c3a:	e01b      	b.n	8003c74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3c:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_RCC_OscConfig+0x248>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe f929 	bl	8001e98 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	e00e      	b.n	8003c68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4a:	f7fe f925 	bl	8001e98 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d907      	bls.n	8003c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e150      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	42470000 	.word	0x42470000
 8003c64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	4b88      	ldr	r3, [pc, #544]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ea      	bne.n	8003c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8097 	beq.w	8003db0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c82:	2300      	movs	r3, #0
 8003c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c86:	4b81      	ldr	r3, [pc, #516]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	4b7d      	ldr	r3, [pc, #500]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	4b77      	ldr	r3, [pc, #476]	@ (8003e90 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d118      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cbe:	4b74      	ldr	r3, [pc, #464]	@ (8003e90 <HAL_RCC_OscConfig+0x474>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a73      	ldr	r2, [pc, #460]	@ (8003e90 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cca:	f7fe f8e5 	bl	8001e98 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fe f8e1 	bl	8001e98 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e10c      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e90 <HAL_RCC_OscConfig+0x474>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x2ea>
 8003cf8:	4b64      	ldr	r3, [pc, #400]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	4a63      	ldr	r2, [pc, #396]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d04:	e01c      	b.n	8003d40 <HAL_RCC_OscConfig+0x324>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x30c>
 8003d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	4a5e      	ldr	r2, [pc, #376]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0x324>
 8003d28:	4b58      	ldr	r3, [pc, #352]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	4a57      	ldr	r2, [pc, #348]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d34:	4b55      	ldr	r3, [pc, #340]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	4a54      	ldr	r2, [pc, #336]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	f023 0304 	bic.w	r3, r3, #4
 8003d3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d015      	beq.n	8003d74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fe f8a6 	bl	8001e98 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fe f8a2 	bl	8001e98 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e0cb      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	4b49      	ldr	r3, [pc, #292]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0ee      	beq.n	8003d50 <HAL_RCC_OscConfig+0x334>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d74:	f7fe f890 	bl	8001e98 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fe f88c 	bl	8001e98 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0b5      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d92:	4b3e      	ldr	r3, [pc, #248]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ee      	bne.n	8003d7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da4:	4b39      	ldr	r3, [pc, #228]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	4a38      	ldr	r2, [pc, #224]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80a1 	beq.w	8003efc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dba:	4b34      	ldr	r3, [pc, #208]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d05c      	beq.n	8003e80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d141      	bne.n	8003e52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dce:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <HAL_RCC_OscConfig+0x478>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe f860 	bl	8001e98 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fe f85c 	bl	8001e98 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e087      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dee:	4b27      	ldr	r3, [pc, #156]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	019b      	lsls	r3, r3, #6
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	3b01      	subs	r3, #1
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	491b      	ldr	r1, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e24:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <HAL_RCC_OscConfig+0x478>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fe f835 	bl	8001e98 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e32:	f7fe f831 	bl	8001e98 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e05c      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e44:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x416>
 8003e50:	e054      	b.n	8003efc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <HAL_RCC_OscConfig+0x478>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fe f81e 	bl	8001e98 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fe f81a 	bl	8001e98 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e045      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_RCC_OscConfig+0x470>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x444>
 8003e7e:	e03d      	b.n	8003efc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e038      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40007000 	.word	0x40007000
 8003e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e98:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <HAL_RCC_OscConfig+0x4ec>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d028      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d121      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d11a      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ec8:	4013      	ands	r3, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d111      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800

08003f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0cc      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b68      	ldr	r3, [pc, #416]	@ (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d90c      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b65      	ldr	r3, [pc, #404]	@ (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b63      	ldr	r3, [pc, #396]	@ (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0b8      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f60:	4b59      	ldr	r3, [pc, #356]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a58      	ldr	r2, [pc, #352]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f78:	4b53      	ldr	r3, [pc, #332]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a52      	ldr	r2, [pc, #328]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f84:	4b50      	ldr	r3, [pc, #320]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	494d      	ldr	r1, [pc, #308]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d044      	beq.n	800402c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	4b47      	ldr	r3, [pc, #284]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d119      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d003      	beq.n	8003fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	4b3b      	ldr	r3, [pc, #236]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e067      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	4b37      	ldr	r3, [pc, #220]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 0203 	bic.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4934      	ldr	r1, [pc, #208]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7fd ff4c 	bl	8001e98 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	e00a      	b.n	800401a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fd ff48 	bl	8001e98 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e04f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	4b2b      	ldr	r3, [pc, #172]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 020c 	and.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	429a      	cmp	r2, r3
 800402a:	d1eb      	bne.n	8004004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b25      	ldr	r3, [pc, #148]	@ (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d20c      	bcs.n	8004054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b22      	ldr	r3, [pc, #136]	@ (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e032      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004060:	4b19      	ldr	r3, [pc, #100]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4916      	ldr	r1, [pc, #88]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800407e:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	490e      	ldr	r1, [pc, #56]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004092:	f000 f821 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8004096:	4602      	mov	r2, r0
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	490a      	ldr	r1, [pc, #40]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 80040a4:	5ccb      	ldrb	r3, [r1, r3]
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	4a09      	ldr	r2, [pc, #36]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fd feac 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023c00 	.word	0x40023c00
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800e6e8 	.word	0x0800e6e8
 80040d0:	20000020 	.word	0x20000020
 80040d4:	20000024 	.word	0x20000024

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b090      	sub	sp, #64	@ 0x40
 80040de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e4:	2300      	movs	r3, #0
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e8:	2300      	movs	r3, #0
 80040ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f0:	4b59      	ldr	r3, [pc, #356]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x180>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d00d      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x40>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	f200 80a1 	bhi.w	8004244 <HAL_RCC_GetSysClockFreq+0x16c>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x34>
 8004106:	2b04      	cmp	r3, #4
 8004108:	d003      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x3a>
 800410a:	e09b      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b53      	ldr	r3, [pc, #332]	@ (800425c <HAL_RCC_GetSysClockFreq+0x184>)
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004110:	e09b      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004112:	4b53      	ldr	r3, [pc, #332]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x188>)
 8004114:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004116:	e098      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004118:	4b4f      	ldr	r3, [pc, #316]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x180>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004120:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004122:	4b4d      	ldr	r3, [pc, #308]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x180>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d028      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b4a      	ldr	r3, [pc, #296]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x180>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	2200      	movs	r2, #0
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	627a      	str	r2, [r7, #36]	@ 0x24
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004140:	2100      	movs	r1, #0
 8004142:	4b47      	ldr	r3, [pc, #284]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x188>)
 8004144:	fb03 f201 	mul.w	r2, r3, r1
 8004148:	2300      	movs	r3, #0
 800414a:	fb00 f303 	mul.w	r3, r0, r3
 800414e:	4413      	add	r3, r2
 8004150:	4a43      	ldr	r2, [pc, #268]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x188>)
 8004152:	fba0 1202 	umull	r1, r2, r0, r2
 8004156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004158:	460a      	mov	r2, r1
 800415a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800415c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800415e:	4413      	add	r3, r2
 8004160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004164:	2200      	movs	r2, #0
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	61fa      	str	r2, [r7, #28]
 800416a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800416e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004172:	f7fc fd91 	bl	8000c98 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4613      	mov	r3, r2
 800417c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800417e:	e053      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004180:	4b35      	ldr	r3, [pc, #212]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x180>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	2200      	movs	r2, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	617a      	str	r2, [r7, #20]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004192:	f04f 0b00 	mov.w	fp, #0
 8004196:	4652      	mov	r2, sl
 8004198:	465b      	mov	r3, fp
 800419a:	f04f 0000 	mov.w	r0, #0
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	0159      	lsls	r1, r3, #5
 80041a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a8:	0150      	lsls	r0, r2, #5
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	ebb2 080a 	subs.w	r8, r2, sl
 80041b2:	eb63 090b 	sbc.w	r9, r3, fp
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041ca:	ebb2 0408 	subs.w	r4, r2, r8
 80041ce:	eb63 0509 	sbc.w	r5, r3, r9
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	00eb      	lsls	r3, r5, #3
 80041dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e0:	00e2      	lsls	r2, r4, #3
 80041e2:	4614      	mov	r4, r2
 80041e4:	461d      	mov	r5, r3
 80041e6:	eb14 030a 	adds.w	r3, r4, sl
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	eb45 030b 	adc.w	r3, r5, fp
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041fe:	4629      	mov	r1, r5
 8004200:	028b      	lsls	r3, r1, #10
 8004202:	4621      	mov	r1, r4
 8004204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004208:	4621      	mov	r1, r4
 800420a:	028a      	lsls	r2, r1, #10
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004212:	2200      	movs	r2, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	60fa      	str	r2, [r7, #12]
 8004218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800421c:	f7fc fd3c 	bl	8000c98 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x180>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	3301      	adds	r3, #1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004238:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004242:	e002      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_RCC_GetSysClockFreq+0x184>)
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800424c:	4618      	mov	r0, r3
 800424e:	3740      	adds	r7, #64	@ 0x40
 8004250:	46bd      	mov	sp, r7
 8004252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400
 8004260:	017d7840 	.word	0x017d7840

08004264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b03      	ldr	r3, [pc, #12]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000020 	.word	0x20000020

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004280:	f7ff fff0 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	0a9b      	lsrs	r3, r3, #10
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800
 80042a0:	0800e6f8 	.word	0x0800e6f8

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042a8:	f7ff ffdc 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0b5b      	lsrs	r3, r3, #13
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	0800e6f8 	.word	0x0800e6f8

080042cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e041      	b.n	8004362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fd fb3c 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f000 fac0 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e041      	b.n	8004400 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f839 	bl	8004408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fa71 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <HAL_TIM_PWM_Start+0x24>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	e022      	b.n	8004486 <HAL_TIM_PWM_Start+0x6a>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b04      	cmp	r3, #4
 8004444:	d109      	bne.n	800445a <HAL_TIM_PWM_Start+0x3e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e015      	b.n	8004486 <HAL_TIM_PWM_Start+0x6a>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start+0x58>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e008      	b.n	8004486 <HAL_TIM_PWM_Start+0x6a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e068      	b.n	8004560 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <HAL_TIM_PWM_Start+0x82>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800449c:	e013      	b.n	80044c6 <HAL_TIM_PWM_Start+0xaa>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d104      	bne.n	80044ae <HAL_TIM_PWM_Start+0x92>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044ac:	e00b      	b.n	80044c6 <HAL_TIM_PWM_Start+0xaa>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d104      	bne.n	80044be <HAL_TIM_PWM_Start+0xa2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044bc:	e003      	b.n	80044c6 <HAL_TIM_PWM_Start+0xaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fc90 	bl	8004df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a23      	ldr	r2, [pc, #140]	@ (8004568 <HAL_TIM_PWM_Start+0x14c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d107      	bne.n	80044ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004568 <HAL_TIM_PWM_Start+0x14c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d018      	beq.n	800452a <HAL_TIM_PWM_Start+0x10e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004500:	d013      	beq.n	800452a <HAL_TIM_PWM_Start+0x10e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a19      	ldr	r2, [pc, #100]	@ (800456c <HAL_TIM_PWM_Start+0x150>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_TIM_PWM_Start+0x10e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a17      	ldr	r2, [pc, #92]	@ (8004570 <HAL_TIM_PWM_Start+0x154>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_TIM_PWM_Start+0x10e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a16      	ldr	r2, [pc, #88]	@ (8004574 <HAL_TIM_PWM_Start+0x158>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIM_PWM_Start+0x10e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a14      	ldr	r2, [pc, #80]	@ (8004578 <HAL_TIM_PWM_Start+0x15c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d111      	bne.n	800454e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b06      	cmp	r3, #6
 800453a:	d010      	beq.n	800455e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	e007      	b.n	800455e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0201 	orr.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40014000 	.word	0x40014000

0800457c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004596:	2302      	movs	r3, #2
 8004598:	e0ae      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	f200 809f 	bhi.w	80046e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045aa:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	080046e9 	.word	0x080046e9
 80045b8:	080046e9 	.word	0x080046e9
 80045bc:	080046e9 	.word	0x080046e9
 80045c0:	08004625 	.word	0x08004625
 80045c4:	080046e9 	.word	0x080046e9
 80045c8:	080046e9 	.word	0x080046e9
 80045cc:	080046e9 	.word	0x080046e9
 80045d0:	08004667 	.word	0x08004667
 80045d4:	080046e9 	.word	0x080046e9
 80045d8:	080046e9 	.word	0x080046e9
 80045dc:	080046e9 	.word	0x080046e9
 80045e0:	080046a7 	.word	0x080046a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f9dc 	bl	80049a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0208 	orr.w	r2, r2, #8
 80045fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0204 	bic.w	r2, r2, #4
 800460e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6999      	ldr	r1, [r3, #24]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	619a      	str	r2, [r3, #24]
      break;
 8004622:	e064      	b.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa22 	bl	8004a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	619a      	str	r2, [r3, #24]
      break;
 8004664:	e043      	b.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fa6d 	bl	8004b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0208 	orr.w	r2, r2, #8
 8004680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0204 	bic.w	r2, r2, #4
 8004690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69d9      	ldr	r1, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	61da      	str	r2, [r3, #28]
      break;
 80046a4:	e023      	b.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fab7 	bl	8004c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	021a      	lsls	r2, r3, #8
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	61da      	str	r2, [r3, #28]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
      break;
 80046ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIM_ConfigClockSource+0x1c>
 8004718:	2302      	movs	r3, #2
 800471a:	e0b4      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x186>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004754:	d03e      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800475a:	f200 8087 	bhi.w	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004762:	f000 8086 	beq.w	8004872 <HAL_TIM_ConfigClockSource+0x172>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476a:	d87f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b70      	cmp	r3, #112	@ 0x70
 800476e:	d01a      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004770:	2b70      	cmp	r3, #112	@ 0x70
 8004772:	d87b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b60      	cmp	r3, #96	@ 0x60
 8004776:	d050      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x11a>
 8004778:	2b60      	cmp	r3, #96	@ 0x60
 800477a:	d877      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b50      	cmp	r3, #80	@ 0x50
 800477e:	d03c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0xfa>
 8004780:	2b50      	cmp	r3, #80	@ 0x50
 8004782:	d873      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b40      	cmp	r3, #64	@ 0x40
 8004786:	d058      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x13a>
 8004788:	2b40      	cmp	r3, #64	@ 0x40
 800478a:	d86f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b30      	cmp	r3, #48	@ 0x30
 800478e:	d064      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	2b30      	cmp	r3, #48	@ 0x30
 8004792:	d86b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d060      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d867      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05c      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d05a      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 80047a4:	e062      	b.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b6:	f000 fafd 	bl	8004db4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	609a      	str	r2, [r3, #8]
      break;
 80047d2:	e04f      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047e4:	f000 fae6 	bl	8004db4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047f6:	609a      	str	r2, [r3, #8]
      break;
 80047f8:	e03c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fa5a 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2150      	movs	r1, #80	@ 0x50
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fab3 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004818:	e02c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004826:	461a      	mov	r2, r3
 8004828:	f000 fa79 	bl	8004d1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2160      	movs	r1, #96	@ 0x60
 8004832:	4618      	mov	r0, r3
 8004834:	f000 faa3 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004838:	e01c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fa3a 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2140      	movs	r1, #64	@ 0x40
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa93 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004858:	e00c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 fa8a 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 800486a:	e003      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      break;
 8004870:	e000      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3a      	ldr	r2, [pc, #232]	@ (800498c <TIM_Base_SetConfig+0xfc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a37      	ldr	r2, [pc, #220]	@ (8004990 <TIM_Base_SetConfig+0x100>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a36      	ldr	r2, [pc, #216]	@ (8004994 <TIM_Base_SetConfig+0x104>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a35      	ldr	r2, [pc, #212]	@ (8004998 <TIM_Base_SetConfig+0x108>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2b      	ldr	r2, [pc, #172]	@ (800498c <TIM_Base_SetConfig+0xfc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e8:	d017      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a28      	ldr	r2, [pc, #160]	@ (8004990 <TIM_Base_SetConfig+0x100>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a27      	ldr	r2, [pc, #156]	@ (8004994 <TIM_Base_SetConfig+0x104>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a26      	ldr	r2, [pc, #152]	@ (8004998 <TIM_Base_SetConfig+0x108>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a25      	ldr	r2, [pc, #148]	@ (800499c <TIM_Base_SetConfig+0x10c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a24      	ldr	r2, [pc, #144]	@ (80049a0 <TIM_Base_SetConfig+0x110>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a23      	ldr	r2, [pc, #140]	@ (80049a4 <TIM_Base_SetConfig+0x114>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a0e      	ldr	r2, [pc, #56]	@ (800498c <TIM_Base_SetConfig+0xfc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d103      	bne.n	8004960 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f023 0201 	bic.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	611a      	str	r2, [r3, #16]
  }
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40010000 	.word	0x40010000
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800

080049a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 0201 	bic.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 0302 	bic.w	r3, r3, #2
 80049f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004a70 <TIM_OC1_SetConfig+0xc8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10c      	bne.n	8004a1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0308 	bic.w	r3, r3, #8
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a13      	ldr	r2, [pc, #76]	@ (8004a70 <TIM_OC1_SetConfig+0xc8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d111      	bne.n	8004a4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40010000 	.word	0x40010000

08004a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f023 0210 	bic.w	r2, r3, #16
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0320 	bic.w	r3, r3, #32
 8004abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	@ (8004b48 <TIM_OC2_SetConfig+0xd4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10d      	bne.n	8004af0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a15      	ldr	r2, [pc, #84]	@ (8004b48 <TIM_OC2_SetConfig+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d113      	bne.n	8004b20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000

08004b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c1c <TIM_OC3_SetConfig+0xd0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10d      	bne.n	8004bc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	@ (8004c1c <TIM_OC3_SetConfig+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d113      	bne.n	8004bf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40010000 	.word	0x40010000

08004c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	031b      	lsls	r3, r3, #12
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a10      	ldr	r2, [pc, #64]	@ (8004cbc <TIM_OC4_SetConfig+0x9c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d109      	bne.n	8004c94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000

08004cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0201 	bic.w	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 030a 	bic.w	r3, r3, #10
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b087      	sub	sp, #28
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f023 0210 	bic.w	r2, r3, #16
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f043 0307 	orr.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2201      	movs	r2, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	401a      	ands	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e050      	b.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	@ (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea4:	d013      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a16      	ldr	r2, [pc, #88]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	@ (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40014000 	.word	0x40014000

08004f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e042      	b.n	8004fb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc fdc8 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	@ 0x24
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fd75 	bl	8005a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	@ 0x28
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	f040 8081 	bne.w	80050e0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_UART_Receive+0x2e>
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e079      	b.n	80050e2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2222      	movs	r2, #34	@ 0x22
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005002:	f7fc ff49 	bl	8001e98 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501c:	d108      	bne.n	8005030 <HAL_UART_Receive+0x74>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e003      	b.n	8005038 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005038:	e047      	b.n	80050ca <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	2120      	movs	r1, #32
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fb0d 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e042      	b.n	80050e2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10c      	bne.n	800507c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	b29a      	uxth	r2, r3
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	3302      	adds	r3, #2
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e01f      	b.n	80050bc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005084:	d007      	beq.n	8005096 <HAL_UART_Receive+0xda>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_UART_Receive+0xe8>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e008      	b.n	80050b6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1b2      	bne.n	800503a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b0ba      	sub	sp, #232	@ 0xe8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005118:	2300      	movs	r3, #0
 800511a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800511e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800512a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10f      	bne.n	8005152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_UART_IRQHandler+0x66>
 800513e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fbc2 	bl	80058d4 <UART_Receive_IT>
      return;
 8005150:	e25b      	b.n	800560a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80de 	beq.w	8005318 <HAL_UART_IRQHandler+0x22c>
 800515c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80d1 	beq.w	8005318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_UART_IRQHandler+0xae>
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_UART_IRQHandler+0xd2>
 80051a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b6:	f043 0202 	orr.w	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_UART_IRQHandler+0xf6>
 80051ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	f043 0204 	orr.w	r2, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d011      	beq.n	8005212 <HAL_UART_IRQHandler+0x126>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d105      	bne.n	8005206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	f043 0208 	orr.w	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 81f2 	beq.w	8005600 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800521c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_UART_IRQHandler+0x14e>
 8005228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fb4d 	bl	80058d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <HAL_UART_IRQHandler+0x17a>
 800525e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d04f      	beq.n	8005306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa55 	bl	8005716 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005276:	2b40      	cmp	r3, #64	@ 0x40
 8005278:	d141      	bne.n	80052fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3314      	adds	r3, #20
 8005280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3314      	adds	r3, #20
 80052a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1d9      	bne.n	800527a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d013      	beq.n	80052f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d2:	4a7e      	ldr	r2, [pc, #504]	@ (80054cc <HAL_UART_IRQHandler+0x3e0>)
 80052d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fc ff8d 	bl	80021fa <HAL_DMA_Abort_IT>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052f0:	4610      	mov	r0, r2
 80052f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f4:	e00e      	b.n	8005314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f99e 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fc:	e00a      	b.n	8005314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f99a 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	e006      	b.n	8005314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f996 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005312:	e175      	b.n	8005600 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	bf00      	nop
    return;
 8005316:	e173      	b.n	8005600 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	2b01      	cmp	r3, #1
 800531e:	f040 814f 	bne.w	80055c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8148 	beq.w	80055c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8141 	beq.w	80055c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535e:	2b40      	cmp	r3, #64	@ 0x40
 8005360:	f040 80b6 	bne.w	80054d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8145 	beq.w	8005604 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800537e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005382:	429a      	cmp	r2, r3
 8005384:	f080 813e 	bcs.w	8005604 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800538e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539a:	f000 8088 	beq.w	80054ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80053ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1d9      	bne.n	800539e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3314      	adds	r3, #20
 800540a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800540e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005412:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005416:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e1      	bne.n	80053ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800543c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800544a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800544c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005450:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e3      	bne.n	8005426 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800547c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005490:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005492:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005496:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800549e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e3      	bne.n	800546c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fc fe36 	bl	800211a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8c1 	bl	800564c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054ca:	e09b      	b.n	8005604 <HAL_UART_IRQHandler+0x518>
 80054cc:	080057dd 	.word	0x080057dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 808e 	beq.w	8005608 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80054ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8089 	beq.w	8005608 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800550c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800551a:	647a      	str	r2, [r7, #68]	@ 0x44
 800551c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005520:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e3      	bne.n	80054f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	623b      	str	r3, [r7, #32]
   return(result);
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3314      	adds	r3, #20
 800554e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005552:	633a      	str	r2, [r7, #48]	@ 0x30
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e3      	bne.n	800552e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	60fb      	str	r3, [r7, #12]
   return(result);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0310 	bic.w	r3, r3, #16
 800558a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
 8005594:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005598:	61fa      	str	r2, [r7, #28]
 800559a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	69b9      	ldr	r1, [r7, #24]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	617b      	str	r3, [r7, #20]
   return(result);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e3      	bne.n	8005574 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f847 	bl	800564c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055be:	e023      	b.n	8005608 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_UART_IRQHandler+0x4f4>
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f913 	bl	8005804 <UART_Transmit_IT>
    return;
 80055de:	e014      	b.n	800560a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00e      	beq.n	800560a <HAL_UART_IRQHandler+0x51e>
 80055ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f953 	bl	80058a4 <UART_EndTransmit_IT>
    return;
 80055fe:	e004      	b.n	800560a <HAL_UART_IRQHandler+0x51e>
    return;
 8005600:	bf00      	nop
 8005602:	e002      	b.n	800560a <HAL_UART_IRQHandler+0x51e>
      return;
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <HAL_UART_IRQHandler+0x51e>
      return;
 8005608:	bf00      	nop
  }
}
 800560a:	37e8      	adds	r7, #232	@ 0xe8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	e03b      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d037      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fc fc0b 	bl	8001e98 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	6a3a      	ldr	r2, [r7, #32]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <UART_WaitOnFlagUntilTimeout+0x30>
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e03a      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d023      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b80      	cmp	r3, #128	@ 0x80
 80056aa:	d020      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b40      	cmp	r3, #64	@ 0x40
 80056b0:	d01d      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d116      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f81d 	bl	8005716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2208      	movs	r2, #8
 80056e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e00f      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	bf0c      	ite	eq
 80056fe:	2301      	moveq	r3, #1
 8005700:	2300      	movne	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	429a      	cmp	r2, r3
 800570a:	d0b4      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005716:	b480      	push	{r7}
 8005718:	b095      	sub	sp, #84	@ 0x54
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800573e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e5      	bne.n	800571e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	61fb      	str	r3, [r7, #28]
   return(result);
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	2b01      	cmp	r3, #1
 800578c:	d119      	bne.n	80057c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	60bb      	str	r3, [r7, #8]
   return(result);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f023 0310 	bic.w	r3, r3, #16
 80057a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ae:	61ba      	str	r2, [r7, #24]
 80057b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	613b      	str	r3, [r7, #16]
   return(result);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057d0:	bf00      	nop
 80057d2:	3754      	adds	r7, #84	@ 0x54
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff ff1e 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b21      	cmp	r3, #33	@ 0x21
 8005816:	d13e      	bne.n	8005896 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005820:	d114      	bne.n	800584c <UART_Transmit_IT+0x48>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d110      	bne.n	800584c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]
 800584a:	e008      	b.n	800585e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	1c59      	adds	r1, r3, #1
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6211      	str	r1, [r2, #32]
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4619      	mov	r1, r3
 800586c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005880:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005890:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fea3 	bl	8005610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08c      	sub	sp, #48	@ 0x30
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b22      	cmp	r3, #34	@ 0x22
 80058e6:	f040 80ae 	bne.w	8005a46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f2:	d117      	bne.n	8005924 <UART_Receive_IT+0x50>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d113      	bne.n	8005924 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005904:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005912:	b29a      	uxth	r2, r3
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	629a      	str	r2, [r3, #40]	@ 0x28
 8005922:	e026      	b.n	8005972 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005936:	d007      	beq.n	8005948 <UART_Receive_IT+0x74>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <UART_Receive_IT+0x82>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	b2da      	uxtb	r2, r3
 8005950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e008      	b.n	8005968 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005962:	b2da      	uxtb	r2, r3
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29b      	uxth	r3, r3
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	4619      	mov	r1, r3
 8005980:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005982:	2b00      	cmp	r3, #0
 8005984:	d15d      	bne.n	8005a42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0220 	bic.w	r2, r2, #32
 8005994:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d135      	bne.n	8005a38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	613b      	str	r3, [r7, #16]
   return(result);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f023 0310 	bic.w	r3, r3, #16
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f2:	623a      	str	r2, [r7, #32]
 80059f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	69f9      	ldr	r1, [r7, #28]
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e5      	bne.n	80059d2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d10a      	bne.n	8005a2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fe0b 	bl	800564c <HAL_UARTEx_RxEventCallback>
 8005a36:	e002      	b.n	8005a3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fdf3 	bl	8005624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e002      	b.n	8005a48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3730      	adds	r7, #48	@ 0x30
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a54:	b0c0      	sub	sp, #256	@ 0x100
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6c:	68d9      	ldr	r1, [r3, #12]
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	ea40 0301 	orr.w	r3, r0, r1
 8005a78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005aa8:	f021 010c 	bic.w	r1, r1, #12
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aca:	6999      	ldr	r1, [r3, #24]
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	ea40 0301 	orr.w	r3, r0, r1
 8005ad6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b8f      	ldr	r3, [pc, #572]	@ (8005d1c <UART_SetConfig+0x2cc>)
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d005      	beq.n	8005af0 <UART_SetConfig+0xa0>
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b8d      	ldr	r3, [pc, #564]	@ (8005d20 <UART_SetConfig+0x2d0>)
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d104      	bne.n	8005afa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005af0:	f7fe fbd8 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 8005af4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005af8:	e003      	b.n	8005b02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005afa:	f7fe fbbf 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8005afe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0c:	f040 810c 	bne.w	8005d28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b22:	4622      	mov	r2, r4
 8005b24:	462b      	mov	r3, r5
 8005b26:	1891      	adds	r1, r2, r2
 8005b28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b2a:	415b      	adcs	r3, r3
 8005b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b32:	4621      	mov	r1, r4
 8005b34:	eb12 0801 	adds.w	r8, r2, r1
 8005b38:	4629      	mov	r1, r5
 8005b3a:	eb43 0901 	adc.w	r9, r3, r1
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b52:	4690      	mov	r8, r2
 8005b54:	4699      	mov	r9, r3
 8005b56:	4623      	mov	r3, r4
 8005b58:	eb18 0303 	adds.w	r3, r8, r3
 8005b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b60:	462b      	mov	r3, r5
 8005b62:	eb49 0303 	adc.w	r3, r9, r3
 8005b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b7e:	460b      	mov	r3, r1
 8005b80:	18db      	adds	r3, r3, r3
 8005b82:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b84:	4613      	mov	r3, r2
 8005b86:	eb42 0303 	adc.w	r3, r2, r3
 8005b8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b94:	f7fb f880 	bl	8000c98 <__aeabi_uldivmod>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4b61      	ldr	r3, [pc, #388]	@ (8005d24 <UART_SetConfig+0x2d4>)
 8005b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	011c      	lsls	r4, r3, #4
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	1891      	adds	r1, r2, r2
 8005bbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bc0:	415b      	adcs	r3, r3
 8005bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bc8:	4641      	mov	r1, r8
 8005bca:	eb12 0a01 	adds.w	sl, r2, r1
 8005bce:	4649      	mov	r1, r9
 8005bd0:	eb43 0b01 	adc.w	fp, r3, r1
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005be0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005be8:	4692      	mov	sl, r2
 8005bea:	469b      	mov	fp, r3
 8005bec:	4643      	mov	r3, r8
 8005bee:	eb1a 0303 	adds.w	r3, sl, r3
 8005bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	eb4b 0303 	adc.w	r3, fp, r3
 8005bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c14:	460b      	mov	r3, r1
 8005c16:	18db      	adds	r3, r3, r3
 8005c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c2a:	f7fb f835 	bl	8000c98 <__aeabi_uldivmod>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	4b3b      	ldr	r3, [pc, #236]	@ (8005d24 <UART_SetConfig+0x2d4>)
 8005c36:	fba3 2301 	umull	r2, r3, r3, r1
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	2264      	movs	r2, #100	@ 0x64
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	1acb      	subs	r3, r1, r3
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c4a:	4b36      	ldr	r3, [pc, #216]	@ (8005d24 <UART_SetConfig+0x2d4>)
 8005c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c58:	441c      	add	r4, r3
 8005c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	1891      	adds	r1, r2, r2
 8005c72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c74:	415b      	adcs	r3, r3
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	1851      	adds	r1, r2, r1
 8005c80:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c82:	4649      	mov	r1, r9
 8005c84:	414b      	adcs	r3, r1
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c94:	4659      	mov	r1, fp
 8005c96:	00cb      	lsls	r3, r1, #3
 8005c98:	4651      	mov	r1, sl
 8005c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	00ca      	lsls	r2, r1, #3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4642      	mov	r2, r8
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	460a      	mov	r2, r1
 8005cb4:	eb42 0303 	adc.w	r3, r2, r3
 8005cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ccc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	18db      	adds	r3, r3, r3
 8005cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	eb42 0303 	adc.w	r3, r2, r3
 8005cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ce2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ce6:	f7fa ffd7 	bl	8000c98 <__aeabi_uldivmod>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <UART_SetConfig+0x2d4>)
 8005cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	2164      	movs	r1, #100	@ 0x64
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	3332      	adds	r3, #50	@ 0x32
 8005d02:	4a08      	ldr	r2, [pc, #32]	@ (8005d24 <UART_SetConfig+0x2d4>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	f003 0207 	and.w	r2, r3, #7
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4422      	add	r2, r4
 8005d16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d18:	e106      	b.n	8005f28 <UART_SetConfig+0x4d8>
 8005d1a:	bf00      	nop
 8005d1c:	40011000 	.word	0x40011000
 8005d20:	40011400 	.word	0x40011400
 8005d24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	1891      	adds	r1, r2, r2
 8005d40:	6239      	str	r1, [r7, #32]
 8005d42:	415b      	adcs	r3, r3
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d4a:	4641      	mov	r1, r8
 8005d4c:	1854      	adds	r4, r2, r1
 8005d4e:	4649      	mov	r1, r9
 8005d50:	eb43 0501 	adc.w	r5, r3, r1
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	00eb      	lsls	r3, r5, #3
 8005d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d62:	00e2      	lsls	r2, r4, #3
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	4643      	mov	r3, r8
 8005d6a:	18e3      	adds	r3, r4, r3
 8005d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d70:	464b      	mov	r3, r9
 8005d72:	eb45 0303 	adc.w	r3, r5, r3
 8005d76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d96:	4629      	mov	r1, r5
 8005d98:	008b      	lsls	r3, r1, #2
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da0:	4621      	mov	r1, r4
 8005da2:	008a      	lsls	r2, r1, #2
 8005da4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005da8:	f7fa ff76 	bl	8000c98 <__aeabi_uldivmod>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4b60      	ldr	r3, [pc, #384]	@ (8005f34 <UART_SetConfig+0x4e4>)
 8005db2:	fba3 2302 	umull	r2, r3, r3, r2
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	011c      	lsls	r4, r3, #4
 8005dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005dc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	61b9      	str	r1, [r7, #24]
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ddc:	4641      	mov	r1, r8
 8005dde:	1851      	adds	r1, r2, r1
 8005de0:	6139      	str	r1, [r7, #16]
 8005de2:	4649      	mov	r1, r9
 8005de4:	414b      	adcs	r3, r1
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005df4:	4659      	mov	r1, fp
 8005df6:	00cb      	lsls	r3, r1, #3
 8005df8:	4651      	mov	r1, sl
 8005dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfe:	4651      	mov	r1, sl
 8005e00:	00ca      	lsls	r2, r1, #3
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e10:	464b      	mov	r3, r9
 8005e12:	460a      	mov	r2, r1
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e34:	4649      	mov	r1, r9
 8005e36:	008b      	lsls	r3, r1, #2
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3e:	4641      	mov	r1, r8
 8005e40:	008a      	lsls	r2, r1, #2
 8005e42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e46:	f7fa ff27 	bl	8000c98 <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	4b38      	ldr	r3, [pc, #224]	@ (8005f34 <UART_SetConfig+0x4e4>)
 8005e52:	fba3 2301 	umull	r2, r3, r3, r1
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	2264      	movs	r2, #100	@ 0x64
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	1acb      	subs	r3, r1, r3
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	3332      	adds	r3, #50	@ 0x32
 8005e64:	4a33      	ldr	r2, [pc, #204]	@ (8005f34 <UART_SetConfig+0x4e4>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e70:	441c      	add	r4, r3
 8005e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e76:	2200      	movs	r2, #0
 8005e78:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	1891      	adds	r1, r2, r2
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	415b      	adcs	r3, r3
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e90:	4641      	mov	r1, r8
 8005e92:	1851      	adds	r1, r2, r1
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	4649      	mov	r1, r9
 8005e98:	414b      	adcs	r3, r1
 8005e9a:	607b      	str	r3, [r7, #4]
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	00cb      	lsls	r3, r1, #3
 8005eac:	4651      	mov	r1, sl
 8005eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	00ca      	lsls	r2, r1, #3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	460a      	mov	r2, r1
 8005ec6:	eb42 0303 	adc.w	r3, r2, r3
 8005eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ed6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	008b      	lsls	r3, r1, #2
 8005ee8:	4641      	mov	r1, r8
 8005eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eee:	4641      	mov	r1, r8
 8005ef0:	008a      	lsls	r2, r1, #2
 8005ef2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ef6:	f7fa fecf 	bl	8000c98 <__aeabi_uldivmod>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <UART_SetConfig+0x4e4>)
 8005f00:	fba3 1302 	umull	r1, r3, r3, r2
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	2164      	movs	r1, #100	@ 0x64
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	3332      	adds	r3, #50	@ 0x32
 8005f12:	4a08      	ldr	r2, [pc, #32]	@ (8005f34 <UART_SetConfig+0x4e4>)
 8005f14:	fba2 2303 	umull	r2, r3, r2, r3
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	f003 020f 	and.w	r2, r3, #15
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4422      	add	r2, r4
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f34:	51eb851f 	.word	0x51eb851f

08005f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f38:	b084      	sub	sp, #16
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	f107 001c 	add.w	r0, r7, #28
 8005f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d123      	bne.n	8005f9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d105      	bne.n	8005f8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fae2 	bl	8007558 <USB_CoreReset>
 8005f94:	4603      	mov	r3, r0
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	e01b      	b.n	8005fd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fad6 	bl	8007558 <USB_CoreReset>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fc4:	e005      	b.n	8005fd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fd2:	7fbb      	ldrb	r3, [r7, #30]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10b      	bne.n	8005ff0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f043 0206 	orr.w	r2, r3, #6
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f043 0220 	orr.w	r2, r3, #32
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ffc:	b004      	add	sp, #16
 8005ffe:	4770      	bx	lr

08006000 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d165      	bne.n	80060e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a41      	ldr	r2, [pc, #260]	@ (800611c <USB_SetTurnaroundTime+0x11c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d906      	bls.n	800602a <USB_SetTurnaroundTime+0x2a>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a40      	ldr	r2, [pc, #256]	@ (8006120 <USB_SetTurnaroundTime+0x120>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d202      	bcs.n	800602a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006024:	230f      	movs	r3, #15
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e062      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a3c      	ldr	r2, [pc, #240]	@ (8006120 <USB_SetTurnaroundTime+0x120>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d306      	bcc.n	8006040 <USB_SetTurnaroundTime+0x40>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4a3b      	ldr	r2, [pc, #236]	@ (8006124 <USB_SetTurnaroundTime+0x124>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d202      	bcs.n	8006040 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800603a:	230e      	movs	r3, #14
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e057      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4a38      	ldr	r2, [pc, #224]	@ (8006124 <USB_SetTurnaroundTime+0x124>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d306      	bcc.n	8006056 <USB_SetTurnaroundTime+0x56>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a37      	ldr	r2, [pc, #220]	@ (8006128 <USB_SetTurnaroundTime+0x128>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d202      	bcs.n	8006056 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006050:	230d      	movs	r3, #13
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e04c      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4a33      	ldr	r2, [pc, #204]	@ (8006128 <USB_SetTurnaroundTime+0x128>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d306      	bcc.n	800606c <USB_SetTurnaroundTime+0x6c>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a32      	ldr	r2, [pc, #200]	@ (800612c <USB_SetTurnaroundTime+0x12c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d802      	bhi.n	800606c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006066:	230c      	movs	r3, #12
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e041      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4a2f      	ldr	r2, [pc, #188]	@ (800612c <USB_SetTurnaroundTime+0x12c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d906      	bls.n	8006082 <USB_SetTurnaroundTime+0x82>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a2e      	ldr	r2, [pc, #184]	@ (8006130 <USB_SetTurnaroundTime+0x130>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d802      	bhi.n	8006082 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800607c:	230b      	movs	r3, #11
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e036      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4a2a      	ldr	r2, [pc, #168]	@ (8006130 <USB_SetTurnaroundTime+0x130>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d906      	bls.n	8006098 <USB_SetTurnaroundTime+0x98>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4a29      	ldr	r2, [pc, #164]	@ (8006134 <USB_SetTurnaroundTime+0x134>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d802      	bhi.n	8006098 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006092:	230a      	movs	r3, #10
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e02b      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4a26      	ldr	r2, [pc, #152]	@ (8006134 <USB_SetTurnaroundTime+0x134>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d906      	bls.n	80060ae <USB_SetTurnaroundTime+0xae>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4a25      	ldr	r2, [pc, #148]	@ (8006138 <USB_SetTurnaroundTime+0x138>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d202      	bcs.n	80060ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060a8:	2309      	movs	r3, #9
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e020      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4a21      	ldr	r2, [pc, #132]	@ (8006138 <USB_SetTurnaroundTime+0x138>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d306      	bcc.n	80060c4 <USB_SetTurnaroundTime+0xc4>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4a20      	ldr	r2, [pc, #128]	@ (800613c <USB_SetTurnaroundTime+0x13c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d802      	bhi.n	80060c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060be:	2308      	movs	r3, #8
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e015      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	@ (800613c <USB_SetTurnaroundTime+0x13c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d906      	bls.n	80060da <USB_SetTurnaroundTime+0xda>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006140 <USB_SetTurnaroundTime+0x140>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d202      	bcs.n	80060da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060d4:	2307      	movs	r3, #7
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	e00a      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80060da:	2306      	movs	r3, #6
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e007      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060e6:	2309      	movs	r3, #9
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e001      	b.n	80060f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060ec:	2309      	movs	r3, #9
 80060ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	029b      	lsls	r3, r3, #10
 8006104:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006108:	431a      	orrs	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	00d8acbf 	.word	0x00d8acbf
 8006120:	00e4e1c0 	.word	0x00e4e1c0
 8006124:	00f42400 	.word	0x00f42400
 8006128:	01067380 	.word	0x01067380
 800612c:	011a499f 	.word	0x011a499f
 8006130:	01312cff 	.word	0x01312cff
 8006134:	014ca43f 	.word	0x014ca43f
 8006138:	016e3600 	.word	0x016e3600
 800613c:	01a6ab1f 	.word	0x01a6ab1f
 8006140:	01e84800 	.word	0x01e84800

08006144 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d115      	bne.n	80061d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061b6:	200a      	movs	r0, #10
 80061b8:	f7fb fe7a 	bl	8001eb0 <HAL_Delay>
      ms += 10U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	330a      	adds	r3, #10
 80061c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f939 	bl	800743a <USB_GetMode>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d01e      	beq.n	800620c <USB_SetCurrentMode+0x84>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80061d2:	d9f0      	bls.n	80061b6 <USB_SetCurrentMode+0x2e>
 80061d4:	e01a      	b.n	800620c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d115      	bne.n	8006208 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061e8:	200a      	movs	r0, #10
 80061ea:	f7fb fe61 	bl	8001eb0 <HAL_Delay>
      ms += 10U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	330a      	adds	r3, #10
 80061f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 f920 	bl	800743a <USB_GetMode>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <USB_SetCurrentMode+0x84>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2bc7      	cmp	r3, #199	@ 0xc7
 8006204:	d9f0      	bls.n	80061e8 <USB_SetCurrentMode+0x60>
 8006206:	e001      	b.n	800620c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e005      	b.n	8006218 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006210:	d101      	bne.n	8006216 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006220:	b084      	sub	sp, #16
 8006222:	b580      	push	{r7, lr}
 8006224:	b086      	sub	sp, #24
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800622e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	e009      	b.n	8006254 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3340      	adds	r3, #64	@ 0x40
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	2200      	movs	r2, #0
 800624c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	3301      	adds	r3, #1
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b0e      	cmp	r3, #14
 8006258:	d9f2      	bls.n	8006240 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800625a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11c      	bne.n	800629c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006286:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006292:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	639a      	str	r2, [r3, #56]	@ 0x38
 800629a:	e00b      	b.n	80062b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062ba:	461a      	mov	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10d      	bne.n	80062e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062d0:	2100      	movs	r1, #0
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f968 	bl	80065a8 <USB_SetDevSpeed>
 80062d8:	e008      	b.n	80062ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062da:	2101      	movs	r1, #1
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f963 	bl	80065a8 <USB_SetDevSpeed>
 80062e2:	e003      	b.n	80062ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062e4:	2103      	movs	r1, #3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f95e 	bl	80065a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062ec:	2110      	movs	r1, #16
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8fa 	bl	80064e8 <USB_FlushTxFifo>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f924 	bl	800654c <USB_FlushRxFifo>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632c:	461a      	mov	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	e043      	b.n	80063c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800634a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800634e:	d118      	bne.n	8006382 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006362:	461a      	mov	r2, r3
 8006364:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e013      	b.n	8006394 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006378:	461a      	mov	r2, r3
 800637a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	e008      	b.n	8006394 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a0:	461a      	mov	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b2:	461a      	mov	r2, r3
 80063b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3301      	adds	r3, #1
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063c4:	461a      	mov	r2, r3
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d3b5      	bcc.n	8006338 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063cc:	2300      	movs	r3, #0
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	e043      	b.n	800645a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e8:	d118      	bne.n	800641c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fc:	461a      	mov	r2, r3
 80063fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e013      	b.n	800642e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006412:	461a      	mov	r2, r3
 8006414:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e008      	b.n	800642e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006428:	461a      	mov	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643a:	461a      	mov	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644c:	461a      	mov	r2, r3
 800644e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006452:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	3301      	adds	r3, #1
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800645e:	461a      	mov	r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4293      	cmp	r3, r2
 8006464:	d3b5      	bcc.n	80063d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006478:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006486:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006488:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f043 0210 	orr.w	r2, r3, #16
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	4b10      	ldr	r3, [pc, #64]	@ (80064e4 <USB_DevInit+0x2c4>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f043 0208 	orr.w	r2, r3, #8
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d107      	bne.n	80064d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064cc:	f043 0304 	orr.w	r3, r3, #4
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064e0:	b004      	add	sp, #16
 80064e2:	4770      	bx	lr
 80064e4:	803c3800 	.word	0x803c3800

080064e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006502:	d901      	bls.n	8006508 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e01b      	b.n	8006540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	daf2      	bge.n	80064f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	019b      	lsls	r3, r3, #6
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800652c:	d901      	bls.n	8006532 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e006      	b.n	8006540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b20      	cmp	r3, #32
 800653c:	d0f0      	beq.n	8006520 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006564:	d901      	bls.n	800656a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e018      	b.n	800659c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	daf2      	bge.n	8006558 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2210      	movs	r2, #16
 800657a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006588:	d901      	bls.n	800658e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e006      	b.n	800659c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b10      	cmp	r3, #16
 8006598:	d0f0      	beq.n	800657c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80065da:	b480      	push	{r7}
 80065dc:	b087      	sub	sp, #28
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0306 	and.w	r3, r3, #6
 80065f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065fa:	2300      	movs	r3, #0
 80065fc:	75fb      	strb	r3, [r7, #23]
 80065fe:	e00a      	b.n	8006616 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d002      	beq.n	800660c <USB_GetDevSpeed+0x32>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b06      	cmp	r3, #6
 800660a:	d102      	bne.n	8006612 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800660c:	2302      	movs	r3, #2
 800660e:	75fb      	strb	r3, [r7, #23]
 8006610:	e001      	b.n	8006616 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006612:	230f      	movs	r3, #15
 8006614:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d13a      	bne.n	80066b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	2101      	movs	r1, #1
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	b29b      	uxth	r3, r3
 8006658:	68f9      	ldr	r1, [r7, #12]
 800665a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800665e:	4313      	orrs	r3, r2
 8006660:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d155      	bne.n	8006724 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	791b      	ldrb	r3, [r3, #4]
 8006692:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006694:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	059b      	lsls	r3, r3, #22
 800669a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800669c:	4313      	orrs	r3, r2
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	e036      	b.n	8006724 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	2101      	movs	r1, #1
 80066c8:	fa01 f303 	lsl.w	r3, r1, r3
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d11a      	bne.n	8006724 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	791b      	ldrb	r3, [r3, #4]
 8006708:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800670a:	430b      	orrs	r3, r1
 800670c:	4313      	orrs	r3, r2
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800671a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006722:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d161      	bne.n	8006814 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006766:	d11f      	bne.n	80067a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006782:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006786:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	2101      	movs	r1, #1
 80067ba:	fa01 f303 	lsl.w	r3, r1, r3
 80067be:	b29b      	uxth	r3, r3
 80067c0:	43db      	mvns	r3, r3
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067c8:	4013      	ands	r3, r2
 80067ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	2101      	movs	r1, #1
 80067de:	fa01 f303 	lsl.w	r3, r1, r3
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	43db      	mvns	r3, r3
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067ec:	4013      	ands	r3, r2
 80067ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	0159      	lsls	r1, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	440b      	add	r3, r1
 8006806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680a:	4619      	mov	r1, r3
 800680c:	4b35      	ldr	r3, [pc, #212]	@ (80068e4 <USB_DeactivateEndpoint+0x1b0>)
 800680e:	4013      	ands	r3, r2
 8006810:	600b      	str	r3, [r1, #0]
 8006812:	e060      	b.n	80068d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006826:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800682a:	d11f      	bne.n	800686c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006846:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800684a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006866:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800686a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006872:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f303 	lsl.w	r3, r1, r3
 8006882:	041b      	lsls	r3, r3, #16
 8006884:	43db      	mvns	r3, r3
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800688c:	4013      	ands	r3, r2
 800688e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	2101      	movs	r1, #1
 80068a2:	fa01 f303 	lsl.w	r3, r1, r3
 80068a6:	041b      	lsls	r3, r3, #16
 80068a8:	43db      	mvns	r3, r3
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068b0:	4013      	ands	r3, r2
 80068b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	0159      	lsls	r1, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	440b      	add	r3, r1
 80068ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ce:	4619      	mov	r1, r3
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <USB_DeactivateEndpoint+0x1b4>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	ec337800 	.word	0xec337800
 80068e8:	eff37800 	.word	0xeff37800

080068ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	@ 0x28
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 817a 	bne.w	8006c02 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d132      	bne.n	800697c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006930:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006934:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006954:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006974:	0cdb      	lsrs	r3, r3, #19
 8006976:	04db      	lsls	r3, r3, #19
 8006978:	6113      	str	r3, [r2, #16]
 800697a:	e092      	b.n	8006aa2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006996:	0cdb      	lsrs	r3, r3, #19
 8006998:	04db      	lsls	r3, r3, #19
 800699a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d11a      	bne.n	80069fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d903      	bls.n	80069da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069f8:	6113      	str	r3, [r2, #16]
 80069fa:	e01b      	b.n	8006a34 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a08:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6919      	ldr	r1, [r3, #16]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	440b      	add	r3, r1
 8006a14:	1e59      	subs	r1, r3, #1
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a1e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a20:	4ba2      	ldr	r3, [pc, #648]	@ (8006cac <USB_EPStartXfer+0x3c0>)
 8006a22:	400b      	ands	r3, r1
 8006a24:	69b9      	ldr	r1, [r7, #24]
 8006a26:	0148      	lsls	r0, r1, #5
 8006a28:	69f9      	ldr	r1, [r7, #28]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a4a:	69b9      	ldr	r1, [r7, #24]
 8006a4c:	0148      	lsls	r0, r1, #5
 8006a4e:	69f9      	ldr	r1, [r7, #28]
 8006a50:	4401      	add	r1, r0
 8006a52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a56:	4313      	orrs	r3, r2
 8006a58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	791b      	ldrb	r3, [r3, #4]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d11f      	bne.n	8006aa2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a7c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006a80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aa0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d14b      	bne.n	8006b40 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006abc:	461a      	mov	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	791b      	ldrb	r3, [r3, #4]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d128      	bne.n	8006b1e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e00f      	b.n	8006b1e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e165      	b.n	8006e0c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	791b      	ldrb	r3, [r3, #4]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d015      	beq.n	8006b94 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 814d 	beq.w	8006e0c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	2101      	movs	r1, #1
 8006b84:	fa01 f303 	lsl.w	r3, r1, r3
 8006b88:	69f9      	ldr	r1, [r7, #28]
 8006b8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b92:	e13b      	b.n	8006e0c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d110      	bne.n	8006bc6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	e00f      	b.n	8006be6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	68d9      	ldr	r1, [r3, #12]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	b298      	uxth	r0, r3
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f9b8 	bl	8006f70 <USB_WritePacket>
 8006c00:	e104      	b.n	8006e0c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c1c:	0cdb      	lsrs	r3, r3, #19
 8006c1e:	04db      	lsls	r3, r3, #19
 8006c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c44:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d131      	bne.n	8006cb0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7a:	69b9      	ldr	r1, [r7, #24]
 8006c7c:	0148      	lsls	r0, r1, #5
 8006c7e:	69f9      	ldr	r1, [r7, #28]
 8006c80:	4401      	add	r1, r0
 8006c82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c86:	4313      	orrs	r3, r2
 8006c88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ca8:	6113      	str	r3, [r2, #16]
 8006caa:	e061      	b.n	8006d70 <USB_EPStartXfer+0x484>
 8006cac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d123      	bne.n	8006d00 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cce:	69b9      	ldr	r1, [r7, #24]
 8006cd0:	0148      	lsls	r0, r1, #5
 8006cd2:	69f9      	ldr	r1, [r7, #28]
 8006cd4:	4401      	add	r1, r0
 8006cd6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	0151      	lsls	r1, r2, #5
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cfc:	6113      	str	r3, [r2, #16]
 8006cfe:	e037      	b.n	8006d70 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	691a      	ldr	r2, [r3, #16]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	1e5a      	subs	r2, r3, #1
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d14:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	8afa      	ldrh	r2, [r7, #22]
 8006d1c:	fb03 f202 	mul.w	r2, r3, r2
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	8afb      	ldrh	r3, [r7, #22]
 8006d34:	04d9      	lsls	r1, r3, #19
 8006d36:	4b38      	ldr	r3, [pc, #224]	@ (8006e18 <USB_EPStartXfer+0x52c>)
 8006d38:	400b      	ands	r3, r1
 8006d3a:	69b9      	ldr	r1, [r7, #24]
 8006d3c:	0148      	lsls	r0, r1, #5
 8006d3e:	69f9      	ldr	r1, [r7, #28]
 8006d40:	4401      	add	r1, r0
 8006d42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d46:	4313      	orrs	r3, r2
 8006d48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	0148      	lsls	r0, r1, #5
 8006d64:	69f9      	ldr	r1, [r7, #28]
 8006d66:	4401      	add	r1, r0
 8006d68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d10d      	bne.n	8006d92 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d009      	beq.n	8006d92 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	68d9      	ldr	r1, [r3, #12]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8e:	460a      	mov	r2, r1
 8006d90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	791b      	ldrb	r3, [r3, #4]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d128      	bne.n	8006dec <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d110      	bne.n	8006dcc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e00f      	b.n	8006dec <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3720      	adds	r7, #32
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	1ff80000 	.word	0x1ff80000

08006e1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d14a      	bne.n	8006ed0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e52:	f040 8086 	bne.w	8006f62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d902      	bls.n	8006eb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb2:	e056      	b.n	8006f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ecc:	d0e7      	beq.n	8006e9e <USB_EPStopXfer+0x82>
 8006ece:	e048      	b.n	8006f62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ee8:	d13b      	bne.n	8006f62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d902      	bls.n	8006f48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
          break;
 8006f46:	e00c      	b.n	8006f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f60:	d0e7      	beq.n	8006f32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b089      	sub	sp, #36	@ 0x24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	460b      	mov	r3, r1
 8006f80:	71fb      	strb	r3, [r7, #7]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d123      	bne.n	8006fde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f96:	88bb      	ldrh	r3, [r7, #4]
 8006f98:	3303      	adds	r3, #3
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	e018      	b.n	8006fd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	031a      	lsls	r2, r3, #12
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d3e2      	bcc.n	8006fa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3724      	adds	r7, #36	@ 0x24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b08b      	sub	sp, #44	@ 0x2c
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	b29b      	uxth	r3, r3
 8007008:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	e014      	b.n	8007042 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	601a      	str	r2, [r3, #0]
    pDest++;
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	3301      	adds	r3, #1
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	3301      	adds	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	3301      	adds	r3, #1
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	3301      	adds	r3, #1
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	3301      	adds	r3, #1
 8007040:	623b      	str	r3, [r7, #32]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	429a      	cmp	r2, r3
 8007048:	d3e6      	bcc.n	8007018 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800704a:	8bfb      	ldrh	r3, [r7, #30]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01e      	beq.n	800708e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705a:	461a      	mov	r2, r3
 800705c:	f107 0310 	add.w	r3, r7, #16
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	701a      	strb	r2, [r3, #0]
      i++;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	3301      	adds	r3, #1
 800707a:	623b      	str	r3, [r7, #32]
      pDest++;
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	3b01      	subs	r3, #1
 8007086:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007088:	8bfb      	ldrh	r3, [r7, #30]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1ea      	bne.n	8007064 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007090:	4618      	mov	r0, r3
 8007092:	372c      	adds	r7, #44	@ 0x2c
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d12c      	bne.n	8007112 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	db12      	blt.n	80070f0 <USB_EPSetStall+0x54>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00f      	beq.n	80070f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800710a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	e02b      	b.n	800716a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	db12      	blt.n	800714a <USB_EPSetStall+0xae>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00f      	beq.n	800714a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007144:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007148:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007164:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d128      	bne.n	80071e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	791b      	ldrb	r3, [r3, #4]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d003      	beq.n	80071c4 <USB_EPClearStall+0x4c>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	791b      	ldrb	r3, [r3, #4]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d138      	bne.n	8007236 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	e027      	b.n	8007236 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007200:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007204:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	791b      	ldrb	r3, [r3, #4]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d003      	beq.n	8007216 <USB_EPClearStall+0x9e>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d10f      	bne.n	8007236 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007262:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007266:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007278:	68f9      	ldr	r1, [r7, #12]
 800727a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800727e:	4313      	orrs	r3, r2
 8007280:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072be:	f023 0302 	bic.w	r3, r3, #2
 80072c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	4013      	ands	r3, r2
 800735c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	0c1b      	lsrs	r3, r3, #16
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	4013      	ands	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	b29b      	uxth	r3, r3
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4013      	ands	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073d0:	68bb      	ldr	r3, [r7, #8]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007400:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	b2db      	uxtb	r3, r3
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4013      	ands	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800742c:	68bb      	ldr	r3, [r7, #8]
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	f003 0301 	and.w	r3, r3, #1
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007470:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007474:	f023 0307 	bic.w	r3, r3, #7
 8007478:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800748c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	460b      	mov	r3, r1
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	333c      	adds	r3, #60	@ 0x3c
 80074b2:	3304      	adds	r3, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4a26      	ldr	r2, [pc, #152]	@ (8007554 <USB_EP0_OutStart+0xb8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d90a      	bls.n	80074d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074d0:	d101      	bne.n	80074d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e037      	b.n	8007546 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074dc:	461a      	mov	r2, r3
 80074de:	2300      	movs	r3, #0
 80074e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007504:	f043 0318 	orr.w	r3, r3, #24
 8007508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007518:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800751c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d10f      	bne.n	8007544 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752a:	461a      	mov	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800753e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	4f54300a 	.word	0x4f54300a

08007558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007570:	d901      	bls.n	8007576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e01b      	b.n	80075ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	daf2      	bge.n	8007564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f043 0201 	orr.w	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800759a:	d901      	bls.n	80075a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e006      	b.n	80075ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d0f0      	beq.n	800758e <USB_CoreReset+0x36>

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80075cc:	f002 fc22 	bl	8009e14 <USBD_static_malloc>
 80075d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	32b0      	adds	r2, #176	@ 0xb0
 80075e2:	2100      	movs	r1, #0
 80075e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075e8:	2302      	movs	r3, #2
 80075ea:	e0d4      	b.n	8007796 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80075ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80075f0:	2100      	movs	r1, #0
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f003 fbe3 	bl	800adbe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32b0      	adds	r2, #176	@ 0xb0
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32b0      	adds	r2, #176	@ 0xb0
 8007612:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7c1b      	ldrb	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d138      	bne.n	8007696 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007624:	4b5e      	ldr	r3, [pc, #376]	@ (80077a0 <USBD_CDC_Init+0x1e4>)
 8007626:	7819      	ldrb	r1, [r3, #0]
 8007628:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800762c:	2202      	movs	r2, #2
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f002 facd 	bl	8009bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007634:	4b5a      	ldr	r3, [pc, #360]	@ (80077a0 <USBD_CDC_Init+0x1e4>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	f003 020f 	and.w	r2, r3, #15
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	3324      	adds	r3, #36	@ 0x24
 800764a:	2201      	movs	r2, #1
 800764c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800764e:	4b55      	ldr	r3, [pc, #340]	@ (80077a4 <USBD_CDC_Init+0x1e8>)
 8007650:	7819      	ldrb	r1, [r3, #0]
 8007652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007656:	2202      	movs	r2, #2
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f002 fab8 	bl	8009bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800765e:	4b51      	ldr	r3, [pc, #324]	@ (80077a4 <USBD_CDC_Init+0x1e8>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f003 020f 	and.w	r2, r3, #15
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007676:	2201      	movs	r2, #1
 8007678:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800767a:	4b4b      	ldr	r3, [pc, #300]	@ (80077a8 <USBD_CDC_Init+0x1ec>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 020f 	and.w	r2, r3, #15
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	3326      	adds	r3, #38	@ 0x26
 8007690:	2210      	movs	r2, #16
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e035      	b.n	8007702 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007696:	4b42      	ldr	r3, [pc, #264]	@ (80077a0 <USBD_CDC_Init+0x1e4>)
 8007698:	7819      	ldrb	r1, [r3, #0]
 800769a:	2340      	movs	r3, #64	@ 0x40
 800769c:	2202      	movs	r2, #2
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f002 fa95 	bl	8009bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076a4:	4b3e      	ldr	r3, [pc, #248]	@ (80077a0 <USBD_CDC_Init+0x1e4>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	f003 020f 	and.w	r2, r3, #15
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	3324      	adds	r3, #36	@ 0x24
 80076ba:	2201      	movs	r2, #1
 80076bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076be:	4b39      	ldr	r3, [pc, #228]	@ (80077a4 <USBD_CDC_Init+0x1e8>)
 80076c0:	7819      	ldrb	r1, [r3, #0]
 80076c2:	2340      	movs	r3, #64	@ 0x40
 80076c4:	2202      	movs	r2, #2
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f002 fa81 	bl	8009bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076cc:	4b35      	ldr	r3, [pc, #212]	@ (80077a4 <USBD_CDC_Init+0x1e8>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 020f 	and.w	r2, r3, #15
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076e4:	2201      	movs	r2, #1
 80076e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076e8:	4b2f      	ldr	r3, [pc, #188]	@ (80077a8 <USBD_CDC_Init+0x1ec>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 020f 	and.w	r2, r3, #15
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	3326      	adds	r3, #38	@ 0x26
 80076fe:	2210      	movs	r2, #16
 8007700:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007702:	4b29      	ldr	r3, [pc, #164]	@ (80077a8 <USBD_CDC_Init+0x1ec>)
 8007704:	7819      	ldrb	r1, [r3, #0]
 8007706:	2308      	movs	r3, #8
 8007708:	2203      	movs	r2, #3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f002 fa5f 	bl	8009bce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007710:	4b25      	ldr	r3, [pc, #148]	@ (80077a8 <USBD_CDC_Init+0x1ec>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	f003 020f 	and.w	r2, r3, #15
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	3324      	adds	r3, #36	@ 0x24
 8007726:	2201      	movs	r2, #1
 8007728:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	33b0      	adds	r3, #176	@ 0xb0
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007760:	2302      	movs	r3, #2
 8007762:	e018      	b.n	8007796 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7c1b      	ldrb	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800776c:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <USBD_CDC_Init+0x1e8>)
 800776e:	7819      	ldrb	r1, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f002 fb16 	bl	8009dac <USBD_LL_PrepareReceive>
 8007780:	e008      	b.n	8007794 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007782:	4b08      	ldr	r3, [pc, #32]	@ (80077a4 <USBD_CDC_Init+0x1e8>)
 8007784:	7819      	ldrb	r1, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800778c:	2340      	movs	r3, #64	@ 0x40
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f002 fb0c 	bl	8009dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200000b3 	.word	0x200000b3
 80077a4:	200000b4 	.word	0x200000b4
 80077a8:	200000b5 	.word	0x200000b5

080077ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80077b8:	4b3a      	ldr	r3, [pc, #232]	@ (80078a4 <USBD_CDC_DeInit+0xf8>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f002 fa2b 	bl	8009c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077c4:	4b37      	ldr	r3, [pc, #220]	@ (80078a4 <USBD_CDC_DeInit+0xf8>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 020f 	and.w	r2, r3, #15
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	3324      	adds	r3, #36	@ 0x24
 80077da:	2200      	movs	r2, #0
 80077dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80077de:	4b32      	ldr	r3, [pc, #200]	@ (80078a8 <USBD_CDC_DeInit+0xfc>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f002 fa18 	bl	8009c1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80077ea:	4b2f      	ldr	r3, [pc, #188]	@ (80078a8 <USBD_CDC_DeInit+0xfc>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	f003 020f 	and.w	r2, r3, #15
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007802:	2200      	movs	r2, #0
 8007804:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007806:	4b29      	ldr	r3, [pc, #164]	@ (80078ac <USBD_CDC_DeInit+0x100>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f002 fa04 	bl	8009c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007812:	4b26      	ldr	r3, [pc, #152]	@ (80078ac <USBD_CDC_DeInit+0x100>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f003 020f 	and.w	r2, r3, #15
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	440b      	add	r3, r1
 8007826:	3324      	adds	r3, #36	@ 0x24
 8007828:	2200      	movs	r2, #0
 800782a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800782c:	4b1f      	ldr	r3, [pc, #124]	@ (80078ac <USBD_CDC_DeInit+0x100>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	f003 020f 	and.w	r2, r3, #15
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	440b      	add	r3, r1
 8007840:	3326      	adds	r3, #38	@ 0x26
 8007842:	2200      	movs	r2, #0
 8007844:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	32b0      	adds	r2, #176	@ 0xb0
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01f      	beq.n	8007898 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	33b0      	adds	r3, #176	@ 0xb0
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	32b0      	adds	r2, #176	@ 0xb0
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	4618      	mov	r0, r3
 800787c:	f002 fad8 	bl	8009e30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	32b0      	adds	r2, #176	@ 0xb0
 800788a:	2100      	movs	r1, #0
 800788c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	200000b3 	.word	0x200000b3
 80078a8:	200000b4 	.word	0x200000b4
 80078ac:	200000b5 	.word	0x200000b5

080078b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	32b0      	adds	r2, #176	@ 0xb0
 80078c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80078dc:	2303      	movs	r3, #3
 80078de:	e0bf      	b.n	8007a60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d050      	beq.n	800798e <USBD_CDC_Setup+0xde>
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	f040 80af 	bne.w	8007a50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	88db      	ldrh	r3, [r3, #6]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d03a      	beq.n	8007970 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	da1b      	bge.n	800793c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	33b0      	adds	r3, #176	@ 0xb0
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800791a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	88d2      	ldrh	r2, [r2, #6]
 8007920:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	88db      	ldrh	r3, [r3, #6]
 8007926:	2b07      	cmp	r3, #7
 8007928:	bf28      	it	cs
 800792a:	2307      	movcs	r3, #7
 800792c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	89fa      	ldrh	r2, [r7, #14]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fd47 	bl	80093c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800793a:	e090      	b.n	8007a5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	785a      	ldrb	r2, [r3, #1]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	88db      	ldrh	r3, [r3, #6]
 800794a:	2b3f      	cmp	r3, #63	@ 0x3f
 800794c:	d803      	bhi.n	8007956 <USBD_CDC_Setup+0xa6>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88db      	ldrh	r3, [r3, #6]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	e000      	b.n	8007958 <USBD_CDC_Setup+0xa8>
 8007956:	2240      	movs	r2, #64	@ 0x40
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800795e:	6939      	ldr	r1, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007966:	461a      	mov	r2, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fd59 	bl	8009420 <USBD_CtlPrepareRx>
      break;
 800796e:	e076      	b.n	8007a5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	33b0      	adds	r3, #176	@ 0xb0
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	7850      	ldrb	r0, [r2, #1]
 8007986:	2200      	movs	r2, #0
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	4798      	blx	r3
      break;
 800798c:	e067      	b.n	8007a5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b0b      	cmp	r3, #11
 8007994:	d851      	bhi.n	8007a3a <USBD_CDC_Setup+0x18a>
 8007996:	a201      	add	r2, pc, #4	@ (adr r2, 800799c <USBD_CDC_Setup+0xec>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	080079cd 	.word	0x080079cd
 80079a0:	08007a49 	.word	0x08007a49
 80079a4:	08007a3b 	.word	0x08007a3b
 80079a8:	08007a3b 	.word	0x08007a3b
 80079ac:	08007a3b 	.word	0x08007a3b
 80079b0:	08007a3b 	.word	0x08007a3b
 80079b4:	08007a3b 	.word	0x08007a3b
 80079b8:	08007a3b 	.word	0x08007a3b
 80079bc:	08007a3b 	.word	0x08007a3b
 80079c0:	08007a3b 	.word	0x08007a3b
 80079c4:	080079f7 	.word	0x080079f7
 80079c8:	08007a21 	.word	0x08007a21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d107      	bne.n	80079e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079d8:	f107 030a 	add.w	r3, r7, #10
 80079dc:	2202      	movs	r2, #2
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fcf1 	bl	80093c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079e6:	e032      	b.n	8007a4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 fc7b 	bl	80092e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	75fb      	strb	r3, [r7, #23]
          break;
 80079f4:	e02b      	b.n	8007a4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d107      	bne.n	8007a12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a02:	f107 030d 	add.w	r3, r7, #13
 8007a06:	2201      	movs	r2, #1
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fcdc 	bl	80093c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a10:	e01d      	b.n	8007a4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fc66 	bl	80092e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a1e:	e016      	b.n	8007a4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d00f      	beq.n	8007a4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 fc59 	bl	80092e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a38:	e008      	b.n	8007a4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fc52 	bl	80092e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a42:	2303      	movs	r3, #3
 8007a44:	75fb      	strb	r3, [r7, #23]
          break;
 8007a46:	e002      	b.n	8007a4e <USBD_CDC_Setup+0x19e>
          break;
 8007a48:	bf00      	nop
 8007a4a:	e008      	b.n	8007a5e <USBD_CDC_Setup+0x1ae>
          break;
 8007a4c:	bf00      	nop
      }
      break;
 8007a4e:	e006      	b.n	8007a5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fc47 	bl	80092e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32b0      	adds	r2, #176	@ 0xb0
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e065      	b.n	8007b5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	32b0      	adds	r2, #176	@ 0xb0
 8007a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	f003 020f 	and.w	r2, r3, #15
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d02f      	beq.n	8007b1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	f003 020f 	and.w	r2, r3, #15
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	3318      	adds	r3, #24
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	f003 010f 	and.w	r1, r3, #15
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	460b      	mov	r3, r1
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	440b      	add	r3, r1
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4403      	add	r3, r0
 8007ae4:	331c      	adds	r3, #28
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d112      	bne.n	8007b1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	f003 020f 	and.w	r2, r3, #15
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	3318      	adds	r3, #24
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b0e:	78f9      	ldrb	r1, [r7, #3]
 8007b10:	2300      	movs	r3, #0
 8007b12:	2200      	movs	r2, #0
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f002 f928 	bl	8009d6a <USBD_LL_Transmit>
 8007b1a:	e01f      	b.n	8007b5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	33b0      	adds	r3, #176	@ 0xb0
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d010      	beq.n	8007b5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	33b0      	adds	r3, #176	@ 0xb0
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	32b0      	adds	r2, #176	@ 0xb0
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	32b0      	adds	r2, #176	@ 0xb0
 8007b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e01a      	b.n	8007bce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f002 f926 	bl	8009dee <USBD_LL_GetRxDataSize>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	33b0      	adds	r3, #176	@ 0xb0
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	32b0      	adds	r2, #176	@ 0xb0
 8007be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e024      	b.n	8007c42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	33b0      	adds	r3, #176	@ 0xb0
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d019      	beq.n	8007c40 <USBD_CDC_EP0_RxReady+0x6a>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007c12:	2bff      	cmp	r3, #255	@ 0xff
 8007c14:	d014      	beq.n	8007c40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	33b0      	adds	r3, #176	@ 0xb0
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	22ff      	movs	r2, #255	@ 0xff
 8007c3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c54:	2182      	movs	r1, #130	@ 0x82
 8007c56:	4818      	ldr	r0, [pc, #96]	@ (8007cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c58:	f000 fd0f 	bl	800867a <USBD_GetEpDesc>
 8007c5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4815      	ldr	r0, [pc, #84]	@ (8007cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c62:	f000 fd0a 	bl	800867a <USBD_GetEpDesc>
 8007c66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c68:	2181      	movs	r1, #129	@ 0x81
 8007c6a:	4813      	ldr	r0, [pc, #76]	@ (8007cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c6c:	f000 fd05 	bl	800867a <USBD_GetEpDesc>
 8007c70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2210      	movs	r2, #16
 8007c7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d006      	beq.n	8007c92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c8c:	711a      	strb	r2, [r3, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ca0:	711a      	strb	r2, [r3, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2243      	movs	r2, #67	@ 0x43
 8007caa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007cac:	4b02      	ldr	r3, [pc, #8]	@ (8007cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000070 	.word	0x20000070

08007cbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cc4:	2182      	movs	r1, #130	@ 0x82
 8007cc6:	4818      	ldr	r0, [pc, #96]	@ (8007d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cc8:	f000 fcd7 	bl	800867a <USBD_GetEpDesc>
 8007ccc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cce:	2101      	movs	r1, #1
 8007cd0:	4815      	ldr	r0, [pc, #84]	@ (8007d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cd2:	f000 fcd2 	bl	800867a <USBD_GetEpDesc>
 8007cd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cd8:	2181      	movs	r1, #129	@ 0x81
 8007cda:	4813      	ldr	r0, [pc, #76]	@ (8007d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cdc:	f000 fccd 	bl	800867a <USBD_GetEpDesc>
 8007ce0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2210      	movs	r2, #16
 8007cec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	711a      	strb	r2, [r3, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f042 0202 	orr.w	r2, r2, #2
 8007d00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d006      	beq.n	8007d16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	711a      	strb	r2, [r3, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f042 0202 	orr.w	r2, r2, #2
 8007d14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2243      	movs	r2, #67	@ 0x43
 8007d1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d1c:	4b02      	ldr	r3, [pc, #8]	@ (8007d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000070 	.word	0x20000070

08007d2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d34:	2182      	movs	r1, #130	@ 0x82
 8007d36:	4818      	ldr	r0, [pc, #96]	@ (8007d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d38:	f000 fc9f 	bl	800867a <USBD_GetEpDesc>
 8007d3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4815      	ldr	r0, [pc, #84]	@ (8007d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d42:	f000 fc9a 	bl	800867a <USBD_GetEpDesc>
 8007d46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d48:	2181      	movs	r1, #129	@ 0x81
 8007d4a:	4813      	ldr	r0, [pc, #76]	@ (8007d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d4c:	f000 fc95 	bl	800867a <USBD_GetEpDesc>
 8007d50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2210      	movs	r2, #16
 8007d5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d006      	beq.n	8007d72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d6c:	711a      	strb	r2, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d006      	beq.n	8007d86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d80:	711a      	strb	r2, [r3, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2243      	movs	r2, #67	@ 0x43
 8007d8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d8c:	4b02      	ldr	r3, [pc, #8]	@ (8007d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000070 	.word	0x20000070

08007d9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	220a      	movs	r2, #10
 8007da8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007daa:	4b03      	ldr	r3, [pc, #12]	@ (8007db8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	2000002c 	.word	0x2000002c

08007dbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e009      	b.n	8007de4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	33b0      	adds	r3, #176	@ 0xb0
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	32b0      	adds	r2, #176	@ 0xb0
 8007e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e008      	b.n	8007e28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	32b0      	adds	r2, #176	@ 0xb0
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e004      	b.n	8007e62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
	...

08007e70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	32b0      	adds	r2, #176	@ 0xb0
 8007e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32b0      	adds	r2, #176	@ 0xb0
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e018      	b.n	8007ed0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7c1b      	ldrb	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10a      	bne.n	8007ebc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <USBD_CDC_ReceivePacket+0x68>)
 8007ea8:	7819      	ldrb	r1, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 ff79 	bl	8009dac <USBD_LL_PrepareReceive>
 8007eba:	e008      	b.n	8007ece <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ebc:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <USBD_CDC_ReceivePacket+0x68>)
 8007ebe:	7819      	ldrb	r1, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ec6:	2340      	movs	r3, #64	@ 0x40
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 ff6f 	bl	8009dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	200000b4 	.word	0x200000b4

08007edc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e01f      	b.n	8007f34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	79fa      	ldrb	r2, [r7, #7]
 8007f26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f001 fde9 	bl	8009b00 <USBD_LL_Init>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e025      	b.n	8007fa0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	32ae      	adds	r2, #174	@ 0xae
 8007f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00f      	beq.n	8007f90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	32ae      	adds	r2, #174	@ 0xae
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f80:	f107 020e 	add.w	r2, r7, #14
 8007f84:	4610      	mov	r0, r2
 8007f86:	4798      	blx	r3
 8007f88:	4602      	mov	r2, r0
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 fdf1 	bl	8009b98 <USBD_LL_Start>
 8007fb6:	4603      	mov	r3, r0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	4611      	mov	r1, r2
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008034:	2303      	movs	r3, #3
 8008036:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f001 f90c 	bl	8009272 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008068:	461a      	mov	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008076:	f003 031f 	and.w	r3, r3, #31
 800807a:	2b02      	cmp	r3, #2
 800807c:	d01a      	beq.n	80080b4 <USBD_LL_SetupStage+0x72>
 800807e:	2b02      	cmp	r3, #2
 8008080:	d822      	bhi.n	80080c8 <USBD_LL_SetupStage+0x86>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <USBD_LL_SetupStage+0x4a>
 8008086:	2b01      	cmp	r3, #1
 8008088:	d00a      	beq.n	80080a0 <USBD_LL_SetupStage+0x5e>
 800808a:	e01d      	b.n	80080c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fb63 	bl	8008760 <USBD_StdDevReq>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
      break;
 800809e:	e020      	b.n	80080e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fbcb 	bl	8008844 <USBD_StdItfReq>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
      break;
 80080b2:	e016      	b.n	80080e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fc2d 	bl	800891c <USBD_StdEPReq>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]
      break;
 80080c6:	e00c      	b.n	80080e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fdbe 	bl	8009c58 <USBD_LL_StallEP>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
      break;
 80080e0:	bf00      	nop
  }

  return ret;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	460b      	mov	r3, r1
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080fe:	7afb      	ldrb	r3, [r7, #11]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d16e      	bne.n	80081e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800810a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008112:	2b03      	cmp	r3, #3
 8008114:	f040 8098 	bne.w	8008248 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	429a      	cmp	r2, r3
 8008122:	d913      	bls.n	800814c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	1ad2      	subs	r2, r2, r3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	4293      	cmp	r3, r2
 800813c:	bf28      	it	cs
 800813e:	4613      	movcs	r3, r2
 8008140:	461a      	mov	r2, r3
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f001 f988 	bl	800945a <USBD_CtlContinueRx>
 800814a:	e07d      	b.n	8008248 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b02      	cmp	r3, #2
 8008158:	d014      	beq.n	8008184 <USBD_LL_DataOutStage+0x98>
 800815a:	2b02      	cmp	r3, #2
 800815c:	d81d      	bhi.n	800819a <USBD_LL_DataOutStage+0xae>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <USBD_LL_DataOutStage+0x7c>
 8008162:	2b01      	cmp	r3, #1
 8008164:	d003      	beq.n	800816e <USBD_LL_DataOutStage+0x82>
 8008166:	e018      	b.n	800819a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	75bb      	strb	r3, [r7, #22]
            break;
 800816c:	e018      	b.n	80081a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008174:	b2db      	uxtb	r3, r3
 8008176:	4619      	mov	r1, r3
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 fa64 	bl	8008646 <USBD_CoreFindIF>
 800817e:	4603      	mov	r3, r0
 8008180:	75bb      	strb	r3, [r7, #22]
            break;
 8008182:	e00d      	b.n	80081a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800818a:	b2db      	uxtb	r3, r3
 800818c:	4619      	mov	r1, r3
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fa66 	bl	8008660 <USBD_CoreFindEP>
 8008194:	4603      	mov	r3, r0
 8008196:	75bb      	strb	r3, [r7, #22]
            break;
 8008198:	e002      	b.n	80081a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	75bb      	strb	r3, [r7, #22]
            break;
 800819e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80081a0:	7dbb      	ldrb	r3, [r7, #22]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d119      	bne.n	80081da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d113      	bne.n	80081da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80081b2:	7dba      	ldrb	r2, [r7, #22]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	32ae      	adds	r2, #174	@ 0xae
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081c2:	7dba      	ldrb	r2, [r7, #22]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081ca:	7dba      	ldrb	r2, [r7, #22]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	32ae      	adds	r2, #174	@ 0xae
 80081d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f001 f94e 	bl	800947c <USBD_CtlSendStatus>
 80081e0:	e032      	b.n	8008248 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081e2:	7afb      	ldrb	r3, [r7, #11]
 80081e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	4619      	mov	r1, r3
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fa37 	bl	8008660 <USBD_CoreFindEP>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081f6:	7dbb      	ldrb	r3, [r7, #22]
 80081f8:	2bff      	cmp	r3, #255	@ 0xff
 80081fa:	d025      	beq.n	8008248 <USBD_LL_DataOutStage+0x15c>
 80081fc:	7dbb      	ldrb	r3, [r7, #22]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d122      	bne.n	8008248 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b03      	cmp	r3, #3
 800820c:	d117      	bne.n	800823e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800820e:	7dba      	ldrb	r2, [r7, #22]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	32ae      	adds	r2, #174	@ 0xae
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00f      	beq.n	800823e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800821e:	7dba      	ldrb	r2, [r7, #22]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008226:	7dba      	ldrb	r2, [r7, #22]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	32ae      	adds	r2, #174	@ 0xae
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	7afa      	ldrb	r2, [r7, #11]
 8008234:	4611      	mov	r1, r2
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	4798      	blx	r3
 800823a:	4603      	mov	r3, r0
 800823c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	e000      	b.n	800824a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b086      	sub	sp, #24
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	460b      	mov	r3, r1
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d16f      	bne.n	8008346 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3314      	adds	r3, #20
 800826a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008272:	2b02      	cmp	r3, #2
 8008274:	d15a      	bne.n	800832c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	429a      	cmp	r2, r3
 8008280:	d914      	bls.n	80082ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	461a      	mov	r2, r3
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f001 f8b0 	bl	80093fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829e:	2300      	movs	r3, #0
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f001 fd81 	bl	8009dac <USBD_LL_PrepareReceive>
 80082aa:	e03f      	b.n	800832c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d11c      	bne.n	80082f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d316      	bcc.n	80082f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d20f      	bcs.n	80082f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f001 f891 	bl	80093fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082e4:	2300      	movs	r3, #0
 80082e6:	2200      	movs	r2, #0
 80082e8:	2100      	movs	r1, #0
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f001 fd5e 	bl	8009dac <USBD_LL_PrepareReceive>
 80082f0:	e01c      	b.n	800832c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d10f      	bne.n	800831e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800831e:	2180      	movs	r1, #128	@ 0x80
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f001 fc99 	bl	8009c58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f001 f8bb 	bl	80094a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d03a      	beq.n	80083ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff fe42 	bl	8007fc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008344:	e032      	b.n	80083ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800834c:	b2db      	uxtb	r3, r3
 800834e:	4619      	mov	r1, r3
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f985 	bl	8008660 <USBD_CoreFindEP>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2bff      	cmp	r3, #255	@ 0xff
 800835e:	d025      	beq.n	80083ac <USBD_LL_DataInStage+0x15a>
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d122      	bne.n	80083ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b03      	cmp	r3, #3
 8008370:	d11c      	bne.n	80083ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008372:	7dfa      	ldrb	r2, [r7, #23]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	32ae      	adds	r2, #174	@ 0xae
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d014      	beq.n	80083ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008382:	7dfa      	ldrb	r2, [r7, #23]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800838a:	7dfa      	ldrb	r2, [r7, #23]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	32ae      	adds	r2, #174	@ 0xae
 8008390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	7afa      	ldrb	r2, [r7, #11]
 8008398:	4611      	mov	r1, r2
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	4798      	blx	r3
 800839e:	4603      	mov	r3, r0
 80083a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80083a2:	7dbb      	ldrb	r3, [r7, #22]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80083a8:	7dbb      	ldrb	r3, [r7, #22]
 80083aa:	e000      	b.n	80083ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d014      	beq.n	800841c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00e      	beq.n	800841c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6852      	ldr	r2, [r2, #4]
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	4611      	mov	r1, r2
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800841c:	2340      	movs	r3, #64	@ 0x40
 800841e:	2200      	movs	r2, #0
 8008420:	2100      	movs	r1, #0
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fbd3 	bl	8009bce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2240      	movs	r2, #64	@ 0x40
 8008434:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008438:	2340      	movs	r3, #64	@ 0x40
 800843a:	2200      	movs	r2, #0
 800843c:	2180      	movs	r1, #128	@ 0x80
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 fbc5 	bl	8009bce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2240      	movs	r2, #64	@ 0x40
 800844e:	621a      	str	r2, [r3, #32]

  return ret;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	78fa      	ldrb	r2, [r7, #3]
 800846a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b04      	cmp	r3, #4
 800848c:	d006      	beq.n	800849c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008494:	b2da      	uxtb	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2204      	movs	r2, #4
 80084a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d106      	bne.n	80084d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d110      	bne.n	8008518 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	32ae      	adds	r2, #174	@ 0xae
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e01c      	b.n	800857e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b03      	cmp	r3, #3
 800854e:	d115      	bne.n	800857c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	32ae      	adds	r2, #174	@ 0xae
 800855a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	32ae      	adds	r2, #174	@ 0xae
 800856e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	78fa      	ldrb	r2, [r7, #3]
 8008576:	4611      	mov	r1, r2
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	32ae      	adds	r2, #174	@ 0xae
 800859c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e01c      	b.n	80085e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d115      	bne.n	80085e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	32ae      	adds	r2, #174	@ 0xae
 80085be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	32ae      	adds	r2, #174	@ 0xae
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	4611      	mov	r1, r2
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00e      	beq.n	800863c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6852      	ldr	r2, [r2, #4]
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	4611      	mov	r1, r2
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008638:	2303      	movs	r3, #3
 800863a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008652:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800866c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b086      	sub	sp, #24
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	885b      	ldrh	r3, [r3, #2]
 8008696:	b29b      	uxth	r3, r3
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	4293      	cmp	r3, r2
 800869e:	d91f      	bls.n	80086e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80086a6:	e013      	b.n	80086d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80086a8:	f107 030a 	add.w	r3, r7, #10
 80086ac:	4619      	mov	r1, r3
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f000 f81b 	bl	80086ea <USBD_GetNextDesc>
 80086b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d108      	bne.n	80086d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	789b      	ldrb	r3, [r3, #2]
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d008      	beq.n	80086de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	897b      	ldrh	r3, [r7, #10]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d8e5      	bhi.n	80086a8 <USBD_GetEpDesc+0x2e>
 80086dc:	e000      	b.n	80086e0 <USBD_GetEpDesc+0x66>
          break;
 80086de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086e0:	693b      	ldr	r3, [r7, #16]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	7812      	ldrb	r2, [r2, #0]
 8008700:	4413      	add	r3, r2
 8008702:	b29a      	uxth	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4413      	add	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008714:	68fb      	ldr	r3, [r7, #12]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008722:	b480      	push	{r7}
 8008724:	b087      	sub	sp, #28
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	3301      	adds	r3, #1
 8008738:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008740:	8a3b      	ldrh	r3, [r7, #16]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	b21a      	sxth	r2, r3
 8008746:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800874a:	4313      	orrs	r3, r2
 800874c:	b21b      	sxth	r3, r3
 800874e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008750:	89fb      	ldrh	r3, [r7, #14]
}
 8008752:	4618      	mov	r0, r3
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
	...

08008760 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008776:	2b40      	cmp	r3, #64	@ 0x40
 8008778:	d005      	beq.n	8008786 <USBD_StdDevReq+0x26>
 800877a:	2b40      	cmp	r3, #64	@ 0x40
 800877c:	d857      	bhi.n	800882e <USBD_StdDevReq+0xce>
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00f      	beq.n	80087a2 <USBD_StdDevReq+0x42>
 8008782:	2b20      	cmp	r3, #32
 8008784:	d153      	bne.n	800882e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	32ae      	adds	r2, #174	@ 0xae
 8008790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	4798      	blx	r3
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]
      break;
 80087a0:	e04a      	b.n	8008838 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d83b      	bhi.n	8008822 <USBD_StdDevReq+0xc2>
 80087aa:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <USBD_StdDevReq+0x50>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	08008805 	.word	0x08008805
 80087b4:	08008819 	.word	0x08008819
 80087b8:	08008823 	.word	0x08008823
 80087bc:	0800880f 	.word	0x0800880f
 80087c0:	08008823 	.word	0x08008823
 80087c4:	080087e3 	.word	0x080087e3
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	08008823 	.word	0x08008823
 80087d0:	080087fb 	.word	0x080087fb
 80087d4:	080087ed 	.word	0x080087ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa3c 	bl	8008c58 <USBD_GetDescriptor>
          break;
 80087e0:	e024      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fba1 	bl	8008f2c <USBD_SetAddress>
          break;
 80087ea:	e01f      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fbe0 	bl	8008fb4 <USBD_SetConfig>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73fb      	strb	r3, [r7, #15]
          break;
 80087f8:	e018      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fc83 	bl	8009108 <USBD_GetConfig>
          break;
 8008802:	e013      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fcb4 	bl	8009174 <USBD_GetStatus>
          break;
 800880c:	e00e      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fce3 	bl	80091dc <USBD_SetFeature>
          break;
 8008816:	e009      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fd07 	bl	800922e <USBD_ClrFeature>
          break;
 8008820:	e004      	b.n	800882c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fd5e 	bl	80092e6 <USBD_CtlError>
          break;
 800882a:	bf00      	nop
      }
      break;
 800882c:	e004      	b.n	8008838 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fd58 	bl	80092e6 <USBD_CtlError>
      break;
 8008836:	bf00      	nop
  }

  return ret;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop

08008844 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800885a:	2b40      	cmp	r3, #64	@ 0x40
 800885c:	d005      	beq.n	800886a <USBD_StdItfReq+0x26>
 800885e:	2b40      	cmp	r3, #64	@ 0x40
 8008860:	d852      	bhi.n	8008908 <USBD_StdItfReq+0xc4>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <USBD_StdItfReq+0x26>
 8008866:	2b20      	cmp	r3, #32
 8008868:	d14e      	bne.n	8008908 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008870:	b2db      	uxtb	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	2b02      	cmp	r3, #2
 8008876:	d840      	bhi.n	80088fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	889b      	ldrh	r3, [r3, #4]
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b01      	cmp	r3, #1
 8008880:	d836      	bhi.n	80088f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	889b      	ldrh	r3, [r3, #4]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fedb 	bl	8008646 <USBD_CoreFindIF>
 8008890:	4603      	mov	r3, r0
 8008892:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2bff      	cmp	r3, #255	@ 0xff
 8008898:	d01d      	beq.n	80088d6 <USBD_StdItfReq+0x92>
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d11a      	bne.n	80088d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80088a0:	7bba      	ldrb	r2, [r7, #14]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	32ae      	adds	r2, #174	@ 0xae
 80088a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80088b0:	7bba      	ldrb	r2, [r7, #14]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088b8:	7bba      	ldrb	r2, [r7, #14]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	32ae      	adds	r2, #174	@ 0xae
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088ce:	e004      	b.n	80088da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088d0:	2303      	movs	r3, #3
 80088d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088d4:	e001      	b.n	80088da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088d6:	2303      	movs	r3, #3
 80088d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	88db      	ldrh	r3, [r3, #6]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d110      	bne.n	8008904 <USBD_StdItfReq+0xc0>
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fdc7 	bl	800947c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088ee:	e009      	b.n	8008904 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fcf7 	bl	80092e6 <USBD_CtlError>
          break;
 80088f8:	e004      	b.n	8008904 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fcf2 	bl	80092e6 <USBD_CtlError>
          break;
 8008902:	e000      	b.n	8008906 <USBD_StdItfReq+0xc2>
          break;
 8008904:	bf00      	nop
      }
      break;
 8008906:	e004      	b.n	8008912 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fceb 	bl	80092e6 <USBD_CtlError>
      break;
 8008910:	bf00      	nop
  }

  return ret;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	889b      	ldrh	r3, [r3, #4]
 800892e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008938:	2b40      	cmp	r3, #64	@ 0x40
 800893a:	d007      	beq.n	800894c <USBD_StdEPReq+0x30>
 800893c:	2b40      	cmp	r3, #64	@ 0x40
 800893e:	f200 817f 	bhi.w	8008c40 <USBD_StdEPReq+0x324>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d02a      	beq.n	800899c <USBD_StdEPReq+0x80>
 8008946:	2b20      	cmp	r3, #32
 8008948:	f040 817a 	bne.w	8008c40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff fe85 	bl	8008660 <USBD_CoreFindEP>
 8008956:	4603      	mov	r3, r0
 8008958:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	2bff      	cmp	r3, #255	@ 0xff
 800895e:	f000 8174 	beq.w	8008c4a <USBD_StdEPReq+0x32e>
 8008962:	7b7b      	ldrb	r3, [r7, #13]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 8170 	bne.w	8008c4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800896a:	7b7a      	ldrb	r2, [r7, #13]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008972:	7b7a      	ldrb	r2, [r7, #13]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	32ae      	adds	r2, #174	@ 0xae
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8163 	beq.w	8008c4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008984:	7b7a      	ldrb	r2, [r7, #13]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	32ae      	adds	r2, #174	@ 0xae
 800898a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800899a:	e156      	b.n	8008c4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d008      	beq.n	80089b6 <USBD_StdEPReq+0x9a>
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	f300 8145 	bgt.w	8008c34 <USBD_StdEPReq+0x318>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 809b 	beq.w	8008ae6 <USBD_StdEPReq+0x1ca>
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d03c      	beq.n	8008a2e <USBD_StdEPReq+0x112>
 80089b4:	e13e      	b.n	8008c34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d002      	beq.n	80089c8 <USBD_StdEPReq+0xac>
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d016      	beq.n	80089f4 <USBD_StdEPReq+0xd8>
 80089c6:	e02c      	b.n	8008a22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <USBD_StdEPReq+0xce>
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	2b80      	cmp	r3, #128	@ 0x80
 80089d2:	d00a      	beq.n	80089ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f93d 	bl	8009c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089de:	2180      	movs	r1, #128	@ 0x80
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 f939 	bl	8009c58 <USBD_LL_StallEP>
 80089e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089e8:	e020      	b.n	8008a2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fc7a 	bl	80092e6 <USBD_CtlError>
              break;
 80089f2:	e01b      	b.n	8008a2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	885b      	ldrh	r3, [r3, #2]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10e      	bne.n	8008a1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <USBD_StdEPReq+0xfe>
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b80      	cmp	r3, #128	@ 0x80
 8008a06:	d008      	beq.n	8008a1a <USBD_StdEPReq+0xfe>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	88db      	ldrh	r3, [r3, #6]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f91f 	bl	8009c58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fd2e 	bl	800947c <USBD_CtlSendStatus>

              break;
 8008a20:	e004      	b.n	8008a2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc5e 	bl	80092e6 <USBD_CtlError>
              break;
 8008a2a:	bf00      	nop
          }
          break;
 8008a2c:	e107      	b.n	8008c3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d002      	beq.n	8008a40 <USBD_StdEPReq+0x124>
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d016      	beq.n	8008a6c <USBD_StdEPReq+0x150>
 8008a3e:	e04b      	b.n	8008ad8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <USBD_StdEPReq+0x146>
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b80      	cmp	r3, #128	@ 0x80
 8008a4a:	d00a      	beq.n	8008a62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f901 	bl	8009c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a56:	2180      	movs	r1, #128	@ 0x80
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f8fd 	bl	8009c58 <USBD_LL_StallEP>
 8008a5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a60:	e040      	b.n	8008ae4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fc3e 	bl	80092e6 <USBD_CtlError>
              break;
 8008a6a:	e03b      	b.n	8008ae4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	885b      	ldrh	r3, [r3, #2]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d136      	bne.n	8008ae2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 f907 	bl	8009c96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fcf7 	bl	800947c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fde4 	bl	8008660 <USBD_CoreFindEP>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a9c:	7b7b      	ldrb	r3, [r7, #13]
 8008a9e:	2bff      	cmp	r3, #255	@ 0xff
 8008aa0:	d01f      	beq.n	8008ae2 <USBD_StdEPReq+0x1c6>
 8008aa2:	7b7b      	ldrb	r3, [r7, #13]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d11c      	bne.n	8008ae2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008aa8:	7b7a      	ldrb	r2, [r7, #13]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ab0:	7b7a      	ldrb	r2, [r7, #13]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	32ae      	adds	r2, #174	@ 0xae
 8008ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d010      	beq.n	8008ae2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ac0:	7b7a      	ldrb	r2, [r7, #13]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	32ae      	adds	r2, #174	@ 0xae
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ad6:	e004      	b.n	8008ae2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc03 	bl	80092e6 <USBD_CtlError>
              break;
 8008ae0:	e000      	b.n	8008ae4 <USBD_StdEPReq+0x1c8>
              break;
 8008ae2:	bf00      	nop
          }
          break;
 8008ae4:	e0ab      	b.n	8008c3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d002      	beq.n	8008af8 <USBD_StdEPReq+0x1dc>
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d032      	beq.n	8008b5c <USBD_StdEPReq+0x240>
 8008af6:	e097      	b.n	8008c28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <USBD_StdEPReq+0x1f2>
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b80      	cmp	r3, #128	@ 0x80
 8008b02:	d004      	beq.n	8008b0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fbed 	bl	80092e6 <USBD_CtlError>
                break;
 8008b0c:	e091      	b.n	8008c32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da0b      	bge.n	8008b2e <USBD_StdEPReq+0x212>
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	3310      	adds	r3, #16
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	e00b      	b.n	8008b46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	3304      	adds	r3, #4
 8008b46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2202      	movs	r2, #2
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fc37 	bl	80093c8 <USBD_CtlSendData>
              break;
 8008b5a:	e06a      	b.n	8008c32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	da11      	bge.n	8008b88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	f003 020f 	and.w	r2, r3, #15
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	3324      	adds	r3, #36	@ 0x24
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d117      	bne.n	8008bae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fbb0 	bl	80092e6 <USBD_CtlError>
                  break;
 8008b86:	e054      	b.n	8008c32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	f003 020f 	and.w	r2, r3, #15
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fb9d 	bl	80092e6 <USBD_CtlError>
                  break;
 8008bac:	e041      	b.n	8008c32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da0b      	bge.n	8008bce <USBD_StdEPReq+0x2b2>
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	3304      	adds	r3, #4
 8008bcc:	e00b      	b.n	8008be6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	4413      	add	r3, r2
 8008be4:	3304      	adds	r3, #4
 8008be6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <USBD_StdEPReq+0x2d8>
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	2b80      	cmp	r3, #128	@ 0x80
 8008bf2:	d103      	bne.n	8008bfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e00e      	b.n	8008c1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 f867 	bl	8009cd4 <USBD_LL_IsStallEP>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fbd1 	bl	80093c8 <USBD_CtlSendData>
              break;
 8008c26:	e004      	b.n	8008c32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fb5b 	bl	80092e6 <USBD_CtlError>
              break;
 8008c30:	bf00      	nop
          }
          break;
 8008c32:	e004      	b.n	8008c3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fb55 	bl	80092e6 <USBD_CtlError>
          break;
 8008c3c:	bf00      	nop
      }
      break;
 8008c3e:	e005      	b.n	8008c4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fb4f 	bl	80092e6 <USBD_CtlError>
      break;
 8008c48:	e000      	b.n	8008c4c <USBD_StdEPReq+0x330>
      break;
 8008c4a:	bf00      	nop
  }

  return ret;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	f200 8128 	bhi.w	8008ece <USBD_GetDescriptor+0x276>
 8008c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c84 <USBD_GetDescriptor+0x2c>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008cf9 	.word	0x08008cf9
 8008c90:	08008ecf 	.word	0x08008ecf
 8008c94:	08008ecf 	.word	0x08008ecf
 8008c98:	08008e6f 	.word	0x08008e6f
 8008c9c:	08008e9b 	.word	0x08008e9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
      break;
 8008cb6:	e112      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7c1b      	ldrb	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10d      	bne.n	8008cdc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc8:	f107 0208 	add.w	r2, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cda:	e100      	b.n	8008ede <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce4:	f107 0208 	add.w	r2, r7, #8
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
 8008cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	701a      	strb	r2, [r3, #0]
      break;
 8008cf6:	e0f2      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	885b      	ldrh	r3, [r3, #2]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	f200 80ac 	bhi.w	8008e5c <USBD_GetDescriptor+0x204>
 8008d04:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <USBD_GetDescriptor+0xb4>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008d25 	.word	0x08008d25
 8008d10:	08008d59 	.word	0x08008d59
 8008d14:	08008d8d 	.word	0x08008d8d
 8008d18:	08008dc1 	.word	0x08008dc1
 8008d1c:	08008df5 	.word	0x08008df5
 8008d20:	08008e29 	.word	0x08008e29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	7c12      	ldrb	r2, [r2, #16]
 8008d3c:	f107 0108 	add.w	r1, r7, #8
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d46:	e091      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 facb 	bl	80092e6 <USBD_CtlError>
            err++;
 8008d50:	7afb      	ldrb	r3, [r7, #11]
 8008d52:	3301      	adds	r3, #1
 8008d54:	72fb      	strb	r3, [r7, #11]
          break;
 8008d56:	e089      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7a:	e077      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fab1 	bl	80092e6 <USBD_CtlError>
            err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8a:	e06f      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7c12      	ldrb	r2, [r2, #16]
 8008da4:	f107 0108 	add.w	r1, r7, #8
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
 8008dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dae:	e05d      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa97 	bl	80092e6 <USBD_CtlError>
            err++;
 8008db8:	7afb      	ldrb	r3, [r7, #11]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dbe:	e055      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de2:	e043      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa7d 	bl	80092e6 <USBD_CtlError>
            err++;
 8008dec:	7afb      	ldrb	r3, [r7, #11]
 8008dee:	3301      	adds	r3, #1
 8008df0:	72fb      	strb	r3, [r7, #11]
          break;
 8008df2:	e03b      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7c12      	ldrb	r2, [r2, #16]
 8008e0c:	f107 0108 	add.w	r1, r7, #8
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
 8008e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e16:	e029      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa63 	bl	80092e6 <USBD_CtlError>
            err++;
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	3301      	adds	r3, #1
 8008e24:	72fb      	strb	r3, [r7, #11]
          break;
 8008e26:	e021      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	7c12      	ldrb	r2, [r2, #16]
 8008e40:	f107 0108 	add.w	r1, r7, #8
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4a:	e00f      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa49 	bl	80092e6 <USBD_CtlError>
            err++;
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	3301      	adds	r3, #1
 8008e58:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5a:	e007      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa41 	bl	80092e6 <USBD_CtlError>
          err++;
 8008e64:	7afb      	ldrb	r3, [r7, #11]
 8008e66:	3301      	adds	r3, #1
 8008e68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e6a:	bf00      	nop
      }
      break;
 8008e6c:	e037      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	7c1b      	ldrb	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d109      	bne.n	8008e8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e7e:	f107 0208 	add.w	r2, r7, #8
 8008e82:	4610      	mov	r0, r2
 8008e84:	4798      	blx	r3
 8008e86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e88:	e029      	b.n	8008ede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fa2a 	bl	80092e6 <USBD_CtlError>
        err++;
 8008e92:	7afb      	ldrb	r3, [r7, #11]
 8008e94:	3301      	adds	r3, #1
 8008e96:	72fb      	strb	r3, [r7, #11]
      break;
 8008e98:	e021      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7c1b      	ldrb	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10d      	bne.n	8008ebe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eaa:	f107 0208 	add.w	r2, r7, #8
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4798      	blx	r3
 8008eb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	2207      	movs	r2, #7
 8008eba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ebc:	e00f      	b.n	8008ede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fa10 	bl	80092e6 <USBD_CtlError>
        err++;
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	72fb      	strb	r3, [r7, #11]
      break;
 8008ecc:	e007      	b.n	8008ede <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fa08 	bl	80092e6 <USBD_CtlError>
      err++;
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	72fb      	strb	r3, [r7, #11]
      break;
 8008edc:	bf00      	nop
  }

  if (err != 0U)
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d11e      	bne.n	8008f22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	88db      	ldrh	r3, [r3, #6]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d016      	beq.n	8008f1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008eec:	893b      	ldrh	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00e      	beq.n	8008f10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	88da      	ldrh	r2, [r3, #6]
 8008ef6:	893b      	ldrh	r3, [r7, #8]
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	bf28      	it	cs
 8008efc:	4613      	movcs	r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f02:	893b      	ldrh	r3, [r7, #8]
 8008f04:	461a      	mov	r2, r3
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa5d 	bl	80093c8 <USBD_CtlSendData>
 8008f0e:	e009      	b.n	8008f24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f9e7 	bl	80092e6 <USBD_CtlError>
 8008f18:	e004      	b.n	8008f24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 faae 	bl	800947c <USBD_CtlSendStatus>
 8008f20:	e000      	b.n	8008f24 <USBD_GetDescriptor+0x2cc>
    return;
 8008f22:	bf00      	nop
  }
}
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop

08008f2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	889b      	ldrh	r3, [r3, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d131      	bne.n	8008fa2 <USBD_SetAddress+0x76>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	88db      	ldrh	r3, [r3, #6]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d12d      	bne.n	8008fa2 <USBD_SetAddress+0x76>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f4c:	d829      	bhi.n	8008fa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	885b      	ldrh	r3, [r3, #2]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d104      	bne.n	8008f70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f9bc 	bl	80092e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6e:	e01d      	b.n	8008fac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7bfa      	ldrb	r2, [r7, #15]
 8008f74:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fed5 	bl	8009d2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa7a 	bl	800947c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d004      	beq.n	8008f98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f96:	e009      	b.n	8008fac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa0:	e004      	b.n	8008fac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f99e 	bl	80092e6 <USBD_CtlError>
  }
}
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	885b      	ldrh	r3, [r3, #2]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8009104 <USBD_SetConfig+0x150>)
 8008fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8009104 <USBD_SetConfig+0x150>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d905      	bls.n	8008fe0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f985 	bl	80092e6 <USBD_CtlError>
    return USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e08c      	b.n	80090fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d002      	beq.n	8008ff2 <USBD_SetConfig+0x3e>
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d029      	beq.n	8009044 <USBD_SetConfig+0x90>
 8008ff0:	e075      	b.n	80090de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ff2:	4b44      	ldr	r3, [pc, #272]	@ (8009104 <USBD_SetConfig+0x150>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d020      	beq.n	800903c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ffa:	4b42      	ldr	r3, [pc, #264]	@ (8009104 <USBD_SetConfig+0x150>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009004:	4b3f      	ldr	r3, [pc, #252]	@ (8009104 <USBD_SetConfig+0x150>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fe ffe3 	bl	8007fd6 <USBD_SetClassConfig>
 8009010:	4603      	mov	r3, r0
 8009012:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f962 	bl	80092e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2202      	movs	r2, #2
 8009026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800902a:	e065      	b.n	80090f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa25 	bl	800947c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2203      	movs	r2, #3
 8009036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800903a:	e05d      	b.n	80090f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fa1d 	bl	800947c <USBD_CtlSendStatus>
      break;
 8009042:	e059      	b.n	80090f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009044:	4b2f      	ldr	r3, [pc, #188]	@ (8009104 <USBD_SetConfig+0x150>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d112      	bne.n	8009072 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009054:	4b2b      	ldr	r3, [pc, #172]	@ (8009104 <USBD_SetConfig+0x150>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800905e:	4b29      	ldr	r3, [pc, #164]	@ (8009104 <USBD_SetConfig+0x150>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe ffd2 	bl	800800e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa06 	bl	800947c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009070:	e042      	b.n	80090f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009072:	4b24      	ldr	r3, [pc, #144]	@ (8009104 <USBD_SetConfig+0x150>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	d02a      	beq.n	80090d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fe ffc0 	bl	800800e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800908e:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <USBD_SetConfig+0x150>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009098:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <USBD_SetConfig+0x150>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7fe ff99 	bl	8007fd6 <USBD_SetClassConfig>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00f      	beq.n	80090ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f918 	bl	80092e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fe ffa5 	bl	800800e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80090cc:	e014      	b.n	80090f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9d4 	bl	800947c <USBD_CtlSendStatus>
      break;
 80090d4:	e010      	b.n	80090f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f9d0 	bl	800947c <USBD_CtlSendStatus>
      break;
 80090dc:	e00c      	b.n	80090f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f900 	bl	80092e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090e6:	4b07      	ldr	r3, [pc, #28]	@ (8009104 <USBD_SetConfig+0x150>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7fe ff8e 	bl	800800e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090f2:	2303      	movs	r3, #3
 80090f4:	73fb      	strb	r3, [r7, #15]
      break;
 80090f6:	bf00      	nop
  }

  return ret;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000418 	.word	0x20000418

08009108 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	88db      	ldrh	r3, [r3, #6]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d004      	beq.n	8009124 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f8e2 	bl	80092e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009122:	e023      	b.n	800916c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b02      	cmp	r3, #2
 800912e:	dc02      	bgt.n	8009136 <USBD_GetConfig+0x2e>
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc03      	bgt.n	800913c <USBD_GetConfig+0x34>
 8009134:	e015      	b.n	8009162 <USBD_GetConfig+0x5a>
 8009136:	2b03      	cmp	r3, #3
 8009138:	d00b      	beq.n	8009152 <USBD_GetConfig+0x4a>
 800913a:	e012      	b.n	8009162 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3308      	adds	r3, #8
 8009146:	2201      	movs	r2, #1
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f93c 	bl	80093c8 <USBD_CtlSendData>
        break;
 8009150:	e00c      	b.n	800916c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3304      	adds	r3, #4
 8009156:	2201      	movs	r2, #1
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f934 	bl	80093c8 <USBD_CtlSendData>
        break;
 8009160:	e004      	b.n	800916c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f8be 	bl	80092e6 <USBD_CtlError>
        break;
 800916a:	bf00      	nop
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009184:	b2db      	uxtb	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	2b02      	cmp	r3, #2
 800918a:	d81e      	bhi.n	80091ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d004      	beq.n	800919e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f8a5 	bl	80092e6 <USBD_CtlError>
        break;
 800919c:	e01a      	b.n	80091d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d005      	beq.n	80091ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f043 0202 	orr.w	r2, r3, #2
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	330c      	adds	r3, #12
 80091be:	2202      	movs	r2, #2
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f900 	bl	80093c8 <USBD_CtlSendData>
      break;
 80091c8:	e004      	b.n	80091d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f88a 	bl	80092e6 <USBD_CtlError>
      break;
 80091d2:	bf00      	nop
  }
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	885b      	ldrh	r3, [r3, #2]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d107      	bne.n	80091fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f940 	bl	800947c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091fc:	e013      	b.n	8009226 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d10b      	bne.n	800921e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	889b      	ldrh	r3, [r3, #4]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	b29b      	uxth	r3, r3
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f930 	bl	800947c <USBD_CtlSendStatus>
}
 800921c:	e003      	b.n	8009226 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f860 	bl	80092e6 <USBD_CtlError>
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800923e:	b2db      	uxtb	r3, r3
 8009240:	3b01      	subs	r3, #1
 8009242:	2b02      	cmp	r3, #2
 8009244:	d80b      	bhi.n	800925e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	885b      	ldrh	r3, [r3, #2]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d10c      	bne.n	8009268 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f910 	bl	800947c <USBD_CtlSendStatus>
      }
      break;
 800925c:	e004      	b.n	8009268 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f840 	bl	80092e6 <USBD_CtlError>
      break;
 8009266:	e000      	b.n	800926a <USBD_ClrFeature+0x3c>
      break;
 8009268:	bf00      	nop
  }
}
 800926a:	bf00      	nop
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	781a      	ldrb	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7ff fa40 	bl	8008722 <SWAPBYTE>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3301      	adds	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff fa33 	bl	8008722 <SWAPBYTE>
 80092bc:	4603      	mov	r3, r0
 80092be:	461a      	mov	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3301      	adds	r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fa26 	bl	8008722 <SWAPBYTE>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461a      	mov	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	80da      	strh	r2, [r3, #6]
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092f0:	2180      	movs	r1, #128	@ 0x80
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fcb0 	bl	8009c58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092f8:	2100      	movs	r1, #0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fcac 	bl	8009c58 <USBD_LL_StallEP>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d036      	beq.n	800938c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009322:	6938      	ldr	r0, [r7, #16]
 8009324:	f000 f836 	bl	8009394 <USBD_GetLen>
 8009328:	4603      	mov	r3, r0
 800932a:	3301      	adds	r3, #1
 800932c:	b29b      	uxth	r3, r3
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	4413      	add	r3, r2
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	701a      	strb	r2, [r3, #0]
  idx++;
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	3301      	adds	r3, #1
 8009346:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	2203      	movs	r2, #3
 8009350:	701a      	strb	r2, [r3, #0]
  idx++;
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	3301      	adds	r3, #1
 8009356:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009358:	e013      	b.n	8009382 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	4413      	add	r3, r2
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	3301      	adds	r3, #1
 800936a:	613b      	str	r3, [r7, #16]
    idx++;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	3301      	adds	r3, #1
 8009370:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	4413      	add	r3, r2
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
    idx++;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	3301      	adds	r3, #1
 8009380:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e7      	bne.n	800935a <USBD_GetString+0x52>
 800938a:	e000      	b.n	800938e <USBD_GetString+0x86>
    return;
 800938c:	bf00      	nop
  }
}
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093a4:	e005      	b.n	80093b2 <USBD_GetLen+0x1e>
  {
    len++;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	3301      	adds	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1f5      	bne.n	80093a6 <USBD_GetLen+0x12>
  }

  return len;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	2100      	movs	r1, #0
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fcbb 	bl	8009d6a <USBD_LL_Transmit>

  return USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	2100      	movs	r1, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fcaa 	bl	8009d6a <USBD_LL_Transmit>

  return USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2203      	movs	r2, #3
 8009430:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	2100      	movs	r1, #0
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 fcae 	bl	8009dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	2100      	movs	r1, #0
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fc9d 	bl	8009dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2204      	movs	r2, #4
 8009488:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800948c:	2300      	movs	r3, #0
 800948e:	2200      	movs	r2, #0
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fc69 	bl	8009d6a <USBD_LL_Transmit>

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2205      	movs	r2, #5
 80094ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094b2:	2300      	movs	r3, #0
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fc77 	bl	8009dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094cc:	2200      	movs	r2, #0
 80094ce:	4912      	ldr	r1, [pc, #72]	@ (8009518 <MX_USB_DEVICE_Init+0x50>)
 80094d0:	4812      	ldr	r0, [pc, #72]	@ (800951c <MX_USB_DEVICE_Init+0x54>)
 80094d2:	f7fe fd03 	bl	8007edc <USBD_Init>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094dc:	f7f8 fa1a 	bl	8001914 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094e0:	490f      	ldr	r1, [pc, #60]	@ (8009520 <MX_USB_DEVICE_Init+0x58>)
 80094e2:	480e      	ldr	r0, [pc, #56]	@ (800951c <MX_USB_DEVICE_Init+0x54>)
 80094e4:	f7fe fd2a 	bl	8007f3c <USBD_RegisterClass>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094ee:	f7f8 fa11 	bl	8001914 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094f2:	490c      	ldr	r1, [pc, #48]	@ (8009524 <MX_USB_DEVICE_Init+0x5c>)
 80094f4:	4809      	ldr	r0, [pc, #36]	@ (800951c <MX_USB_DEVICE_Init+0x54>)
 80094f6:	f7fe fc61 	bl	8007dbc <USBD_CDC_RegisterInterface>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009500:	f7f8 fa08 	bl	8001914 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009504:	4805      	ldr	r0, [pc, #20]	@ (800951c <MX_USB_DEVICE_Init+0x54>)
 8009506:	f7fe fd4f 	bl	8007fa8 <USBD_Start>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009510:	f7f8 fa00 	bl	8001914 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009514:	bf00      	nop
 8009516:	bd80      	pop	{r7, pc}
 8009518:	200000cc 	.word	0x200000cc
 800951c:	2000041c 	.word	0x2000041c
 8009520:	20000038 	.word	0x20000038
 8009524:	200000b8 	.word	0x200000b8

08009528 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800952c:	2200      	movs	r2, #0
 800952e:	4905      	ldr	r1, [pc, #20]	@ (8009544 <CDC_Init_FS+0x1c>)
 8009530:	4805      	ldr	r0, [pc, #20]	@ (8009548 <CDC_Init_FS+0x20>)
 8009532:	f7fe fc5d 	bl	8007df0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009536:	4905      	ldr	r1, [pc, #20]	@ (800954c <CDC_Init_FS+0x24>)
 8009538:	4803      	ldr	r0, [pc, #12]	@ (8009548 <CDC_Init_FS+0x20>)
 800953a:	f7fe fc7b 	bl	8007e34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800953e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009540:	4618      	mov	r0, r3
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20000af8 	.word	0x20000af8
 8009548:	2000041c 	.word	0x2000041c
 800954c:	200006f8 	.word	0x200006f8

08009550 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009554:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009556:	4618      	mov	r0, r3
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
 800956c:	4613      	mov	r3, r2
 800956e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	2b23      	cmp	r3, #35	@ 0x23
 8009574:	d84a      	bhi.n	800960c <CDC_Control_FS+0xac>
 8009576:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <CDC_Control_FS+0x1c>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	0800960d 	.word	0x0800960d
 8009580:	0800960d 	.word	0x0800960d
 8009584:	0800960d 	.word	0x0800960d
 8009588:	0800960d 	.word	0x0800960d
 800958c:	0800960d 	.word	0x0800960d
 8009590:	0800960d 	.word	0x0800960d
 8009594:	0800960d 	.word	0x0800960d
 8009598:	0800960d 	.word	0x0800960d
 800959c:	0800960d 	.word	0x0800960d
 80095a0:	0800960d 	.word	0x0800960d
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	0800960d 	.word	0x0800960d
 80095ac:	0800960d 	.word	0x0800960d
 80095b0:	0800960d 	.word	0x0800960d
 80095b4:	0800960d 	.word	0x0800960d
 80095b8:	0800960d 	.word	0x0800960d
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	0800960d 	.word	0x0800960d
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	0800960d 	.word	0x0800960d
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	0800960d 	.word	0x0800960d
 80095d4:	0800960d 	.word	0x0800960d
 80095d8:	0800960d 	.word	0x0800960d
 80095dc:	0800960d 	.word	0x0800960d
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	0800960d 	.word	0x0800960d
 80095e8:	0800960d 	.word	0x0800960d
 80095ec:	0800960d 	.word	0x0800960d
 80095f0:	0800960d 	.word	0x0800960d
 80095f4:	0800960d 	.word	0x0800960d
 80095f8:	0800960d 	.word	0x0800960d
 80095fc:	0800960d 	.word	0x0800960d
 8009600:	0800960d 	.word	0x0800960d
 8009604:	0800960d 	.word	0x0800960d
 8009608:	0800960d 	.word	0x0800960d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800960c:	bf00      	nop
  }

  return (USBD_OK);
 800960e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	4805      	ldr	r0, [pc, #20]	@ (8009640 <CDC_Receive_FS+0x24>)
 800962a:	f7fe fc03 	bl	8007e34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800962e:	4804      	ldr	r0, [pc, #16]	@ (8009640 <CDC_Receive_FS+0x24>)
 8009630:	f7fe fc1e 	bl	8007e70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009634:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	2000041c 	.word	0x2000041c

08009644 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800965a:	4618      	mov	r0, r3
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
	...

08009668 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	6039      	str	r1, [r7, #0]
 8009672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2212      	movs	r2, #18
 8009678:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800967a:	4b03      	ldr	r3, [pc, #12]	@ (8009688 <USBD_FS_DeviceDescriptor+0x20>)
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	200000e8 	.word	0x200000e8

0800968c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	6039      	str	r1, [r7, #0]
 8009696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2204      	movs	r2, #4
 800969c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800969e:	4b03      	ldr	r3, [pc, #12]	@ (80096ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	200000fc 	.word	0x200000fc

080096b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	4907      	ldr	r1, [pc, #28]	@ (80096e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80096c6:	4808      	ldr	r0, [pc, #32]	@ (80096e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80096c8:	f7ff fe1e 	bl	8009308 <USBD_GetString>
 80096cc:	e004      	b.n	80096d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	4904      	ldr	r1, [pc, #16]	@ (80096e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80096d2:	4805      	ldr	r0, [pc, #20]	@ (80096e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80096d4:	f7ff fe18 	bl	8009308 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d8:	4b02      	ldr	r3, [pc, #8]	@ (80096e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20000ef8 	.word	0x20000ef8
 80096e8:	0800e680 	.word	0x0800e680

080096ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	6039      	str	r1, [r7, #0]
 80096f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	4904      	ldr	r1, [pc, #16]	@ (800970c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80096fc:	4804      	ldr	r0, [pc, #16]	@ (8009710 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80096fe:	f7ff fe03 	bl	8009308 <USBD_GetString>
  return USBD_StrDesc;
 8009702:	4b02      	ldr	r3, [pc, #8]	@ (800970c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20000ef8 	.word	0x20000ef8
 8009710:	0800e698 	.word	0x0800e698

08009714 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	221a      	movs	r2, #26
 8009724:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009726:	f000 f843 	bl	80097b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800972a:	4b02      	ldr	r3, [pc, #8]	@ (8009734 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20000100 	.word	0x20000100

08009738 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d105      	bne.n	8009756 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	4907      	ldr	r1, [pc, #28]	@ (800976c <USBD_FS_ConfigStrDescriptor+0x34>)
 800974e:	4808      	ldr	r0, [pc, #32]	@ (8009770 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009750:	f7ff fdda 	bl	8009308 <USBD_GetString>
 8009754:	e004      	b.n	8009760 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	4904      	ldr	r1, [pc, #16]	@ (800976c <USBD_FS_ConfigStrDescriptor+0x34>)
 800975a:	4805      	ldr	r0, [pc, #20]	@ (8009770 <USBD_FS_ConfigStrDescriptor+0x38>)
 800975c:	f7ff fdd4 	bl	8009308 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009760:	4b02      	ldr	r3, [pc, #8]	@ (800976c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000ef8 	.word	0x20000ef8
 8009770:	0800e6ac 	.word	0x0800e6ac

08009774 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	6039      	str	r1, [r7, #0]
 800977e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009780:	79fb      	ldrb	r3, [r7, #7]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d105      	bne.n	8009792 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	4907      	ldr	r1, [pc, #28]	@ (80097a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800978a:	4808      	ldr	r0, [pc, #32]	@ (80097ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800978c:	f7ff fdbc 	bl	8009308 <USBD_GetString>
 8009790:	e004      	b.n	800979c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4904      	ldr	r1, [pc, #16]	@ (80097a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009796:	4805      	ldr	r0, [pc, #20]	@ (80097ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009798:	f7ff fdb6 	bl	8009308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800979c:	4b02      	ldr	r3, [pc, #8]	@ (80097a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20000ef8 	.word	0x20000ef8
 80097ac:	0800e6b8 	.word	0x0800e6b8

080097b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097b6:	4b0f      	ldr	r3, [pc, #60]	@ (80097f4 <Get_SerialNum+0x44>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097bc:	4b0e      	ldr	r3, [pc, #56]	@ (80097f8 <Get_SerialNum+0x48>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097c2:	4b0e      	ldr	r3, [pc, #56]	@ (80097fc <Get_SerialNum+0x4c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097d6:	2208      	movs	r2, #8
 80097d8:	4909      	ldr	r1, [pc, #36]	@ (8009800 <Get_SerialNum+0x50>)
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 f814 	bl	8009808 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097e0:	2204      	movs	r2, #4
 80097e2:	4908      	ldr	r1, [pc, #32]	@ (8009804 <Get_SerialNum+0x54>)
 80097e4:	68b8      	ldr	r0, [r7, #8]
 80097e6:	f000 f80f 	bl	8009808 <IntToUnicode>
  }
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	1fff7a10 	.word	0x1fff7a10
 80097f8:	1fff7a14 	.word	0x1fff7a14
 80097fc:	1fff7a18 	.word	0x1fff7a18
 8009800:	20000102 	.word	0x20000102
 8009804:	20000112 	.word	0x20000112

08009808 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	4613      	mov	r3, r2
 8009814:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]
 800981e:	e027      	b.n	8009870 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	0f1b      	lsrs	r3, r3, #28
 8009824:	2b09      	cmp	r3, #9
 8009826:	d80b      	bhi.n	8009840 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	0f1b      	lsrs	r3, r3, #28
 800982c:	b2da      	uxtb	r2, r3
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	4619      	mov	r1, r3
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	440b      	add	r3, r1
 8009838:	3230      	adds	r2, #48	@ 0x30
 800983a:	b2d2      	uxtb	r2, r2
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e00a      	b.n	8009856 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	0f1b      	lsrs	r3, r3, #28
 8009844:	b2da      	uxtb	r2, r3
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	4619      	mov	r1, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	440b      	add	r3, r1
 8009850:	3237      	adds	r2, #55	@ 0x37
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	011b      	lsls	r3, r3, #4
 800985a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	3301      	adds	r3, #1
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	4413      	add	r3, r2
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	3301      	adds	r3, #1
 800986e:	75fb      	strb	r3, [r7, #23]
 8009870:	7dfa      	ldrb	r2, [r7, #23]
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	429a      	cmp	r2, r3
 8009876:	d3d3      	bcc.n	8009820 <IntToUnicode+0x18>
  }
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
	...

08009888 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	@ 0x28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009890:	f107 0314 	add.w	r3, r7, #20
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	605a      	str	r2, [r3, #4]
 800989a:	609a      	str	r2, [r3, #8]
 800989c:	60da      	str	r2, [r3, #12]
 800989e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098a8:	d13a      	bne.n	8009920 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098aa:	2300      	movs	r3, #0
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 80098b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 80098b4:	f043 0301 	orr.w	r3, r3, #1
 80098b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80098ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 80098bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80098ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098cc:	2302      	movs	r3, #2
 80098ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098d4:	2303      	movs	r3, #3
 80098d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098d8:	230a      	movs	r3, #10
 80098da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098dc:	f107 0314 	add.w	r3, r7, #20
 80098e0:	4619      	mov	r1, r3
 80098e2:	4812      	ldr	r0, [pc, #72]	@ (800992c <HAL_PCD_MspInit+0xa4>)
 80098e4:	f7f8 fcac 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 80098ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ec:	4a0e      	ldr	r2, [pc, #56]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 80098ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 80098fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 80098fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009902:	6453      	str	r3, [r2, #68]	@ 0x44
 8009904:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <HAL_PCD_MspInit+0xa0>)
 8009906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009910:	2200      	movs	r2, #0
 8009912:	2100      	movs	r1, #0
 8009914:	2043      	movs	r0, #67	@ 0x43
 8009916:	f7f8 fbca 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800991a:	2043      	movs	r0, #67	@ 0x43
 800991c:	f7f8 fbe3 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009920:	bf00      	nop
 8009922:	3728      	adds	r7, #40	@ 0x28
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	40023800 	.word	0x40023800
 800992c:	40020000 	.word	0x40020000

08009930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009944:	4619      	mov	r1, r3
 8009946:	4610      	mov	r0, r2
 8009948:	f7fe fb7b 	bl	8008042 <USBD_LL_SetupStage>
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009966:	78fa      	ldrb	r2, [r7, #3]
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	440b      	add	r3, r1
 8009974:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	78fb      	ldrb	r3, [r7, #3]
 800997c:	4619      	mov	r1, r3
 800997e:	f7fe fbb5 	bl	80080ec <USBD_LL_DataOutStage>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800999c:	78fa      	ldrb	r2, [r7, #3]
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	4613      	mov	r3, r2
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	4413      	add	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	440b      	add	r3, r1
 80099aa:	3320      	adds	r3, #32
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	78fb      	ldrb	r3, [r7, #3]
 80099b0:	4619      	mov	r1, r3
 80099b2:	f7fe fc4e 	bl	8008252 <USBD_LL_DataInStage>
}
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fe fd88 	bl	80084e2 <USBD_LL_SOF>
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099e2:	2301      	movs	r3, #1
 80099e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	79db      	ldrb	r3, [r3, #7]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d001      	beq.n	80099f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80099ee:	f7f7 ff91 	bl	8001914 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099f8:	7bfa      	ldrb	r2, [r7, #15]
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fd2c 	bl	800845a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fcd4 	bl	80083b6 <USBD_LL_Reset>
}
 8009a0e:	bf00      	nop
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe fd27 	bl	800847a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	6812      	ldr	r2, [r2, #0]
 8009a3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a3e:	f043 0301 	orr.w	r3, r3, #1
 8009a42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7adb      	ldrb	r3, [r3, #11]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a4c:	4b04      	ldr	r3, [pc, #16]	@ (8009a60 <HAL_PCD_SuspendCallback+0x48>)
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	4a03      	ldr	r2, [pc, #12]	@ (8009a60 <HAL_PCD_SuspendCallback+0x48>)
 8009a52:	f043 0306 	orr.w	r3, r3, #6
 8009a56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe fd1d 	bl	80084b2 <USBD_LL_Resume>
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	4611      	mov	r1, r2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fd75 	bl	8008586 <USBD_LL_IsoOUTIncomplete>
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fd31 	bl	8008522 <USBD_LL_IsoINIncomplete>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fd87 	bl	80085ea <USBD_LL_DevConnected>
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fe fd84 	bl	8008600 <USBD_LL_DevDisconnected>
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d13c      	bne.n	8009b8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b10:	4a20      	ldr	r2, [pc, #128]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b20:	4b1c      	ldr	r3, [pc, #112]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009b26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b28:	4b1a      	ldr	r3, [pc, #104]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b2e:	4b19      	ldr	r3, [pc, #100]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b30:	2202      	movs	r2, #2
 8009b32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b34:	4b17      	ldr	r3, [pc, #92]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b3a:	4b16      	ldr	r3, [pc, #88]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b40:	4b14      	ldr	r3, [pc, #80]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b46:	4b13      	ldr	r3, [pc, #76]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b4c:	4b11      	ldr	r3, [pc, #68]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b52:	4b10      	ldr	r3, [pc, #64]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b58:	4b0e      	ldr	r3, [pc, #56]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b5e:	480d      	ldr	r0, [pc, #52]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b60:	f7f8 fd0b 	bl	800257a <HAL_PCD_Init>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b6a:	f7f7 fed3 	bl	8001914 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b6e:	2180      	movs	r1, #128	@ 0x80
 8009b70:	4808      	ldr	r0, [pc, #32]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b72:	f7f9 ff36 	bl	80039e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b76:	2240      	movs	r2, #64	@ 0x40
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4806      	ldr	r0, [pc, #24]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b7c:	f7f9 feea 	bl	8003954 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b80:	2280      	movs	r2, #128	@ 0x80
 8009b82:	2101      	movs	r1, #1
 8009b84:	4803      	ldr	r0, [pc, #12]	@ (8009b94 <USBD_LL_Init+0x94>)
 8009b86:	f7f9 fee5 	bl	8003954 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200010f8 	.word	0x200010f8

08009b98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f8 fdf2 	bl	8002798 <HAL_PCD_Start>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 f942 	bl	8009e44 <USBD_Get_USB_Status>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	4608      	mov	r0, r1
 8009bd8:	4611      	mov	r1, r2
 8009bda:	461a      	mov	r2, r3
 8009bdc:	4603      	mov	r3, r0
 8009bde:	70fb      	strb	r3, [r7, #3]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70bb      	strb	r3, [r7, #2]
 8009be4:	4613      	mov	r3, r2
 8009be6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bf6:	78bb      	ldrb	r3, [r7, #2]
 8009bf8:	883a      	ldrh	r2, [r7, #0]
 8009bfa:	78f9      	ldrb	r1, [r7, #3]
 8009bfc:	f7f9 fac6 	bl	800318c <HAL_PCD_EP_Open>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f91c 	bl	8009e44 <USBD_Get_USB_Status>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	460b      	mov	r3, r1
 8009c24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c34:	78fa      	ldrb	r2, [r7, #3]
 8009c36:	4611      	mov	r1, r2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f9 fb0f 	bl	800325c <HAL_PCD_EP_Close>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 f8fd 	bl	8009e44 <USBD_Get_USB_Status>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7f9 fbc7 	bl	800340a <HAL_PCD_EP_SetStall>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 f8de 	bl	8009e44 <USBD_Get_USB_Status>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cb0:	78fa      	ldrb	r2, [r7, #3]
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7f9 fc0b 	bl	80034d0 <HAL_PCD_EP_ClrStall>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f8bf 	bl	8009e44 <USBD_Get_USB_Status>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ce6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da0b      	bge.n	8009d08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cf6:	68f9      	ldr	r1, [r7, #12]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	440b      	add	r3, r1
 8009d02:	3316      	adds	r3, #22
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	e00b      	b.n	8009d20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	4613      	mov	r3, r2
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	440b      	add	r3, r1
 8009d1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009d1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7f9 f9fa 	bl	8003144 <HAL_PCD_SetAddress>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f874 	bl	8009e44 <USBD_Get_USB_Status>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b086      	sub	sp, #24
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
 8009d76:	460b      	mov	r3, r1
 8009d78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d88:	7af9      	ldrb	r1, [r7, #11]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f7f9 fb02 	bl	8003396 <HAL_PCD_EP_Transmit>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f853 	bl	8009e44 <USBD_Get_USB_Status>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009da2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	460b      	mov	r3, r1
 8009dba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009dca:	7af9      	ldrb	r1, [r7, #11]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	f7f9 fa8e 	bl	80032f0 <HAL_PCD_EP_Receive>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f832 	bl	8009e44 <USBD_Get_USB_Status>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009de4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e00:	78fa      	ldrb	r2, [r7, #3]
 8009e02:	4611      	mov	r1, r2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7f9 faae 	bl	8003366 <HAL_PCD_EP_GetRxCount>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e1c:	4b03      	ldr	r3, [pc, #12]	@ (8009e2c <USBD_static_malloc+0x18>)
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	200015dc 	.word	0x200015dc

08009e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]

}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d817      	bhi.n	8009e88 <USBD_Get_USB_Status+0x44>
 8009e58:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <USBD_Get_USB_Status+0x1c>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e77 	.word	0x08009e77
 8009e68:	08009e7d 	.word	0x08009e7d
 8009e6c:	08009e83 	.word	0x08009e83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
    break;
 8009e74:	e00b      	b.n	8009e8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e76:	2303      	movs	r3, #3
 8009e78:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7a:	e008      	b.n	8009e8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e80:	e005      	b.n	8009e8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e82:	2303      	movs	r3, #3
 8009e84:	73fb      	strb	r3, [r7, #15]
    break;
 8009e86:	e002      	b.n	8009e8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8c:	bf00      	nop
  }
  return usb_status;
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <__cvt>:
 8009e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea0:	ec57 6b10 	vmov	r6, r7, d0
 8009ea4:	2f00      	cmp	r7, #0
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	463b      	mov	r3, r7
 8009eac:	bfbb      	ittet	lt
 8009eae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009eb2:	461f      	movlt	r7, r3
 8009eb4:	2300      	movge	r3, #0
 8009eb6:	232d      	movlt	r3, #45	@ 0x2d
 8009eb8:	700b      	strb	r3, [r1, #0]
 8009eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ebc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ec0:	4691      	mov	r9, r2
 8009ec2:	f023 0820 	bic.w	r8, r3, #32
 8009ec6:	bfbc      	itt	lt
 8009ec8:	4632      	movlt	r2, r6
 8009eca:	4616      	movlt	r6, r2
 8009ecc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ed0:	d005      	beq.n	8009ede <__cvt+0x42>
 8009ed2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ed6:	d100      	bne.n	8009eda <__cvt+0x3e>
 8009ed8:	3401      	adds	r4, #1
 8009eda:	2102      	movs	r1, #2
 8009edc:	e000      	b.n	8009ee0 <__cvt+0x44>
 8009ede:	2103      	movs	r1, #3
 8009ee0:	ab03      	add	r3, sp, #12
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	ab02      	add	r3, sp, #8
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	ec47 6b10 	vmov	d0, r6, r7
 8009eec:	4653      	mov	r3, sl
 8009eee:	4622      	mov	r2, r4
 8009ef0:	f001 f876 	bl	800afe0 <_dtoa_r>
 8009ef4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ef8:	4605      	mov	r5, r0
 8009efa:	d119      	bne.n	8009f30 <__cvt+0x94>
 8009efc:	f019 0f01 	tst.w	r9, #1
 8009f00:	d00e      	beq.n	8009f20 <__cvt+0x84>
 8009f02:	eb00 0904 	add.w	r9, r0, r4
 8009f06:	2200      	movs	r2, #0
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	4639      	mov	r1, r7
 8009f0e:	f7f6 fde3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f12:	b108      	cbz	r0, 8009f18 <__cvt+0x7c>
 8009f14:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f18:	2230      	movs	r2, #48	@ 0x30
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	454b      	cmp	r3, r9
 8009f1e:	d31e      	bcc.n	8009f5e <__cvt+0xc2>
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f24:	1b5b      	subs	r3, r3, r5
 8009f26:	4628      	mov	r0, r5
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	b004      	add	sp, #16
 8009f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f34:	eb00 0904 	add.w	r9, r0, r4
 8009f38:	d1e5      	bne.n	8009f06 <__cvt+0x6a>
 8009f3a:	7803      	ldrb	r3, [r0, #0]
 8009f3c:	2b30      	cmp	r3, #48	@ 0x30
 8009f3e:	d10a      	bne.n	8009f56 <__cvt+0xba>
 8009f40:	2200      	movs	r2, #0
 8009f42:	2300      	movs	r3, #0
 8009f44:	4630      	mov	r0, r6
 8009f46:	4639      	mov	r1, r7
 8009f48:	f7f6 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f4c:	b918      	cbnz	r0, 8009f56 <__cvt+0xba>
 8009f4e:	f1c4 0401 	rsb	r4, r4, #1
 8009f52:	f8ca 4000 	str.w	r4, [sl]
 8009f56:	f8da 3000 	ldr.w	r3, [sl]
 8009f5a:	4499      	add	r9, r3
 8009f5c:	e7d3      	b.n	8009f06 <__cvt+0x6a>
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	9103      	str	r1, [sp, #12]
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e7d9      	b.n	8009f1a <__cvt+0x7e>

08009f66 <__exponent>:
 8009f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	bfba      	itte	lt
 8009f6c:	4249      	neglt	r1, r1
 8009f6e:	232d      	movlt	r3, #45	@ 0x2d
 8009f70:	232b      	movge	r3, #43	@ 0x2b
 8009f72:	2909      	cmp	r1, #9
 8009f74:	7002      	strb	r2, [r0, #0]
 8009f76:	7043      	strb	r3, [r0, #1]
 8009f78:	dd29      	ble.n	8009fce <__exponent+0x68>
 8009f7a:	f10d 0307 	add.w	r3, sp, #7
 8009f7e:	461d      	mov	r5, r3
 8009f80:	270a      	movs	r7, #10
 8009f82:	461a      	mov	r2, r3
 8009f84:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f88:	fb07 1416 	mls	r4, r7, r6, r1
 8009f8c:	3430      	adds	r4, #48	@ 0x30
 8009f8e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f92:	460c      	mov	r4, r1
 8009f94:	2c63      	cmp	r4, #99	@ 0x63
 8009f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	dcf1      	bgt.n	8009f82 <__exponent+0x1c>
 8009f9e:	3130      	adds	r1, #48	@ 0x30
 8009fa0:	1e94      	subs	r4, r2, #2
 8009fa2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fa6:	1c41      	adds	r1, r0, #1
 8009fa8:	4623      	mov	r3, r4
 8009faa:	42ab      	cmp	r3, r5
 8009fac:	d30a      	bcc.n	8009fc4 <__exponent+0x5e>
 8009fae:	f10d 0309 	add.w	r3, sp, #9
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	42ac      	cmp	r4, r5
 8009fb6:	bf88      	it	hi
 8009fb8:	2300      	movhi	r3, #0
 8009fba:	3302      	adds	r3, #2
 8009fbc:	4403      	add	r3, r0
 8009fbe:	1a18      	subs	r0, r3, r0
 8009fc0:	b003      	add	sp, #12
 8009fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fc8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fcc:	e7ed      	b.n	8009faa <__exponent+0x44>
 8009fce:	2330      	movs	r3, #48	@ 0x30
 8009fd0:	3130      	adds	r1, #48	@ 0x30
 8009fd2:	7083      	strb	r3, [r0, #2]
 8009fd4:	70c1      	strb	r1, [r0, #3]
 8009fd6:	1d03      	adds	r3, r0, #4
 8009fd8:	e7f1      	b.n	8009fbe <__exponent+0x58>
	...

08009fdc <_printf_float>:
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	b08d      	sub	sp, #52	@ 0x34
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fe8:	4616      	mov	r6, r2
 8009fea:	461f      	mov	r7, r3
 8009fec:	4605      	mov	r5, r0
 8009fee:	f000 feef 	bl	800add0 <_localeconv_r>
 8009ff2:	6803      	ldr	r3, [r0, #0]
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7f6 f942 	bl	8000280 <strlen>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a000:	f8d8 3000 	ldr.w	r3, [r8]
 800a004:	9005      	str	r0, [sp, #20]
 800a006:	3307      	adds	r3, #7
 800a008:	f023 0307 	bic.w	r3, r3, #7
 800a00c:	f103 0208 	add.w	r2, r3, #8
 800a010:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a014:	f8d4 b000 	ldr.w	fp, [r4]
 800a018:	f8c8 2000 	str.w	r2, [r8]
 800a01c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a020:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a024:	9307      	str	r3, [sp, #28]
 800a026:	f8cd 8018 	str.w	r8, [sp, #24]
 800a02a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a02e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a032:	4b9c      	ldr	r3, [pc, #624]	@ (800a2a4 <_printf_float+0x2c8>)
 800a034:	f04f 32ff 	mov.w	r2, #4294967295
 800a038:	f7f6 fd80 	bl	8000b3c <__aeabi_dcmpun>
 800a03c:	bb70      	cbnz	r0, 800a09c <_printf_float+0xc0>
 800a03e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a042:	4b98      	ldr	r3, [pc, #608]	@ (800a2a4 <_printf_float+0x2c8>)
 800a044:	f04f 32ff 	mov.w	r2, #4294967295
 800a048:	f7f6 fd5a 	bl	8000b00 <__aeabi_dcmple>
 800a04c:	bb30      	cbnz	r0, 800a09c <_printf_float+0xc0>
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 fd49 	bl	8000aec <__aeabi_dcmplt>
 800a05a:	b110      	cbz	r0, 800a062 <_printf_float+0x86>
 800a05c:	232d      	movs	r3, #45	@ 0x2d
 800a05e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a062:	4a91      	ldr	r2, [pc, #580]	@ (800a2a8 <_printf_float+0x2cc>)
 800a064:	4b91      	ldr	r3, [pc, #580]	@ (800a2ac <_printf_float+0x2d0>)
 800a066:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a06a:	bf94      	ite	ls
 800a06c:	4690      	movls	r8, r2
 800a06e:	4698      	movhi	r8, r3
 800a070:	2303      	movs	r3, #3
 800a072:	6123      	str	r3, [r4, #16]
 800a074:	f02b 0304 	bic.w	r3, fp, #4
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	f04f 0900 	mov.w	r9, #0
 800a07e:	9700      	str	r7, [sp, #0]
 800a080:	4633      	mov	r3, r6
 800a082:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a084:	4621      	mov	r1, r4
 800a086:	4628      	mov	r0, r5
 800a088:	f000 f9d2 	bl	800a430 <_printf_common>
 800a08c:	3001      	adds	r0, #1
 800a08e:	f040 808d 	bne.w	800a1ac <_printf_float+0x1d0>
 800a092:	f04f 30ff 	mov.w	r0, #4294967295
 800a096:	b00d      	add	sp, #52	@ 0x34
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	4642      	mov	r2, r8
 800a09e:	464b      	mov	r3, r9
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	f7f6 fd4a 	bl	8000b3c <__aeabi_dcmpun>
 800a0a8:	b140      	cbz	r0, 800a0bc <_printf_float+0xe0>
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bfbc      	itt	lt
 800a0b0:	232d      	movlt	r3, #45	@ 0x2d
 800a0b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a0b6:	4a7e      	ldr	r2, [pc, #504]	@ (800a2b0 <_printf_float+0x2d4>)
 800a0b8:	4b7e      	ldr	r3, [pc, #504]	@ (800a2b4 <_printf_float+0x2d8>)
 800a0ba:	e7d4      	b.n	800a066 <_printf_float+0x8a>
 800a0bc:	6863      	ldr	r3, [r4, #4]
 800a0be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a0c2:	9206      	str	r2, [sp, #24]
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	d13b      	bne.n	800a140 <_printf_float+0x164>
 800a0c8:	2306      	movs	r3, #6
 800a0ca:	6063      	str	r3, [r4, #4]
 800a0cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0dc:	ab09      	add	r3, sp, #36	@ 0x24
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	6861      	ldr	r1, [r4, #4]
 800a0e2:	ec49 8b10 	vmov	d0, r8, r9
 800a0e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f7ff fed6 	bl	8009e9c <__cvt>
 800a0f0:	9b06      	ldr	r3, [sp, #24]
 800a0f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0f4:	2b47      	cmp	r3, #71	@ 0x47
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	d129      	bne.n	800a14e <_printf_float+0x172>
 800a0fa:	1cc8      	adds	r0, r1, #3
 800a0fc:	db02      	blt.n	800a104 <_printf_float+0x128>
 800a0fe:	6863      	ldr	r3, [r4, #4]
 800a100:	4299      	cmp	r1, r3
 800a102:	dd41      	ble.n	800a188 <_printf_float+0x1ac>
 800a104:	f1aa 0a02 	sub.w	sl, sl, #2
 800a108:	fa5f fa8a 	uxtb.w	sl, sl
 800a10c:	3901      	subs	r1, #1
 800a10e:	4652      	mov	r2, sl
 800a110:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a114:	9109      	str	r1, [sp, #36]	@ 0x24
 800a116:	f7ff ff26 	bl	8009f66 <__exponent>
 800a11a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a11c:	1813      	adds	r3, r2, r0
 800a11e:	2a01      	cmp	r2, #1
 800a120:	4681      	mov	r9, r0
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	dc02      	bgt.n	800a12c <_printf_float+0x150>
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	07d2      	lsls	r2, r2, #31
 800a12a:	d501      	bpl.n	800a130 <_printf_float+0x154>
 800a12c:	3301      	adds	r3, #1
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0a2      	beq.n	800a07e <_printf_float+0xa2>
 800a138:	232d      	movs	r3, #45	@ 0x2d
 800a13a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a13e:	e79e      	b.n	800a07e <_printf_float+0xa2>
 800a140:	9a06      	ldr	r2, [sp, #24]
 800a142:	2a47      	cmp	r2, #71	@ 0x47
 800a144:	d1c2      	bne.n	800a0cc <_printf_float+0xf0>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1c0      	bne.n	800a0cc <_printf_float+0xf0>
 800a14a:	2301      	movs	r3, #1
 800a14c:	e7bd      	b.n	800a0ca <_printf_float+0xee>
 800a14e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a152:	d9db      	bls.n	800a10c <_printf_float+0x130>
 800a154:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a158:	d118      	bne.n	800a18c <_printf_float+0x1b0>
 800a15a:	2900      	cmp	r1, #0
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	dd0b      	ble.n	800a178 <_printf_float+0x19c>
 800a160:	6121      	str	r1, [r4, #16]
 800a162:	b913      	cbnz	r3, 800a16a <_printf_float+0x18e>
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	07d0      	lsls	r0, r2, #31
 800a168:	d502      	bpl.n	800a170 <_printf_float+0x194>
 800a16a:	3301      	adds	r3, #1
 800a16c:	440b      	add	r3, r1
 800a16e:	6123      	str	r3, [r4, #16]
 800a170:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a172:	f04f 0900 	mov.w	r9, #0
 800a176:	e7db      	b.n	800a130 <_printf_float+0x154>
 800a178:	b913      	cbnz	r3, 800a180 <_printf_float+0x1a4>
 800a17a:	6822      	ldr	r2, [r4, #0]
 800a17c:	07d2      	lsls	r2, r2, #31
 800a17e:	d501      	bpl.n	800a184 <_printf_float+0x1a8>
 800a180:	3302      	adds	r3, #2
 800a182:	e7f4      	b.n	800a16e <_printf_float+0x192>
 800a184:	2301      	movs	r3, #1
 800a186:	e7f2      	b.n	800a16e <_printf_float+0x192>
 800a188:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a18e:	4299      	cmp	r1, r3
 800a190:	db05      	blt.n	800a19e <_printf_float+0x1c2>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	6121      	str	r1, [r4, #16]
 800a196:	07d8      	lsls	r0, r3, #31
 800a198:	d5ea      	bpl.n	800a170 <_printf_float+0x194>
 800a19a:	1c4b      	adds	r3, r1, #1
 800a19c:	e7e7      	b.n	800a16e <_printf_float+0x192>
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	bfd4      	ite	le
 800a1a2:	f1c1 0202 	rsble	r2, r1, #2
 800a1a6:	2201      	movgt	r2, #1
 800a1a8:	4413      	add	r3, r2
 800a1aa:	e7e0      	b.n	800a16e <_printf_float+0x192>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	055a      	lsls	r2, r3, #21
 800a1b0:	d407      	bmi.n	800a1c2 <_printf_float+0x1e6>
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	47b8      	blx	r7
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d12b      	bne.n	800a218 <_printf_float+0x23c>
 800a1c0:	e767      	b.n	800a092 <_printf_float+0xb6>
 800a1c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1c6:	f240 80dd 	bls.w	800a384 <_printf_float+0x3a8>
 800a1ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f7f6 fc81 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d033      	beq.n	800a242 <_printf_float+0x266>
 800a1da:	4a37      	ldr	r2, [pc, #220]	@ (800a2b8 <_printf_float+0x2dc>)
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b8      	blx	r7
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f43f af54 	beq.w	800a092 <_printf_float+0xb6>
 800a1ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1ee:	4543      	cmp	r3, r8
 800a1f0:	db02      	blt.n	800a1f8 <_printf_float+0x21c>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	07d8      	lsls	r0, r3, #31
 800a1f6:	d50f      	bpl.n	800a218 <_printf_float+0x23c>
 800a1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b8      	blx	r7
 800a202:	3001      	adds	r0, #1
 800a204:	f43f af45 	beq.w	800a092 <_printf_float+0xb6>
 800a208:	f04f 0900 	mov.w	r9, #0
 800a20c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a210:	f104 0a1a 	add.w	sl, r4, #26
 800a214:	45c8      	cmp	r8, r9
 800a216:	dc09      	bgt.n	800a22c <_printf_float+0x250>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	079b      	lsls	r3, r3, #30
 800a21c:	f100 8103 	bmi.w	800a426 <_printf_float+0x44a>
 800a220:	68e0      	ldr	r0, [r4, #12]
 800a222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a224:	4298      	cmp	r0, r3
 800a226:	bfb8      	it	lt
 800a228:	4618      	movlt	r0, r3
 800a22a:	e734      	b.n	800a096 <_printf_float+0xba>
 800a22c:	2301      	movs	r3, #1
 800a22e:	4652      	mov	r2, sl
 800a230:	4631      	mov	r1, r6
 800a232:	4628      	mov	r0, r5
 800a234:	47b8      	blx	r7
 800a236:	3001      	adds	r0, #1
 800a238:	f43f af2b 	beq.w	800a092 <_printf_float+0xb6>
 800a23c:	f109 0901 	add.w	r9, r9, #1
 800a240:	e7e8      	b.n	800a214 <_printf_float+0x238>
 800a242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	dc39      	bgt.n	800a2bc <_printf_float+0x2e0>
 800a248:	4a1b      	ldr	r2, [pc, #108]	@ (800a2b8 <_printf_float+0x2dc>)
 800a24a:	2301      	movs	r3, #1
 800a24c:	4631      	mov	r1, r6
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	f43f af1d 	beq.w	800a092 <_printf_float+0xb6>
 800a258:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a25c:	ea59 0303 	orrs.w	r3, r9, r3
 800a260:	d102      	bne.n	800a268 <_printf_float+0x28c>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	07d9      	lsls	r1, r3, #31
 800a266:	d5d7      	bpl.n	800a218 <_printf_float+0x23c>
 800a268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f af0d 	beq.w	800a092 <_printf_float+0xb6>
 800a278:	f04f 0a00 	mov.w	sl, #0
 800a27c:	f104 0b1a 	add.w	fp, r4, #26
 800a280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a282:	425b      	negs	r3, r3
 800a284:	4553      	cmp	r3, sl
 800a286:	dc01      	bgt.n	800a28c <_printf_float+0x2b0>
 800a288:	464b      	mov	r3, r9
 800a28a:	e793      	b.n	800a1b4 <_printf_float+0x1d8>
 800a28c:	2301      	movs	r3, #1
 800a28e:	465a      	mov	r2, fp
 800a290:	4631      	mov	r1, r6
 800a292:	4628      	mov	r0, r5
 800a294:	47b8      	blx	r7
 800a296:	3001      	adds	r0, #1
 800a298:	f43f aefb 	beq.w	800a092 <_printf_float+0xb6>
 800a29c:	f10a 0a01 	add.w	sl, sl, #1
 800a2a0:	e7ee      	b.n	800a280 <_printf_float+0x2a4>
 800a2a2:	bf00      	nop
 800a2a4:	7fefffff 	.word	0x7fefffff
 800a2a8:	0800e700 	.word	0x0800e700
 800a2ac:	0800e704 	.word	0x0800e704
 800a2b0:	0800e708 	.word	0x0800e708
 800a2b4:	0800e70c 	.word	0x0800e70c
 800a2b8:	0800e710 	.word	0x0800e710
 800a2bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2c2:	4553      	cmp	r3, sl
 800a2c4:	bfa8      	it	ge
 800a2c6:	4653      	movge	r3, sl
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	4699      	mov	r9, r3
 800a2cc:	dc36      	bgt.n	800a33c <_printf_float+0x360>
 800a2ce:	f04f 0b00 	mov.w	fp, #0
 800a2d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2d6:	f104 021a 	add.w	r2, r4, #26
 800a2da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2dc:	9306      	str	r3, [sp, #24]
 800a2de:	eba3 0309 	sub.w	r3, r3, r9
 800a2e2:	455b      	cmp	r3, fp
 800a2e4:	dc31      	bgt.n	800a34a <_printf_float+0x36e>
 800a2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e8:	459a      	cmp	sl, r3
 800a2ea:	dc3a      	bgt.n	800a362 <_printf_float+0x386>
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	07da      	lsls	r2, r3, #31
 800a2f0:	d437      	bmi.n	800a362 <_printf_float+0x386>
 800a2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f4:	ebaa 0903 	sub.w	r9, sl, r3
 800a2f8:	9b06      	ldr	r3, [sp, #24]
 800a2fa:	ebaa 0303 	sub.w	r3, sl, r3
 800a2fe:	4599      	cmp	r9, r3
 800a300:	bfa8      	it	ge
 800a302:	4699      	movge	r9, r3
 800a304:	f1b9 0f00 	cmp.w	r9, #0
 800a308:	dc33      	bgt.n	800a372 <_printf_float+0x396>
 800a30a:	f04f 0800 	mov.w	r8, #0
 800a30e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a312:	f104 0b1a 	add.w	fp, r4, #26
 800a316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a318:	ebaa 0303 	sub.w	r3, sl, r3
 800a31c:	eba3 0309 	sub.w	r3, r3, r9
 800a320:	4543      	cmp	r3, r8
 800a322:	f77f af79 	ble.w	800a218 <_printf_float+0x23c>
 800a326:	2301      	movs	r3, #1
 800a328:	465a      	mov	r2, fp
 800a32a:	4631      	mov	r1, r6
 800a32c:	4628      	mov	r0, r5
 800a32e:	47b8      	blx	r7
 800a330:	3001      	adds	r0, #1
 800a332:	f43f aeae 	beq.w	800a092 <_printf_float+0xb6>
 800a336:	f108 0801 	add.w	r8, r8, #1
 800a33a:	e7ec      	b.n	800a316 <_printf_float+0x33a>
 800a33c:	4642      	mov	r2, r8
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	47b8      	blx	r7
 800a344:	3001      	adds	r0, #1
 800a346:	d1c2      	bne.n	800a2ce <_printf_float+0x2f2>
 800a348:	e6a3      	b.n	800a092 <_printf_float+0xb6>
 800a34a:	2301      	movs	r3, #1
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	9206      	str	r2, [sp, #24]
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	f43f ae9c 	beq.w	800a092 <_printf_float+0xb6>
 800a35a:	9a06      	ldr	r2, [sp, #24]
 800a35c:	f10b 0b01 	add.w	fp, fp, #1
 800a360:	e7bb      	b.n	800a2da <_printf_float+0x2fe>
 800a362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a366:	4631      	mov	r1, r6
 800a368:	4628      	mov	r0, r5
 800a36a:	47b8      	blx	r7
 800a36c:	3001      	adds	r0, #1
 800a36e:	d1c0      	bne.n	800a2f2 <_printf_float+0x316>
 800a370:	e68f      	b.n	800a092 <_printf_float+0xb6>
 800a372:	9a06      	ldr	r2, [sp, #24]
 800a374:	464b      	mov	r3, r9
 800a376:	4442      	add	r2, r8
 800a378:	4631      	mov	r1, r6
 800a37a:	4628      	mov	r0, r5
 800a37c:	47b8      	blx	r7
 800a37e:	3001      	adds	r0, #1
 800a380:	d1c3      	bne.n	800a30a <_printf_float+0x32e>
 800a382:	e686      	b.n	800a092 <_printf_float+0xb6>
 800a384:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a388:	f1ba 0f01 	cmp.w	sl, #1
 800a38c:	dc01      	bgt.n	800a392 <_printf_float+0x3b6>
 800a38e:	07db      	lsls	r3, r3, #31
 800a390:	d536      	bpl.n	800a400 <_printf_float+0x424>
 800a392:	2301      	movs	r3, #1
 800a394:	4642      	mov	r2, r8
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	f43f ae78 	beq.w	800a092 <_printf_float+0xb6>
 800a3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f43f ae70 	beq.w	800a092 <_printf_float+0xb6>
 800a3b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3be:	f7f6 fb8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3c2:	b9c0      	cbnz	r0, 800a3f6 <_printf_float+0x41a>
 800a3c4:	4653      	mov	r3, sl
 800a3c6:	f108 0201 	add.w	r2, r8, #1
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	47b8      	blx	r7
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d10c      	bne.n	800a3ee <_printf_float+0x412>
 800a3d4:	e65d      	b.n	800a092 <_printf_float+0xb6>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	465a      	mov	r2, fp
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4628      	mov	r0, r5
 800a3de:	47b8      	blx	r7
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	f43f ae56 	beq.w	800a092 <_printf_float+0xb6>
 800a3e6:	f108 0801 	add.w	r8, r8, #1
 800a3ea:	45d0      	cmp	r8, sl
 800a3ec:	dbf3      	blt.n	800a3d6 <_printf_float+0x3fa>
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3f4:	e6df      	b.n	800a1b6 <_printf_float+0x1da>
 800a3f6:	f04f 0800 	mov.w	r8, #0
 800a3fa:	f104 0b1a 	add.w	fp, r4, #26
 800a3fe:	e7f4      	b.n	800a3ea <_printf_float+0x40e>
 800a400:	2301      	movs	r3, #1
 800a402:	4642      	mov	r2, r8
 800a404:	e7e1      	b.n	800a3ca <_printf_float+0x3ee>
 800a406:	2301      	movs	r3, #1
 800a408:	464a      	mov	r2, r9
 800a40a:	4631      	mov	r1, r6
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	f43f ae3e 	beq.w	800a092 <_printf_float+0xb6>
 800a416:	f108 0801 	add.w	r8, r8, #1
 800a41a:	68e3      	ldr	r3, [r4, #12]
 800a41c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a41e:	1a5b      	subs	r3, r3, r1
 800a420:	4543      	cmp	r3, r8
 800a422:	dcf0      	bgt.n	800a406 <_printf_float+0x42a>
 800a424:	e6fc      	b.n	800a220 <_printf_float+0x244>
 800a426:	f04f 0800 	mov.w	r8, #0
 800a42a:	f104 0919 	add.w	r9, r4, #25
 800a42e:	e7f4      	b.n	800a41a <_printf_float+0x43e>

0800a430 <_printf_common>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	4616      	mov	r6, r2
 800a436:	4698      	mov	r8, r3
 800a438:	688a      	ldr	r2, [r1, #8]
 800a43a:	690b      	ldr	r3, [r1, #16]
 800a43c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a440:	4293      	cmp	r3, r2
 800a442:	bfb8      	it	lt
 800a444:	4613      	movlt	r3, r2
 800a446:	6033      	str	r3, [r6, #0]
 800a448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a44c:	4607      	mov	r7, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	b10a      	cbz	r2, 800a456 <_printf_common+0x26>
 800a452:	3301      	adds	r3, #1
 800a454:	6033      	str	r3, [r6, #0]
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	0699      	lsls	r1, r3, #26
 800a45a:	bf42      	ittt	mi
 800a45c:	6833      	ldrmi	r3, [r6, #0]
 800a45e:	3302      	addmi	r3, #2
 800a460:	6033      	strmi	r3, [r6, #0]
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	f015 0506 	ands.w	r5, r5, #6
 800a468:	d106      	bne.n	800a478 <_printf_common+0x48>
 800a46a:	f104 0a19 	add.w	sl, r4, #25
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	6832      	ldr	r2, [r6, #0]
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	42ab      	cmp	r3, r5
 800a476:	dc26      	bgt.n	800a4c6 <_printf_common+0x96>
 800a478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a47c:	6822      	ldr	r2, [r4, #0]
 800a47e:	3b00      	subs	r3, #0
 800a480:	bf18      	it	ne
 800a482:	2301      	movne	r3, #1
 800a484:	0692      	lsls	r2, r2, #26
 800a486:	d42b      	bmi.n	800a4e0 <_printf_common+0xb0>
 800a488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a48c:	4641      	mov	r1, r8
 800a48e:	4638      	mov	r0, r7
 800a490:	47c8      	blx	r9
 800a492:	3001      	adds	r0, #1
 800a494:	d01e      	beq.n	800a4d4 <_printf_common+0xa4>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	f003 0306 	and.w	r3, r3, #6
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	bf02      	ittt	eq
 800a4a2:	68e5      	ldreq	r5, [r4, #12]
 800a4a4:	6833      	ldreq	r3, [r6, #0]
 800a4a6:	1aed      	subeq	r5, r5, r3
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	bf0c      	ite	eq
 800a4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4b0:	2500      	movne	r5, #0
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	bfc4      	itt	gt
 800a4b6:	1a9b      	subgt	r3, r3, r2
 800a4b8:	18ed      	addgt	r5, r5, r3
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	341a      	adds	r4, #26
 800a4be:	42b5      	cmp	r5, r6
 800a4c0:	d11a      	bne.n	800a4f8 <_printf_common+0xc8>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e008      	b.n	800a4d8 <_printf_common+0xa8>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	47c8      	blx	r9
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d103      	bne.n	800a4dc <_printf_common+0xac>
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4dc:	3501      	adds	r5, #1
 800a4de:	e7c6      	b.n	800a46e <_printf_common+0x3e>
 800a4e0:	18e1      	adds	r1, r4, r3
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	2030      	movs	r0, #48	@ 0x30
 800a4e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4ea:	4422      	add	r2, r4
 800a4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4f4:	3302      	adds	r3, #2
 800a4f6:	e7c7      	b.n	800a488 <_printf_common+0x58>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	4638      	mov	r0, r7
 800a500:	47c8      	blx	r9
 800a502:	3001      	adds	r0, #1
 800a504:	d0e6      	beq.n	800a4d4 <_printf_common+0xa4>
 800a506:	3601      	adds	r6, #1
 800a508:	e7d9      	b.n	800a4be <_printf_common+0x8e>
	...

0800a50c <_printf_i>:
 800a50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	7e0f      	ldrb	r7, [r1, #24]
 800a512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a514:	2f78      	cmp	r7, #120	@ 0x78
 800a516:	4691      	mov	r9, r2
 800a518:	4680      	mov	r8, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	469a      	mov	sl, r3
 800a51e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a522:	d807      	bhi.n	800a534 <_printf_i+0x28>
 800a524:	2f62      	cmp	r7, #98	@ 0x62
 800a526:	d80a      	bhi.n	800a53e <_printf_i+0x32>
 800a528:	2f00      	cmp	r7, #0
 800a52a:	f000 80d2 	beq.w	800a6d2 <_printf_i+0x1c6>
 800a52e:	2f58      	cmp	r7, #88	@ 0x58
 800a530:	f000 80b9 	beq.w	800a6a6 <_printf_i+0x19a>
 800a534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a53c:	e03a      	b.n	800a5b4 <_printf_i+0xa8>
 800a53e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a542:	2b15      	cmp	r3, #21
 800a544:	d8f6      	bhi.n	800a534 <_printf_i+0x28>
 800a546:	a101      	add	r1, pc, #4	@ (adr r1, 800a54c <_printf_i+0x40>)
 800a548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a54c:	0800a5a5 	.word	0x0800a5a5
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a535 	.word	0x0800a535
 800a558:	0800a535 	.word	0x0800a535
 800a55c:	0800a535 	.word	0x0800a535
 800a560:	0800a535 	.word	0x0800a535
 800a564:	0800a5b9 	.word	0x0800a5b9
 800a568:	0800a535 	.word	0x0800a535
 800a56c:	0800a535 	.word	0x0800a535
 800a570:	0800a535 	.word	0x0800a535
 800a574:	0800a535 	.word	0x0800a535
 800a578:	0800a6b9 	.word	0x0800a6b9
 800a57c:	0800a5e3 	.word	0x0800a5e3
 800a580:	0800a673 	.word	0x0800a673
 800a584:	0800a535 	.word	0x0800a535
 800a588:	0800a535 	.word	0x0800a535
 800a58c:	0800a6db 	.word	0x0800a6db
 800a590:	0800a535 	.word	0x0800a535
 800a594:	0800a5e3 	.word	0x0800a5e3
 800a598:	0800a535 	.word	0x0800a535
 800a59c:	0800a535 	.word	0x0800a535
 800a5a0:	0800a67b 	.word	0x0800a67b
 800a5a4:	6833      	ldr	r3, [r6, #0]
 800a5a6:	1d1a      	adds	r2, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6032      	str	r2, [r6, #0]
 800a5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e09d      	b.n	800a6f4 <_printf_i+0x1e8>
 800a5b8:	6833      	ldr	r3, [r6, #0]
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	1d19      	adds	r1, r3, #4
 800a5be:	6031      	str	r1, [r6, #0]
 800a5c0:	0606      	lsls	r6, r0, #24
 800a5c2:	d501      	bpl.n	800a5c8 <_printf_i+0xbc>
 800a5c4:	681d      	ldr	r5, [r3, #0]
 800a5c6:	e003      	b.n	800a5d0 <_printf_i+0xc4>
 800a5c8:	0645      	lsls	r5, r0, #25
 800a5ca:	d5fb      	bpl.n	800a5c4 <_printf_i+0xb8>
 800a5cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	da03      	bge.n	800a5dc <_printf_i+0xd0>
 800a5d4:	232d      	movs	r3, #45	@ 0x2d
 800a5d6:	426d      	negs	r5, r5
 800a5d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5dc:	4859      	ldr	r0, [pc, #356]	@ (800a744 <_printf_i+0x238>)
 800a5de:	230a      	movs	r3, #10
 800a5e0:	e011      	b.n	800a606 <_printf_i+0xfa>
 800a5e2:	6821      	ldr	r1, [r4, #0]
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	0608      	lsls	r0, r1, #24
 800a5e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5ec:	d402      	bmi.n	800a5f4 <_printf_i+0xe8>
 800a5ee:	0649      	lsls	r1, r1, #25
 800a5f0:	bf48      	it	mi
 800a5f2:	b2ad      	uxthmi	r5, r5
 800a5f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5f6:	4853      	ldr	r0, [pc, #332]	@ (800a744 <_printf_i+0x238>)
 800a5f8:	6033      	str	r3, [r6, #0]
 800a5fa:	bf14      	ite	ne
 800a5fc:	230a      	movne	r3, #10
 800a5fe:	2308      	moveq	r3, #8
 800a600:	2100      	movs	r1, #0
 800a602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a606:	6866      	ldr	r6, [r4, #4]
 800a608:	60a6      	str	r6, [r4, #8]
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	bfa2      	ittt	ge
 800a60e:	6821      	ldrge	r1, [r4, #0]
 800a610:	f021 0104 	bicge.w	r1, r1, #4
 800a614:	6021      	strge	r1, [r4, #0]
 800a616:	b90d      	cbnz	r5, 800a61c <_printf_i+0x110>
 800a618:	2e00      	cmp	r6, #0
 800a61a:	d04b      	beq.n	800a6b4 <_printf_i+0x1a8>
 800a61c:	4616      	mov	r6, r2
 800a61e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a622:	fb03 5711 	mls	r7, r3, r1, r5
 800a626:	5dc7      	ldrb	r7, [r0, r7]
 800a628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a62c:	462f      	mov	r7, r5
 800a62e:	42bb      	cmp	r3, r7
 800a630:	460d      	mov	r5, r1
 800a632:	d9f4      	bls.n	800a61e <_printf_i+0x112>
 800a634:	2b08      	cmp	r3, #8
 800a636:	d10b      	bne.n	800a650 <_printf_i+0x144>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	07df      	lsls	r7, r3, #31
 800a63c:	d508      	bpl.n	800a650 <_printf_i+0x144>
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	6861      	ldr	r1, [r4, #4]
 800a642:	4299      	cmp	r1, r3
 800a644:	bfde      	ittt	le
 800a646:	2330      	movle	r3, #48	@ 0x30
 800a648:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a64c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a650:	1b92      	subs	r2, r2, r6
 800a652:	6122      	str	r2, [r4, #16]
 800a654:	f8cd a000 	str.w	sl, [sp]
 800a658:	464b      	mov	r3, r9
 800a65a:	aa03      	add	r2, sp, #12
 800a65c:	4621      	mov	r1, r4
 800a65e:	4640      	mov	r0, r8
 800a660:	f7ff fee6 	bl	800a430 <_printf_common>
 800a664:	3001      	adds	r0, #1
 800a666:	d14a      	bne.n	800a6fe <_printf_i+0x1f2>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	b004      	add	sp, #16
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	f043 0320 	orr.w	r3, r3, #32
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	4833      	ldr	r0, [pc, #204]	@ (800a748 <_printf_i+0x23c>)
 800a67c:	2778      	movs	r7, #120	@ 0x78
 800a67e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	6831      	ldr	r1, [r6, #0]
 800a686:	061f      	lsls	r7, r3, #24
 800a688:	f851 5b04 	ldr.w	r5, [r1], #4
 800a68c:	d402      	bmi.n	800a694 <_printf_i+0x188>
 800a68e:	065f      	lsls	r7, r3, #25
 800a690:	bf48      	it	mi
 800a692:	b2ad      	uxthmi	r5, r5
 800a694:	6031      	str	r1, [r6, #0]
 800a696:	07d9      	lsls	r1, r3, #31
 800a698:	bf44      	itt	mi
 800a69a:	f043 0320 	orrmi.w	r3, r3, #32
 800a69e:	6023      	strmi	r3, [r4, #0]
 800a6a0:	b11d      	cbz	r5, 800a6aa <_printf_i+0x19e>
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	e7ac      	b.n	800a600 <_printf_i+0xf4>
 800a6a6:	4827      	ldr	r0, [pc, #156]	@ (800a744 <_printf_i+0x238>)
 800a6a8:	e7e9      	b.n	800a67e <_printf_i+0x172>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	f023 0320 	bic.w	r3, r3, #32
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	e7f6      	b.n	800a6a2 <_printf_i+0x196>
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	e7bd      	b.n	800a634 <_printf_i+0x128>
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	6961      	ldr	r1, [r4, #20]
 800a6be:	1d18      	adds	r0, r3, #4
 800a6c0:	6030      	str	r0, [r6, #0]
 800a6c2:	062e      	lsls	r6, r5, #24
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	d501      	bpl.n	800a6cc <_printf_i+0x1c0>
 800a6c8:	6019      	str	r1, [r3, #0]
 800a6ca:	e002      	b.n	800a6d2 <_printf_i+0x1c6>
 800a6cc:	0668      	lsls	r0, r5, #25
 800a6ce:	d5fb      	bpl.n	800a6c8 <_printf_i+0x1bc>
 800a6d0:	8019      	strh	r1, [r3, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	4616      	mov	r6, r2
 800a6d8:	e7bc      	b.n	800a654 <_printf_i+0x148>
 800a6da:	6833      	ldr	r3, [r6, #0]
 800a6dc:	1d1a      	adds	r2, r3, #4
 800a6de:	6032      	str	r2, [r6, #0]
 800a6e0:	681e      	ldr	r6, [r3, #0]
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7f5 fd7a 	bl	80001e0 <memchr>
 800a6ec:	b108      	cbz	r0, 800a6f2 <_printf_i+0x1e6>
 800a6ee:	1b80      	subs	r0, r0, r6
 800a6f0:	6060      	str	r0, [r4, #4]
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6fc:	e7aa      	b.n	800a654 <_printf_i+0x148>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	4632      	mov	r2, r6
 800a702:	4649      	mov	r1, r9
 800a704:	4640      	mov	r0, r8
 800a706:	47d0      	blx	sl
 800a708:	3001      	adds	r0, #1
 800a70a:	d0ad      	beq.n	800a668 <_printf_i+0x15c>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	079b      	lsls	r3, r3, #30
 800a710:	d413      	bmi.n	800a73a <_printf_i+0x22e>
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	4298      	cmp	r0, r3
 800a718:	bfb8      	it	lt
 800a71a:	4618      	movlt	r0, r3
 800a71c:	e7a6      	b.n	800a66c <_printf_i+0x160>
 800a71e:	2301      	movs	r3, #1
 800a720:	4632      	mov	r2, r6
 800a722:	4649      	mov	r1, r9
 800a724:	4640      	mov	r0, r8
 800a726:	47d0      	blx	sl
 800a728:	3001      	adds	r0, #1
 800a72a:	d09d      	beq.n	800a668 <_printf_i+0x15c>
 800a72c:	3501      	adds	r5, #1
 800a72e:	68e3      	ldr	r3, [r4, #12]
 800a730:	9903      	ldr	r1, [sp, #12]
 800a732:	1a5b      	subs	r3, r3, r1
 800a734:	42ab      	cmp	r3, r5
 800a736:	dcf2      	bgt.n	800a71e <_printf_i+0x212>
 800a738:	e7eb      	b.n	800a712 <_printf_i+0x206>
 800a73a:	2500      	movs	r5, #0
 800a73c:	f104 0619 	add.w	r6, r4, #25
 800a740:	e7f5      	b.n	800a72e <_printf_i+0x222>
 800a742:	bf00      	nop
 800a744:	0800e712 	.word	0x0800e712
 800a748:	0800e723 	.word	0x0800e723

0800a74c <_scanf_float>:
 800a74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	b087      	sub	sp, #28
 800a752:	4617      	mov	r7, r2
 800a754:	9303      	str	r3, [sp, #12]
 800a756:	688b      	ldr	r3, [r1, #8]
 800a758:	1e5a      	subs	r2, r3, #1
 800a75a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a75e:	bf81      	itttt	hi
 800a760:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a764:	eb03 0b05 	addhi.w	fp, r3, r5
 800a768:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a76c:	608b      	strhi	r3, [r1, #8]
 800a76e:	680b      	ldr	r3, [r1, #0]
 800a770:	460a      	mov	r2, r1
 800a772:	f04f 0500 	mov.w	r5, #0
 800a776:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a77a:	f842 3b1c 	str.w	r3, [r2], #28
 800a77e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a782:	4680      	mov	r8, r0
 800a784:	460c      	mov	r4, r1
 800a786:	bf98      	it	ls
 800a788:	f04f 0b00 	movls.w	fp, #0
 800a78c:	9201      	str	r2, [sp, #4]
 800a78e:	4616      	mov	r6, r2
 800a790:	46aa      	mov	sl, r5
 800a792:	46a9      	mov	r9, r5
 800a794:	9502      	str	r5, [sp, #8]
 800a796:	68a2      	ldr	r2, [r4, #8]
 800a798:	b152      	cbz	r2, 800a7b0 <_scanf_float+0x64>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a7a0:	d864      	bhi.n	800a86c <_scanf_float+0x120>
 800a7a2:	2b40      	cmp	r3, #64	@ 0x40
 800a7a4:	d83c      	bhi.n	800a820 <_scanf_float+0xd4>
 800a7a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a7aa:	b2c8      	uxtb	r0, r1
 800a7ac:	280e      	cmp	r0, #14
 800a7ae:	d93a      	bls.n	800a826 <_scanf_float+0xda>
 800a7b0:	f1b9 0f00 	cmp.w	r9, #0
 800a7b4:	d003      	beq.n	800a7be <_scanf_float+0x72>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7c2:	f1ba 0f01 	cmp.w	sl, #1
 800a7c6:	f200 8117 	bhi.w	800a9f8 <_scanf_float+0x2ac>
 800a7ca:	9b01      	ldr	r3, [sp, #4]
 800a7cc:	429e      	cmp	r6, r3
 800a7ce:	f200 8108 	bhi.w	800a9e2 <_scanf_float+0x296>
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	b007      	add	sp, #28
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a7de:	2a0d      	cmp	r2, #13
 800a7e0:	d8e6      	bhi.n	800a7b0 <_scanf_float+0x64>
 800a7e2:	a101      	add	r1, pc, #4	@ (adr r1, 800a7e8 <_scanf_float+0x9c>)
 800a7e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a7e8:	0800a92f 	.word	0x0800a92f
 800a7ec:	0800a7b1 	.word	0x0800a7b1
 800a7f0:	0800a7b1 	.word	0x0800a7b1
 800a7f4:	0800a7b1 	.word	0x0800a7b1
 800a7f8:	0800a98f 	.word	0x0800a98f
 800a7fc:	0800a967 	.word	0x0800a967
 800a800:	0800a7b1 	.word	0x0800a7b1
 800a804:	0800a7b1 	.word	0x0800a7b1
 800a808:	0800a93d 	.word	0x0800a93d
 800a80c:	0800a7b1 	.word	0x0800a7b1
 800a810:	0800a7b1 	.word	0x0800a7b1
 800a814:	0800a7b1 	.word	0x0800a7b1
 800a818:	0800a7b1 	.word	0x0800a7b1
 800a81c:	0800a8f5 	.word	0x0800a8f5
 800a820:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a824:	e7db      	b.n	800a7de <_scanf_float+0x92>
 800a826:	290e      	cmp	r1, #14
 800a828:	d8c2      	bhi.n	800a7b0 <_scanf_float+0x64>
 800a82a:	a001      	add	r0, pc, #4	@ (adr r0, 800a830 <_scanf_float+0xe4>)
 800a82c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a830:	0800a8e5 	.word	0x0800a8e5
 800a834:	0800a7b1 	.word	0x0800a7b1
 800a838:	0800a8e5 	.word	0x0800a8e5
 800a83c:	0800a97b 	.word	0x0800a97b
 800a840:	0800a7b1 	.word	0x0800a7b1
 800a844:	0800a88d 	.word	0x0800a88d
 800a848:	0800a8cb 	.word	0x0800a8cb
 800a84c:	0800a8cb 	.word	0x0800a8cb
 800a850:	0800a8cb 	.word	0x0800a8cb
 800a854:	0800a8cb 	.word	0x0800a8cb
 800a858:	0800a8cb 	.word	0x0800a8cb
 800a85c:	0800a8cb 	.word	0x0800a8cb
 800a860:	0800a8cb 	.word	0x0800a8cb
 800a864:	0800a8cb 	.word	0x0800a8cb
 800a868:	0800a8cb 	.word	0x0800a8cb
 800a86c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a86e:	d809      	bhi.n	800a884 <_scanf_float+0x138>
 800a870:	2b60      	cmp	r3, #96	@ 0x60
 800a872:	d8b2      	bhi.n	800a7da <_scanf_float+0x8e>
 800a874:	2b54      	cmp	r3, #84	@ 0x54
 800a876:	d07b      	beq.n	800a970 <_scanf_float+0x224>
 800a878:	2b59      	cmp	r3, #89	@ 0x59
 800a87a:	d199      	bne.n	800a7b0 <_scanf_float+0x64>
 800a87c:	2d07      	cmp	r5, #7
 800a87e:	d197      	bne.n	800a7b0 <_scanf_float+0x64>
 800a880:	2508      	movs	r5, #8
 800a882:	e02c      	b.n	800a8de <_scanf_float+0x192>
 800a884:	2b74      	cmp	r3, #116	@ 0x74
 800a886:	d073      	beq.n	800a970 <_scanf_float+0x224>
 800a888:	2b79      	cmp	r3, #121	@ 0x79
 800a88a:	e7f6      	b.n	800a87a <_scanf_float+0x12e>
 800a88c:	6821      	ldr	r1, [r4, #0]
 800a88e:	05c8      	lsls	r0, r1, #23
 800a890:	d51b      	bpl.n	800a8ca <_scanf_float+0x17e>
 800a892:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a896:	6021      	str	r1, [r4, #0]
 800a898:	f109 0901 	add.w	r9, r9, #1
 800a89c:	f1bb 0f00 	cmp.w	fp, #0
 800a8a0:	d003      	beq.n	800a8aa <_scanf_float+0x15e>
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8a8:	60a2      	str	r2, [r4, #8]
 800a8aa:	68a3      	ldr	r3, [r4, #8]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	60a3      	str	r3, [r4, #8]
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	f340 8087 	ble.w	800a9d0 <_scanf_float+0x284>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	603b      	str	r3, [r7, #0]
 800a8c8:	e765      	b.n	800a796 <_scanf_float+0x4a>
 800a8ca:	eb1a 0105 	adds.w	r1, sl, r5
 800a8ce:	f47f af6f 	bne.w	800a7b0 <_scanf_float+0x64>
 800a8d2:	6822      	ldr	r2, [r4, #0]
 800a8d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a8d8:	6022      	str	r2, [r4, #0]
 800a8da:	460d      	mov	r5, r1
 800a8dc:	468a      	mov	sl, r1
 800a8de:	f806 3b01 	strb.w	r3, [r6], #1
 800a8e2:	e7e2      	b.n	800a8aa <_scanf_float+0x15e>
 800a8e4:	6822      	ldr	r2, [r4, #0]
 800a8e6:	0610      	lsls	r0, r2, #24
 800a8e8:	f57f af62 	bpl.w	800a7b0 <_scanf_float+0x64>
 800a8ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a8f0:	6022      	str	r2, [r4, #0]
 800a8f2:	e7f4      	b.n	800a8de <_scanf_float+0x192>
 800a8f4:	f1ba 0f00 	cmp.w	sl, #0
 800a8f8:	d10e      	bne.n	800a918 <_scanf_float+0x1cc>
 800a8fa:	f1b9 0f00 	cmp.w	r9, #0
 800a8fe:	d10e      	bne.n	800a91e <_scanf_float+0x1d2>
 800a900:	6822      	ldr	r2, [r4, #0]
 800a902:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a906:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a90a:	d108      	bne.n	800a91e <_scanf_float+0x1d2>
 800a90c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a910:	6022      	str	r2, [r4, #0]
 800a912:	f04f 0a01 	mov.w	sl, #1
 800a916:	e7e2      	b.n	800a8de <_scanf_float+0x192>
 800a918:	f1ba 0f02 	cmp.w	sl, #2
 800a91c:	d055      	beq.n	800a9ca <_scanf_float+0x27e>
 800a91e:	2d01      	cmp	r5, #1
 800a920:	d002      	beq.n	800a928 <_scanf_float+0x1dc>
 800a922:	2d04      	cmp	r5, #4
 800a924:	f47f af44 	bne.w	800a7b0 <_scanf_float+0x64>
 800a928:	3501      	adds	r5, #1
 800a92a:	b2ed      	uxtb	r5, r5
 800a92c:	e7d7      	b.n	800a8de <_scanf_float+0x192>
 800a92e:	f1ba 0f01 	cmp.w	sl, #1
 800a932:	f47f af3d 	bne.w	800a7b0 <_scanf_float+0x64>
 800a936:	f04f 0a02 	mov.w	sl, #2
 800a93a:	e7d0      	b.n	800a8de <_scanf_float+0x192>
 800a93c:	b97d      	cbnz	r5, 800a95e <_scanf_float+0x212>
 800a93e:	f1b9 0f00 	cmp.w	r9, #0
 800a942:	f47f af38 	bne.w	800a7b6 <_scanf_float+0x6a>
 800a946:	6822      	ldr	r2, [r4, #0]
 800a948:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a94c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a950:	f040 8108 	bne.w	800ab64 <_scanf_float+0x418>
 800a954:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a958:	6022      	str	r2, [r4, #0]
 800a95a:	2501      	movs	r5, #1
 800a95c:	e7bf      	b.n	800a8de <_scanf_float+0x192>
 800a95e:	2d03      	cmp	r5, #3
 800a960:	d0e2      	beq.n	800a928 <_scanf_float+0x1dc>
 800a962:	2d05      	cmp	r5, #5
 800a964:	e7de      	b.n	800a924 <_scanf_float+0x1d8>
 800a966:	2d02      	cmp	r5, #2
 800a968:	f47f af22 	bne.w	800a7b0 <_scanf_float+0x64>
 800a96c:	2503      	movs	r5, #3
 800a96e:	e7b6      	b.n	800a8de <_scanf_float+0x192>
 800a970:	2d06      	cmp	r5, #6
 800a972:	f47f af1d 	bne.w	800a7b0 <_scanf_float+0x64>
 800a976:	2507      	movs	r5, #7
 800a978:	e7b1      	b.n	800a8de <_scanf_float+0x192>
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	0591      	lsls	r1, r2, #22
 800a97e:	f57f af17 	bpl.w	800a7b0 <_scanf_float+0x64>
 800a982:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a986:	6022      	str	r2, [r4, #0]
 800a988:	f8cd 9008 	str.w	r9, [sp, #8]
 800a98c:	e7a7      	b.n	800a8de <_scanf_float+0x192>
 800a98e:	6822      	ldr	r2, [r4, #0]
 800a990:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a994:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a998:	d006      	beq.n	800a9a8 <_scanf_float+0x25c>
 800a99a:	0550      	lsls	r0, r2, #21
 800a99c:	f57f af08 	bpl.w	800a7b0 <_scanf_float+0x64>
 800a9a0:	f1b9 0f00 	cmp.w	r9, #0
 800a9a4:	f000 80de 	beq.w	800ab64 <_scanf_float+0x418>
 800a9a8:	0591      	lsls	r1, r2, #22
 800a9aa:	bf58      	it	pl
 800a9ac:	9902      	ldrpl	r1, [sp, #8]
 800a9ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9b2:	bf58      	it	pl
 800a9b4:	eba9 0101 	subpl.w	r1, r9, r1
 800a9b8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a9bc:	bf58      	it	pl
 800a9be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a9c2:	6022      	str	r2, [r4, #0]
 800a9c4:	f04f 0900 	mov.w	r9, #0
 800a9c8:	e789      	b.n	800a8de <_scanf_float+0x192>
 800a9ca:	f04f 0a03 	mov.w	sl, #3
 800a9ce:	e786      	b.n	800a8de <_scanf_float+0x192>
 800a9d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4798      	blx	r3
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f43f aedb 	beq.w	800a796 <_scanf_float+0x4a>
 800a9e0:	e6e6      	b.n	800a7b0 <_scanf_float+0x64>
 800a9e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9ea:	463a      	mov	r2, r7
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	4798      	blx	r3
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	e6e8      	b.n	800a7ca <_scanf_float+0x7e>
 800a9f8:	1e6b      	subs	r3, r5, #1
 800a9fa:	2b06      	cmp	r3, #6
 800a9fc:	d824      	bhi.n	800aa48 <_scanf_float+0x2fc>
 800a9fe:	2d02      	cmp	r5, #2
 800aa00:	d836      	bhi.n	800aa70 <_scanf_float+0x324>
 800aa02:	9b01      	ldr	r3, [sp, #4]
 800aa04:	429e      	cmp	r6, r3
 800aa06:	f67f aee4 	bls.w	800a7d2 <_scanf_float+0x86>
 800aa0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa12:	463a      	mov	r2, r7
 800aa14:	4640      	mov	r0, r8
 800aa16:	4798      	blx	r3
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	6123      	str	r3, [r4, #16]
 800aa1e:	e7f0      	b.n	800aa02 <_scanf_float+0x2b6>
 800aa20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa24:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aa28:	463a      	mov	r2, r7
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	4798      	blx	r3
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	6123      	str	r3, [r4, #16]
 800aa34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa38:	fa5f fa8a 	uxtb.w	sl, sl
 800aa3c:	f1ba 0f02 	cmp.w	sl, #2
 800aa40:	d1ee      	bne.n	800aa20 <_scanf_float+0x2d4>
 800aa42:	3d03      	subs	r5, #3
 800aa44:	b2ed      	uxtb	r5, r5
 800aa46:	1b76      	subs	r6, r6, r5
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	05da      	lsls	r2, r3, #23
 800aa4c:	d530      	bpl.n	800aab0 <_scanf_float+0x364>
 800aa4e:	055b      	lsls	r3, r3, #21
 800aa50:	d511      	bpl.n	800aa76 <_scanf_float+0x32a>
 800aa52:	9b01      	ldr	r3, [sp, #4]
 800aa54:	429e      	cmp	r6, r3
 800aa56:	f67f aebc 	bls.w	800a7d2 <_scanf_float+0x86>
 800aa5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa62:	463a      	mov	r2, r7
 800aa64:	4640      	mov	r0, r8
 800aa66:	4798      	blx	r3
 800aa68:	6923      	ldr	r3, [r4, #16]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	6123      	str	r3, [r4, #16]
 800aa6e:	e7f0      	b.n	800aa52 <_scanf_float+0x306>
 800aa70:	46aa      	mov	sl, r5
 800aa72:	46b3      	mov	fp, r6
 800aa74:	e7de      	b.n	800aa34 <_scanf_float+0x2e8>
 800aa76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	2965      	cmp	r1, #101	@ 0x65
 800aa7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa82:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa86:	6123      	str	r3, [r4, #16]
 800aa88:	d00c      	beq.n	800aaa4 <_scanf_float+0x358>
 800aa8a:	2945      	cmp	r1, #69	@ 0x45
 800aa8c:	d00a      	beq.n	800aaa4 <_scanf_float+0x358>
 800aa8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa92:	463a      	mov	r2, r7
 800aa94:	4640      	mov	r0, r8
 800aa96:	4798      	blx	r3
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	1eb5      	subs	r5, r6, #2
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaa8:	463a      	mov	r2, r7
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4798      	blx	r3
 800aaae:	462e      	mov	r6, r5
 800aab0:	6822      	ldr	r2, [r4, #0]
 800aab2:	f012 0210 	ands.w	r2, r2, #16
 800aab6:	d001      	beq.n	800aabc <_scanf_float+0x370>
 800aab8:	2000      	movs	r0, #0
 800aaba:	e68b      	b.n	800a7d4 <_scanf_float+0x88>
 800aabc:	7032      	strb	r2, [r6, #0]
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aac8:	d11c      	bne.n	800ab04 <_scanf_float+0x3b8>
 800aaca:	9b02      	ldr	r3, [sp, #8]
 800aacc:	454b      	cmp	r3, r9
 800aace:	eba3 0209 	sub.w	r2, r3, r9
 800aad2:	d123      	bne.n	800ab1c <_scanf_float+0x3d0>
 800aad4:	9901      	ldr	r1, [sp, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	4640      	mov	r0, r8
 800aada:	f002 fbf9 	bl	800d2d0 <_strtod_r>
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	6821      	ldr	r1, [r4, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f011 0f02 	tst.w	r1, #2
 800aae8:	ec57 6b10 	vmov	r6, r7, d0
 800aaec:	f103 0204 	add.w	r2, r3, #4
 800aaf0:	d01f      	beq.n	800ab32 <_scanf_float+0x3e6>
 800aaf2:	9903      	ldr	r1, [sp, #12]
 800aaf4:	600a      	str	r2, [r1, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	e9c3 6700 	strd	r6, r7, [r3]
 800aafc:	68e3      	ldr	r3, [r4, #12]
 800aafe:	3301      	adds	r3, #1
 800ab00:	60e3      	str	r3, [r4, #12]
 800ab02:	e7d9      	b.n	800aab8 <_scanf_float+0x36c>
 800ab04:	9b04      	ldr	r3, [sp, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0e4      	beq.n	800aad4 <_scanf_float+0x388>
 800ab0a:	9905      	ldr	r1, [sp, #20]
 800ab0c:	230a      	movs	r3, #10
 800ab0e:	3101      	adds	r1, #1
 800ab10:	4640      	mov	r0, r8
 800ab12:	f002 fc5d 	bl	800d3d0 <_strtol_r>
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	9e05      	ldr	r6, [sp, #20]
 800ab1a:	1ac2      	subs	r2, r0, r3
 800ab1c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ab20:	429e      	cmp	r6, r3
 800ab22:	bf28      	it	cs
 800ab24:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ab28:	4910      	ldr	r1, [pc, #64]	@ (800ab6c <_scanf_float+0x420>)
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f000 f8e4 	bl	800acf8 <siprintf>
 800ab30:	e7d0      	b.n	800aad4 <_scanf_float+0x388>
 800ab32:	f011 0f04 	tst.w	r1, #4
 800ab36:	9903      	ldr	r1, [sp, #12]
 800ab38:	600a      	str	r2, [r1, #0]
 800ab3a:	d1dc      	bne.n	800aaf6 <_scanf_float+0x3aa>
 800ab3c:	681d      	ldr	r5, [r3, #0]
 800ab3e:	4632      	mov	r2, r6
 800ab40:	463b      	mov	r3, r7
 800ab42:	4630      	mov	r0, r6
 800ab44:	4639      	mov	r1, r7
 800ab46:	f7f5 fff9 	bl	8000b3c <__aeabi_dcmpun>
 800ab4a:	b128      	cbz	r0, 800ab58 <_scanf_float+0x40c>
 800ab4c:	4808      	ldr	r0, [pc, #32]	@ (800ab70 <_scanf_float+0x424>)
 800ab4e:	f000 f9b7 	bl	800aec0 <nanf>
 800ab52:	ed85 0a00 	vstr	s0, [r5]
 800ab56:	e7d1      	b.n	800aafc <_scanf_float+0x3b0>
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	f7f6 f84c 	bl	8000bf8 <__aeabi_d2f>
 800ab60:	6028      	str	r0, [r5, #0]
 800ab62:	e7cb      	b.n	800aafc <_scanf_float+0x3b0>
 800ab64:	f04f 0900 	mov.w	r9, #0
 800ab68:	e629      	b.n	800a7be <_scanf_float+0x72>
 800ab6a:	bf00      	nop
 800ab6c:	0800e734 	.word	0x0800e734
 800ab70:	0800eacd 	.word	0x0800eacd

0800ab74 <std>:
 800ab74:	2300      	movs	r3, #0
 800ab76:	b510      	push	{r4, lr}
 800ab78:	4604      	mov	r4, r0
 800ab7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab82:	6083      	str	r3, [r0, #8]
 800ab84:	8181      	strh	r1, [r0, #12]
 800ab86:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab88:	81c2      	strh	r2, [r0, #14]
 800ab8a:	6183      	str	r3, [r0, #24]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	2208      	movs	r2, #8
 800ab90:	305c      	adds	r0, #92	@ 0x5c
 800ab92:	f000 f914 	bl	800adbe <memset>
 800ab96:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <std+0x58>)
 800ab98:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab9a:	4b0d      	ldr	r3, [pc, #52]	@ (800abd0 <std+0x5c>)
 800ab9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab9e:	4b0d      	ldr	r3, [pc, #52]	@ (800abd4 <std+0x60>)
 800aba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aba2:	4b0d      	ldr	r3, [pc, #52]	@ (800abd8 <std+0x64>)
 800aba4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <std+0x68>)
 800aba8:	6224      	str	r4, [r4, #32]
 800abaa:	429c      	cmp	r4, r3
 800abac:	d006      	beq.n	800abbc <std+0x48>
 800abae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abb2:	4294      	cmp	r4, r2
 800abb4:	d002      	beq.n	800abbc <std+0x48>
 800abb6:	33d0      	adds	r3, #208	@ 0xd0
 800abb8:	429c      	cmp	r4, r3
 800abba:	d105      	bne.n	800abc8 <std+0x54>
 800abbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc4:	f000 b978 	b.w	800aeb8 <__retarget_lock_init_recursive>
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	bf00      	nop
 800abcc:	0800ad39 	.word	0x0800ad39
 800abd0:	0800ad5b 	.word	0x0800ad5b
 800abd4:	0800ad93 	.word	0x0800ad93
 800abd8:	0800adb7 	.word	0x0800adb7
 800abdc:	200017fc 	.word	0x200017fc

0800abe0 <stdio_exit_handler>:
 800abe0:	4a02      	ldr	r2, [pc, #8]	@ (800abec <stdio_exit_handler+0xc>)
 800abe2:	4903      	ldr	r1, [pc, #12]	@ (800abf0 <stdio_exit_handler+0x10>)
 800abe4:	4803      	ldr	r0, [pc, #12]	@ (800abf4 <stdio_exit_handler+0x14>)
 800abe6:	f000 b869 	b.w	800acbc <_fwalk_sglue>
 800abea:	bf00      	nop
 800abec:	2000011c 	.word	0x2000011c
 800abf0:	0800d78d 	.word	0x0800d78d
 800abf4:	2000012c 	.word	0x2000012c

0800abf8 <cleanup_stdio>:
 800abf8:	6841      	ldr	r1, [r0, #4]
 800abfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <cleanup_stdio+0x34>)
 800abfc:	4299      	cmp	r1, r3
 800abfe:	b510      	push	{r4, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	d001      	beq.n	800ac08 <cleanup_stdio+0x10>
 800ac04:	f002 fdc2 	bl	800d78c <_fflush_r>
 800ac08:	68a1      	ldr	r1, [r4, #8]
 800ac0a:	4b09      	ldr	r3, [pc, #36]	@ (800ac30 <cleanup_stdio+0x38>)
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	d002      	beq.n	800ac16 <cleanup_stdio+0x1e>
 800ac10:	4620      	mov	r0, r4
 800ac12:	f002 fdbb 	bl	800d78c <_fflush_r>
 800ac16:	68e1      	ldr	r1, [r4, #12]
 800ac18:	4b06      	ldr	r3, [pc, #24]	@ (800ac34 <cleanup_stdio+0x3c>)
 800ac1a:	4299      	cmp	r1, r3
 800ac1c:	d004      	beq.n	800ac28 <cleanup_stdio+0x30>
 800ac1e:	4620      	mov	r0, r4
 800ac20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac24:	f002 bdb2 	b.w	800d78c <_fflush_r>
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200017fc 	.word	0x200017fc
 800ac30:	20001864 	.word	0x20001864
 800ac34:	200018cc 	.word	0x200018cc

0800ac38 <global_stdio_init.part.0>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac68 <global_stdio_init.part.0+0x30>)
 800ac3c:	4c0b      	ldr	r4, [pc, #44]	@ (800ac6c <global_stdio_init.part.0+0x34>)
 800ac3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac70 <global_stdio_init.part.0+0x38>)
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	4620      	mov	r0, r4
 800ac44:	2200      	movs	r2, #0
 800ac46:	2104      	movs	r1, #4
 800ac48:	f7ff ff94 	bl	800ab74 <std>
 800ac4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac50:	2201      	movs	r2, #1
 800ac52:	2109      	movs	r1, #9
 800ac54:	f7ff ff8e 	bl	800ab74 <std>
 800ac58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac62:	2112      	movs	r1, #18
 800ac64:	f7ff bf86 	b.w	800ab74 <std>
 800ac68:	20001934 	.word	0x20001934
 800ac6c:	200017fc 	.word	0x200017fc
 800ac70:	0800abe1 	.word	0x0800abe1

0800ac74 <__sfp_lock_acquire>:
 800ac74:	4801      	ldr	r0, [pc, #4]	@ (800ac7c <__sfp_lock_acquire+0x8>)
 800ac76:	f000 b920 	b.w	800aeba <__retarget_lock_acquire_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	2000193d 	.word	0x2000193d

0800ac80 <__sfp_lock_release>:
 800ac80:	4801      	ldr	r0, [pc, #4]	@ (800ac88 <__sfp_lock_release+0x8>)
 800ac82:	f000 b91b 	b.w	800aebc <__retarget_lock_release_recursive>
 800ac86:	bf00      	nop
 800ac88:	2000193d 	.word	0x2000193d

0800ac8c <__sinit>:
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	4604      	mov	r4, r0
 800ac90:	f7ff fff0 	bl	800ac74 <__sfp_lock_acquire>
 800ac94:	6a23      	ldr	r3, [r4, #32]
 800ac96:	b11b      	cbz	r3, 800aca0 <__sinit+0x14>
 800ac98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac9c:	f7ff bff0 	b.w	800ac80 <__sfp_lock_release>
 800aca0:	4b04      	ldr	r3, [pc, #16]	@ (800acb4 <__sinit+0x28>)
 800aca2:	6223      	str	r3, [r4, #32]
 800aca4:	4b04      	ldr	r3, [pc, #16]	@ (800acb8 <__sinit+0x2c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f5      	bne.n	800ac98 <__sinit+0xc>
 800acac:	f7ff ffc4 	bl	800ac38 <global_stdio_init.part.0>
 800acb0:	e7f2      	b.n	800ac98 <__sinit+0xc>
 800acb2:	bf00      	nop
 800acb4:	0800abf9 	.word	0x0800abf9
 800acb8:	20001934 	.word	0x20001934

0800acbc <_fwalk_sglue>:
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	4607      	mov	r7, r0
 800acc2:	4688      	mov	r8, r1
 800acc4:	4614      	mov	r4, r2
 800acc6:	2600      	movs	r6, #0
 800acc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800accc:	f1b9 0901 	subs.w	r9, r9, #1
 800acd0:	d505      	bpl.n	800acde <_fwalk_sglue+0x22>
 800acd2:	6824      	ldr	r4, [r4, #0]
 800acd4:	2c00      	cmp	r4, #0
 800acd6:	d1f7      	bne.n	800acc8 <_fwalk_sglue+0xc>
 800acd8:	4630      	mov	r0, r6
 800acda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acde:	89ab      	ldrh	r3, [r5, #12]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d907      	bls.n	800acf4 <_fwalk_sglue+0x38>
 800ace4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ace8:	3301      	adds	r3, #1
 800acea:	d003      	beq.n	800acf4 <_fwalk_sglue+0x38>
 800acec:	4629      	mov	r1, r5
 800acee:	4638      	mov	r0, r7
 800acf0:	47c0      	blx	r8
 800acf2:	4306      	orrs	r6, r0
 800acf4:	3568      	adds	r5, #104	@ 0x68
 800acf6:	e7e9      	b.n	800accc <_fwalk_sglue+0x10>

0800acf8 <siprintf>:
 800acf8:	b40e      	push	{r1, r2, r3}
 800acfa:	b500      	push	{lr}
 800acfc:	b09c      	sub	sp, #112	@ 0x70
 800acfe:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad00:	9002      	str	r0, [sp, #8]
 800ad02:	9006      	str	r0, [sp, #24]
 800ad04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad08:	4809      	ldr	r0, [pc, #36]	@ (800ad30 <siprintf+0x38>)
 800ad0a:	9107      	str	r1, [sp, #28]
 800ad0c:	9104      	str	r1, [sp, #16]
 800ad0e:	4909      	ldr	r1, [pc, #36]	@ (800ad34 <siprintf+0x3c>)
 800ad10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad14:	9105      	str	r1, [sp, #20]
 800ad16:	6800      	ldr	r0, [r0, #0]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	a902      	add	r1, sp, #8
 800ad1c:	f002 fbb6 	bl	800d48c <_svfiprintf_r>
 800ad20:	9b02      	ldr	r3, [sp, #8]
 800ad22:	2200      	movs	r2, #0
 800ad24:	701a      	strb	r2, [r3, #0]
 800ad26:	b01c      	add	sp, #112	@ 0x70
 800ad28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad2c:	b003      	add	sp, #12
 800ad2e:	4770      	bx	lr
 800ad30:	20000128 	.word	0x20000128
 800ad34:	ffff0208 	.word	0xffff0208

0800ad38 <__sread>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad40:	f000 f86c 	bl	800ae1c <_read_r>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	bfab      	itete	ge
 800ad48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad4c:	181b      	addge	r3, r3, r0
 800ad4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad52:	bfac      	ite	ge
 800ad54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad56:	81a3      	strhlt	r3, [r4, #12]
 800ad58:	bd10      	pop	{r4, pc}

0800ad5a <__swrite>:
 800ad5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5e:	461f      	mov	r7, r3
 800ad60:	898b      	ldrh	r3, [r1, #12]
 800ad62:	05db      	lsls	r3, r3, #23
 800ad64:	4605      	mov	r5, r0
 800ad66:	460c      	mov	r4, r1
 800ad68:	4616      	mov	r6, r2
 800ad6a:	d505      	bpl.n	800ad78 <__swrite+0x1e>
 800ad6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad70:	2302      	movs	r3, #2
 800ad72:	2200      	movs	r2, #0
 800ad74:	f000 f840 	bl	800adf8 <_lseek_r>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	4632      	mov	r2, r6
 800ad86:	463b      	mov	r3, r7
 800ad88:	4628      	mov	r0, r5
 800ad8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8e:	f000 b857 	b.w	800ae40 <_write_r>

0800ad92 <__sseek>:
 800ad92:	b510      	push	{r4, lr}
 800ad94:	460c      	mov	r4, r1
 800ad96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9a:	f000 f82d 	bl	800adf8 <_lseek_r>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	bf15      	itete	ne
 800ada4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ada6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800adae:	81a3      	strheq	r3, [r4, #12]
 800adb0:	bf18      	it	ne
 800adb2:	81a3      	strhne	r3, [r4, #12]
 800adb4:	bd10      	pop	{r4, pc}

0800adb6 <__sclose>:
 800adb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adba:	f000 b80d 	b.w	800add8 <_close_r>

0800adbe <memset>:
 800adbe:	4402      	add	r2, r0
 800adc0:	4603      	mov	r3, r0
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d100      	bne.n	800adc8 <memset+0xa>
 800adc6:	4770      	bx	lr
 800adc8:	f803 1b01 	strb.w	r1, [r3], #1
 800adcc:	e7f9      	b.n	800adc2 <memset+0x4>
	...

0800add0 <_localeconv_r>:
 800add0:	4800      	ldr	r0, [pc, #0]	@ (800add4 <_localeconv_r+0x4>)
 800add2:	4770      	bx	lr
 800add4:	20000268 	.word	0x20000268

0800add8 <_close_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4d06      	ldr	r5, [pc, #24]	@ (800adf4 <_close_r+0x1c>)
 800addc:	2300      	movs	r3, #0
 800adde:	4604      	mov	r4, r0
 800ade0:	4608      	mov	r0, r1
 800ade2:	602b      	str	r3, [r5, #0]
 800ade4:	f7f6 ff4c 	bl	8001c80 <_close>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_close_r+0x1a>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_close_r+0x1a>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20001938 	.word	0x20001938

0800adf8 <_lseek_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d07      	ldr	r5, [pc, #28]	@ (800ae18 <_lseek_r+0x20>)
 800adfc:	4604      	mov	r4, r0
 800adfe:	4608      	mov	r0, r1
 800ae00:	4611      	mov	r1, r2
 800ae02:	2200      	movs	r2, #0
 800ae04:	602a      	str	r2, [r5, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	f7f6 ff61 	bl	8001cce <_lseek>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_lseek_r+0x1e>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_lseek_r+0x1e>
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	20001938 	.word	0x20001938

0800ae1c <_read_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d07      	ldr	r5, [pc, #28]	@ (800ae3c <_read_r+0x20>)
 800ae20:	4604      	mov	r4, r0
 800ae22:	4608      	mov	r0, r1
 800ae24:	4611      	mov	r1, r2
 800ae26:	2200      	movs	r2, #0
 800ae28:	602a      	str	r2, [r5, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f7f6 ff0b 	bl	8001c46 <_read>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d102      	bne.n	800ae3a <_read_r+0x1e>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	b103      	cbz	r3, 800ae3a <_read_r+0x1e>
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	20001938 	.word	0x20001938

0800ae40 <_write_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d07      	ldr	r5, [pc, #28]	@ (800ae60 <_write_r+0x20>)
 800ae44:	4604      	mov	r4, r0
 800ae46:	4608      	mov	r0, r1
 800ae48:	4611      	mov	r1, r2
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	602a      	str	r2, [r5, #0]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	f7f6 f8f7 	bl	8001042 <_write>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d102      	bne.n	800ae5e <_write_r+0x1e>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	b103      	cbz	r3, 800ae5e <_write_r+0x1e>
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	20001938 	.word	0x20001938

0800ae64 <__errno>:
 800ae64:	4b01      	ldr	r3, [pc, #4]	@ (800ae6c <__errno+0x8>)
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	20000128 	.word	0x20000128

0800ae70 <__libc_init_array>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	4d0d      	ldr	r5, [pc, #52]	@ (800aea8 <__libc_init_array+0x38>)
 800ae74:	4c0d      	ldr	r4, [pc, #52]	@ (800aeac <__libc_init_array+0x3c>)
 800ae76:	1b64      	subs	r4, r4, r5
 800ae78:	10a4      	asrs	r4, r4, #2
 800ae7a:	2600      	movs	r6, #0
 800ae7c:	42a6      	cmp	r6, r4
 800ae7e:	d109      	bne.n	800ae94 <__libc_init_array+0x24>
 800ae80:	4d0b      	ldr	r5, [pc, #44]	@ (800aeb0 <__libc_init_array+0x40>)
 800ae82:	4c0c      	ldr	r4, [pc, #48]	@ (800aeb4 <__libc_init_array+0x44>)
 800ae84:	f003 fbf0 	bl	800e668 <_init>
 800ae88:	1b64      	subs	r4, r4, r5
 800ae8a:	10a4      	asrs	r4, r4, #2
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	42a6      	cmp	r6, r4
 800ae90:	d105      	bne.n	800ae9e <__libc_init_array+0x2e>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae98:	4798      	blx	r3
 800ae9a:	3601      	adds	r6, #1
 800ae9c:	e7ee      	b.n	800ae7c <__libc_init_array+0xc>
 800ae9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea2:	4798      	blx	r3
 800aea4:	3601      	adds	r6, #1
 800aea6:	e7f2      	b.n	800ae8e <__libc_init_array+0x1e>
 800aea8:	0800eb38 	.word	0x0800eb38
 800aeac:	0800eb38 	.word	0x0800eb38
 800aeb0:	0800eb38 	.word	0x0800eb38
 800aeb4:	0800eb3c 	.word	0x0800eb3c

0800aeb8 <__retarget_lock_init_recursive>:
 800aeb8:	4770      	bx	lr

0800aeba <__retarget_lock_acquire_recursive>:
 800aeba:	4770      	bx	lr

0800aebc <__retarget_lock_release_recursive>:
 800aebc:	4770      	bx	lr
	...

0800aec0 <nanf>:
 800aec0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aec8 <nanf+0x8>
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	7fc00000 	.word	0x7fc00000

0800aecc <quorem>:
 800aecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	6903      	ldr	r3, [r0, #16]
 800aed2:	690c      	ldr	r4, [r1, #16]
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	4607      	mov	r7, r0
 800aed8:	db7e      	blt.n	800afd8 <quorem+0x10c>
 800aeda:	3c01      	subs	r4, #1
 800aedc:	f101 0814 	add.w	r8, r1, #20
 800aee0:	00a3      	lsls	r3, r4, #2
 800aee2:	f100 0514 	add.w	r5, r0, #20
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aef2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aef6:	3301      	adds	r3, #1
 800aef8:	429a      	cmp	r2, r3
 800aefa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aefe:	fbb2 f6f3 	udiv	r6, r2, r3
 800af02:	d32e      	bcc.n	800af62 <quorem+0x96>
 800af04:	f04f 0a00 	mov.w	sl, #0
 800af08:	46c4      	mov	ip, r8
 800af0a:	46ae      	mov	lr, r5
 800af0c:	46d3      	mov	fp, sl
 800af0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af12:	b298      	uxth	r0, r3
 800af14:	fb06 a000 	mla	r0, r6, r0, sl
 800af18:	0c02      	lsrs	r2, r0, #16
 800af1a:	0c1b      	lsrs	r3, r3, #16
 800af1c:	fb06 2303 	mla	r3, r6, r3, r2
 800af20:	f8de 2000 	ldr.w	r2, [lr]
 800af24:	b280      	uxth	r0, r0
 800af26:	b292      	uxth	r2, r2
 800af28:	1a12      	subs	r2, r2, r0
 800af2a:	445a      	add	r2, fp
 800af2c:	f8de 0000 	ldr.w	r0, [lr]
 800af30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af34:	b29b      	uxth	r3, r3
 800af36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af3e:	b292      	uxth	r2, r2
 800af40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af44:	45e1      	cmp	r9, ip
 800af46:	f84e 2b04 	str.w	r2, [lr], #4
 800af4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af4e:	d2de      	bcs.n	800af0e <quorem+0x42>
 800af50:	9b00      	ldr	r3, [sp, #0]
 800af52:	58eb      	ldr	r3, [r5, r3]
 800af54:	b92b      	cbnz	r3, 800af62 <quorem+0x96>
 800af56:	9b01      	ldr	r3, [sp, #4]
 800af58:	3b04      	subs	r3, #4
 800af5a:	429d      	cmp	r5, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	d32f      	bcc.n	800afc0 <quorem+0xf4>
 800af60:	613c      	str	r4, [r7, #16]
 800af62:	4638      	mov	r0, r7
 800af64:	f001 f9c4 	bl	800c2f0 <__mcmp>
 800af68:	2800      	cmp	r0, #0
 800af6a:	db25      	blt.n	800afb8 <quorem+0xec>
 800af6c:	4629      	mov	r1, r5
 800af6e:	2000      	movs	r0, #0
 800af70:	f858 2b04 	ldr.w	r2, [r8], #4
 800af74:	f8d1 c000 	ldr.w	ip, [r1]
 800af78:	fa1f fe82 	uxth.w	lr, r2
 800af7c:	fa1f f38c 	uxth.w	r3, ip
 800af80:	eba3 030e 	sub.w	r3, r3, lr
 800af84:	4403      	add	r3, r0
 800af86:	0c12      	lsrs	r2, r2, #16
 800af88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af90:	b29b      	uxth	r3, r3
 800af92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af96:	45c1      	cmp	r9, r8
 800af98:	f841 3b04 	str.w	r3, [r1], #4
 800af9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afa0:	d2e6      	bcs.n	800af70 <quorem+0xa4>
 800afa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afaa:	b922      	cbnz	r2, 800afb6 <quorem+0xea>
 800afac:	3b04      	subs	r3, #4
 800afae:	429d      	cmp	r5, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	d30b      	bcc.n	800afcc <quorem+0x100>
 800afb4:	613c      	str	r4, [r7, #16]
 800afb6:	3601      	adds	r6, #1
 800afb8:	4630      	mov	r0, r6
 800afba:	b003      	add	sp, #12
 800afbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc0:	6812      	ldr	r2, [r2, #0]
 800afc2:	3b04      	subs	r3, #4
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	d1cb      	bne.n	800af60 <quorem+0x94>
 800afc8:	3c01      	subs	r4, #1
 800afca:	e7c6      	b.n	800af5a <quorem+0x8e>
 800afcc:	6812      	ldr	r2, [r2, #0]
 800afce:	3b04      	subs	r3, #4
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	d1ef      	bne.n	800afb4 <quorem+0xe8>
 800afd4:	3c01      	subs	r4, #1
 800afd6:	e7ea      	b.n	800afae <quorem+0xe2>
 800afd8:	2000      	movs	r0, #0
 800afda:	e7ee      	b.n	800afba <quorem+0xee>
 800afdc:	0000      	movs	r0, r0
	...

0800afe0 <_dtoa_r>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	69c7      	ldr	r7, [r0, #28]
 800afe6:	b099      	sub	sp, #100	@ 0x64
 800afe8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afec:	ec55 4b10 	vmov	r4, r5, d0
 800aff0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800aff2:	9109      	str	r1, [sp, #36]	@ 0x24
 800aff4:	4683      	mov	fp, r0
 800aff6:	920e      	str	r2, [sp, #56]	@ 0x38
 800aff8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800affa:	b97f      	cbnz	r7, 800b01c <_dtoa_r+0x3c>
 800affc:	2010      	movs	r0, #16
 800affe:	f000 fdfd 	bl	800bbfc <malloc>
 800b002:	4602      	mov	r2, r0
 800b004:	f8cb 001c 	str.w	r0, [fp, #28]
 800b008:	b920      	cbnz	r0, 800b014 <_dtoa_r+0x34>
 800b00a:	4ba7      	ldr	r3, [pc, #668]	@ (800b2a8 <_dtoa_r+0x2c8>)
 800b00c:	21ef      	movs	r1, #239	@ 0xef
 800b00e:	48a7      	ldr	r0, [pc, #668]	@ (800b2ac <_dtoa_r+0x2cc>)
 800b010:	f002 fc36 	bl	800d880 <__assert_func>
 800b014:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b018:	6007      	str	r7, [r0, #0]
 800b01a:	60c7      	str	r7, [r0, #12]
 800b01c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b020:	6819      	ldr	r1, [r3, #0]
 800b022:	b159      	cbz	r1, 800b03c <_dtoa_r+0x5c>
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	604a      	str	r2, [r1, #4]
 800b028:	2301      	movs	r3, #1
 800b02a:	4093      	lsls	r3, r2
 800b02c:	608b      	str	r3, [r1, #8]
 800b02e:	4658      	mov	r0, fp
 800b030:	f000 feda 	bl	800bde8 <_Bfree>
 800b034:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	1e2b      	subs	r3, r5, #0
 800b03e:	bfb9      	ittee	lt
 800b040:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b044:	9303      	strlt	r3, [sp, #12]
 800b046:	2300      	movge	r3, #0
 800b048:	6033      	strge	r3, [r6, #0]
 800b04a:	9f03      	ldr	r7, [sp, #12]
 800b04c:	4b98      	ldr	r3, [pc, #608]	@ (800b2b0 <_dtoa_r+0x2d0>)
 800b04e:	bfbc      	itt	lt
 800b050:	2201      	movlt	r2, #1
 800b052:	6032      	strlt	r2, [r6, #0]
 800b054:	43bb      	bics	r3, r7
 800b056:	d112      	bne.n	800b07e <_dtoa_r+0x9e>
 800b058:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b05a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b064:	4323      	orrs	r3, r4
 800b066:	f000 854d 	beq.w	800bb04 <_dtoa_r+0xb24>
 800b06a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b06c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b2c4 <_dtoa_r+0x2e4>
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 854f 	beq.w	800bb14 <_dtoa_r+0xb34>
 800b076:	f10a 0303 	add.w	r3, sl, #3
 800b07a:	f000 bd49 	b.w	800bb10 <_dtoa_r+0xb30>
 800b07e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b082:	2200      	movs	r2, #0
 800b084:	ec51 0b17 	vmov	r0, r1, d7
 800b088:	2300      	movs	r3, #0
 800b08a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b08e:	f7f5 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 800b092:	4680      	mov	r8, r0
 800b094:	b158      	cbz	r0, 800b0ae <_dtoa_r+0xce>
 800b096:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b098:	2301      	movs	r3, #1
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b09e:	b113      	cbz	r3, 800b0a6 <_dtoa_r+0xc6>
 800b0a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b0a2:	4b84      	ldr	r3, [pc, #528]	@ (800b2b4 <_dtoa_r+0x2d4>)
 800b0a4:	6013      	str	r3, [r2, #0]
 800b0a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b2c8 <_dtoa_r+0x2e8>
 800b0aa:	f000 bd33 	b.w	800bb14 <_dtoa_r+0xb34>
 800b0ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b0b2:	aa16      	add	r2, sp, #88	@ 0x58
 800b0b4:	a917      	add	r1, sp, #92	@ 0x5c
 800b0b6:	4658      	mov	r0, fp
 800b0b8:	f001 fa3a 	bl	800c530 <__d2b>
 800b0bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0c0:	4681      	mov	r9, r0
 800b0c2:	2e00      	cmp	r6, #0
 800b0c4:	d077      	beq.n	800b1b6 <_dtoa_r+0x1d6>
 800b0c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b0dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4b74      	ldr	r3, [pc, #464]	@ (800b2b8 <_dtoa_r+0x2d8>)
 800b0e6:	f7f5 f8d7 	bl	8000298 <__aeabi_dsub>
 800b0ea:	a369      	add	r3, pc, #420	@ (adr r3, 800b290 <_dtoa_r+0x2b0>)
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f7f5 fa8a 	bl	8000608 <__aeabi_dmul>
 800b0f4:	a368      	add	r3, pc, #416	@ (adr r3, 800b298 <_dtoa_r+0x2b8>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f7f5 f8cf 	bl	800029c <__adddf3>
 800b0fe:	4604      	mov	r4, r0
 800b100:	4630      	mov	r0, r6
 800b102:	460d      	mov	r5, r1
 800b104:	f7f5 fa16 	bl	8000534 <__aeabi_i2d>
 800b108:	a365      	add	r3, pc, #404	@ (adr r3, 800b2a0 <_dtoa_r+0x2c0>)
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f7f5 fa7b 	bl	8000608 <__aeabi_dmul>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	4620      	mov	r0, r4
 800b118:	4629      	mov	r1, r5
 800b11a:	f7f5 f8bf 	bl	800029c <__adddf3>
 800b11e:	4604      	mov	r4, r0
 800b120:	460d      	mov	r5, r1
 800b122:	f7f5 fd21 	bl	8000b68 <__aeabi_d2iz>
 800b126:	2200      	movs	r2, #0
 800b128:	4607      	mov	r7, r0
 800b12a:	2300      	movs	r3, #0
 800b12c:	4620      	mov	r0, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	f7f5 fcdc 	bl	8000aec <__aeabi_dcmplt>
 800b134:	b140      	cbz	r0, 800b148 <_dtoa_r+0x168>
 800b136:	4638      	mov	r0, r7
 800b138:	f7f5 f9fc 	bl	8000534 <__aeabi_i2d>
 800b13c:	4622      	mov	r2, r4
 800b13e:	462b      	mov	r3, r5
 800b140:	f7f5 fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 800b144:	b900      	cbnz	r0, 800b148 <_dtoa_r+0x168>
 800b146:	3f01      	subs	r7, #1
 800b148:	2f16      	cmp	r7, #22
 800b14a:	d851      	bhi.n	800b1f0 <_dtoa_r+0x210>
 800b14c:	4b5b      	ldr	r3, [pc, #364]	@ (800b2bc <_dtoa_r+0x2dc>)
 800b14e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b15a:	f7f5 fcc7 	bl	8000aec <__aeabi_dcmplt>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d048      	beq.n	800b1f4 <_dtoa_r+0x214>
 800b162:	3f01      	subs	r7, #1
 800b164:	2300      	movs	r3, #0
 800b166:	9312      	str	r3, [sp, #72]	@ 0x48
 800b168:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b16a:	1b9b      	subs	r3, r3, r6
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	bf44      	itt	mi
 800b170:	f1c3 0801 	rsbmi	r8, r3, #1
 800b174:	2300      	movmi	r3, #0
 800b176:	9208      	str	r2, [sp, #32]
 800b178:	bf54      	ite	pl
 800b17a:	f04f 0800 	movpl.w	r8, #0
 800b17e:	9308      	strmi	r3, [sp, #32]
 800b180:	2f00      	cmp	r7, #0
 800b182:	db39      	blt.n	800b1f8 <_dtoa_r+0x218>
 800b184:	9b08      	ldr	r3, [sp, #32]
 800b186:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b188:	443b      	add	r3, r7
 800b18a:	9308      	str	r3, [sp, #32]
 800b18c:	2300      	movs	r3, #0
 800b18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b192:	2b09      	cmp	r3, #9
 800b194:	d864      	bhi.n	800b260 <_dtoa_r+0x280>
 800b196:	2b05      	cmp	r3, #5
 800b198:	bfc4      	itt	gt
 800b19a:	3b04      	subgt	r3, #4
 800b19c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a0:	f1a3 0302 	sub.w	r3, r3, #2
 800b1a4:	bfcc      	ite	gt
 800b1a6:	2400      	movgt	r4, #0
 800b1a8:	2401      	movle	r4, #1
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d863      	bhi.n	800b276 <_dtoa_r+0x296>
 800b1ae:	e8df f003 	tbb	[pc, r3]
 800b1b2:	372a      	.short	0x372a
 800b1b4:	5535      	.short	0x5535
 800b1b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b1ba:	441e      	add	r6, r3
 800b1bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	bfc1      	itttt	gt
 800b1c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1c8:	409f      	lslgt	r7, r3
 800b1ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b1ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b1d2:	bfd6      	itet	le
 800b1d4:	f1c3 0320 	rsble	r3, r3, #32
 800b1d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b1dc:	fa04 f003 	lslle.w	r0, r4, r3
 800b1e0:	f7f5 f998 	bl	8000514 <__aeabi_ui2d>
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b1ea:	3e01      	subs	r6, #1
 800b1ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800b1ee:	e777      	b.n	800b0e0 <_dtoa_r+0x100>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e7b8      	b.n	800b166 <_dtoa_r+0x186>
 800b1f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b1f6:	e7b7      	b.n	800b168 <_dtoa_r+0x188>
 800b1f8:	427b      	negs	r3, r7
 800b1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	eba8 0807 	sub.w	r8, r8, r7
 800b202:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b204:	e7c4      	b.n	800b190 <_dtoa_r+0x1b0>
 800b206:	2300      	movs	r3, #0
 800b208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dc35      	bgt.n	800b27c <_dtoa_r+0x29c>
 800b210:	2301      	movs	r3, #1
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	9307      	str	r3, [sp, #28]
 800b216:	461a      	mov	r2, r3
 800b218:	920e      	str	r2, [sp, #56]	@ 0x38
 800b21a:	e00b      	b.n	800b234 <_dtoa_r+0x254>
 800b21c:	2301      	movs	r3, #1
 800b21e:	e7f3      	b.n	800b208 <_dtoa_r+0x228>
 800b220:	2300      	movs	r3, #0
 800b222:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b226:	18fb      	adds	r3, r7, r3
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	3301      	adds	r3, #1
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	9307      	str	r3, [sp, #28]
 800b230:	bfb8      	it	lt
 800b232:	2301      	movlt	r3, #1
 800b234:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b238:	2100      	movs	r1, #0
 800b23a:	2204      	movs	r2, #4
 800b23c:	f102 0514 	add.w	r5, r2, #20
 800b240:	429d      	cmp	r5, r3
 800b242:	d91f      	bls.n	800b284 <_dtoa_r+0x2a4>
 800b244:	6041      	str	r1, [r0, #4]
 800b246:	4658      	mov	r0, fp
 800b248:	f000 fd8e 	bl	800bd68 <_Balloc>
 800b24c:	4682      	mov	sl, r0
 800b24e:	2800      	cmp	r0, #0
 800b250:	d13c      	bne.n	800b2cc <_dtoa_r+0x2ec>
 800b252:	4b1b      	ldr	r3, [pc, #108]	@ (800b2c0 <_dtoa_r+0x2e0>)
 800b254:	4602      	mov	r2, r0
 800b256:	f240 11af 	movw	r1, #431	@ 0x1af
 800b25a:	e6d8      	b.n	800b00e <_dtoa_r+0x2e>
 800b25c:	2301      	movs	r3, #1
 800b25e:	e7e0      	b.n	800b222 <_dtoa_r+0x242>
 800b260:	2401      	movs	r4, #1
 800b262:	2300      	movs	r3, #0
 800b264:	9309      	str	r3, [sp, #36]	@ 0x24
 800b266:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b268:	f04f 33ff 	mov.w	r3, #4294967295
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	9307      	str	r3, [sp, #28]
 800b270:	2200      	movs	r2, #0
 800b272:	2312      	movs	r3, #18
 800b274:	e7d0      	b.n	800b218 <_dtoa_r+0x238>
 800b276:	2301      	movs	r3, #1
 800b278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b27a:	e7f5      	b.n	800b268 <_dtoa_r+0x288>
 800b27c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	9307      	str	r3, [sp, #28]
 800b282:	e7d7      	b.n	800b234 <_dtoa_r+0x254>
 800b284:	3101      	adds	r1, #1
 800b286:	0052      	lsls	r2, r2, #1
 800b288:	e7d8      	b.n	800b23c <_dtoa_r+0x25c>
 800b28a:	bf00      	nop
 800b28c:	f3af 8000 	nop.w
 800b290:	636f4361 	.word	0x636f4361
 800b294:	3fd287a7 	.word	0x3fd287a7
 800b298:	8b60c8b3 	.word	0x8b60c8b3
 800b29c:	3fc68a28 	.word	0x3fc68a28
 800b2a0:	509f79fb 	.word	0x509f79fb
 800b2a4:	3fd34413 	.word	0x3fd34413
 800b2a8:	0800e746 	.word	0x0800e746
 800b2ac:	0800e75d 	.word	0x0800e75d
 800b2b0:	7ff00000 	.word	0x7ff00000
 800b2b4:	0800e711 	.word	0x0800e711
 800b2b8:	3ff80000 	.word	0x3ff80000
 800b2bc:	0800e858 	.word	0x0800e858
 800b2c0:	0800e7b5 	.word	0x0800e7b5
 800b2c4:	0800e742 	.word	0x0800e742
 800b2c8:	0800e710 	.word	0x0800e710
 800b2cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b2d0:	6018      	str	r0, [r3, #0]
 800b2d2:	9b07      	ldr	r3, [sp, #28]
 800b2d4:	2b0e      	cmp	r3, #14
 800b2d6:	f200 80a4 	bhi.w	800b422 <_dtoa_r+0x442>
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	f000 80a1 	beq.w	800b422 <_dtoa_r+0x442>
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	dd33      	ble.n	800b34c <_dtoa_r+0x36c>
 800b2e4:	4bad      	ldr	r3, [pc, #692]	@ (800b59c <_dtoa_r+0x5bc>)
 800b2e6:	f007 020f 	and.w	r2, r7, #15
 800b2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ee:	ed93 7b00 	vldr	d7, [r3]
 800b2f2:	05f8      	lsls	r0, r7, #23
 800b2f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b2fc:	d516      	bpl.n	800b32c <_dtoa_r+0x34c>
 800b2fe:	4ba8      	ldr	r3, [pc, #672]	@ (800b5a0 <_dtoa_r+0x5c0>)
 800b300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b308:	f7f5 faa8 	bl	800085c <__aeabi_ddiv>
 800b30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b310:	f004 040f 	and.w	r4, r4, #15
 800b314:	2603      	movs	r6, #3
 800b316:	4da2      	ldr	r5, [pc, #648]	@ (800b5a0 <_dtoa_r+0x5c0>)
 800b318:	b954      	cbnz	r4, 800b330 <_dtoa_r+0x350>
 800b31a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b322:	f7f5 fa9b 	bl	800085c <__aeabi_ddiv>
 800b326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b32a:	e028      	b.n	800b37e <_dtoa_r+0x39e>
 800b32c:	2602      	movs	r6, #2
 800b32e:	e7f2      	b.n	800b316 <_dtoa_r+0x336>
 800b330:	07e1      	lsls	r1, r4, #31
 800b332:	d508      	bpl.n	800b346 <_dtoa_r+0x366>
 800b334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b33c:	f7f5 f964 	bl	8000608 <__aeabi_dmul>
 800b340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b344:	3601      	adds	r6, #1
 800b346:	1064      	asrs	r4, r4, #1
 800b348:	3508      	adds	r5, #8
 800b34a:	e7e5      	b.n	800b318 <_dtoa_r+0x338>
 800b34c:	f000 80d2 	beq.w	800b4f4 <_dtoa_r+0x514>
 800b350:	427c      	negs	r4, r7
 800b352:	4b92      	ldr	r3, [pc, #584]	@ (800b59c <_dtoa_r+0x5bc>)
 800b354:	4d92      	ldr	r5, [pc, #584]	@ (800b5a0 <_dtoa_r+0x5c0>)
 800b356:	f004 020f 	and.w	r2, r4, #15
 800b35a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b366:	f7f5 f94f 	bl	8000608 <__aeabi_dmul>
 800b36a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b36e:	1124      	asrs	r4, r4, #4
 800b370:	2300      	movs	r3, #0
 800b372:	2602      	movs	r6, #2
 800b374:	2c00      	cmp	r4, #0
 800b376:	f040 80b2 	bne.w	800b4de <_dtoa_r+0x4fe>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1d3      	bne.n	800b326 <_dtoa_r+0x346>
 800b37e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b380:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 80b7 	beq.w	800b4f8 <_dtoa_r+0x518>
 800b38a:	4b86      	ldr	r3, [pc, #536]	@ (800b5a4 <_dtoa_r+0x5c4>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	4620      	mov	r0, r4
 800b390:	4629      	mov	r1, r5
 800b392:	f7f5 fbab 	bl	8000aec <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	f000 80ae 	beq.w	800b4f8 <_dtoa_r+0x518>
 800b39c:	9b07      	ldr	r3, [sp, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 80aa 	beq.w	800b4f8 <_dtoa_r+0x518>
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	dd37      	ble.n	800b41a <_dtoa_r+0x43a>
 800b3aa:	1e7b      	subs	r3, r7, #1
 800b3ac:	9304      	str	r3, [sp, #16]
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	4b7d      	ldr	r3, [pc, #500]	@ (800b5a8 <_dtoa_r+0x5c8>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7f5 f927 	bl	8000608 <__aeabi_dmul>
 800b3ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3be:	9c00      	ldr	r4, [sp, #0]
 800b3c0:	3601      	adds	r6, #1
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7f5 f8b6 	bl	8000534 <__aeabi_i2d>
 800b3c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3cc:	f7f5 f91c 	bl	8000608 <__aeabi_dmul>
 800b3d0:	4b76      	ldr	r3, [pc, #472]	@ (800b5ac <_dtoa_r+0x5cc>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f7f4 ff62 	bl	800029c <__adddf3>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b3de:	2c00      	cmp	r4, #0
 800b3e0:	f040 808d 	bne.w	800b4fe <_dtoa_r+0x51e>
 800b3e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e8:	4b71      	ldr	r3, [pc, #452]	@ (800b5b0 <_dtoa_r+0x5d0>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f7f4 ff54 	bl	8000298 <__aeabi_dsub>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3f8:	462a      	mov	r2, r5
 800b3fa:	4633      	mov	r3, r6
 800b3fc:	f7f5 fb94 	bl	8000b28 <__aeabi_dcmpgt>
 800b400:	2800      	cmp	r0, #0
 800b402:	f040 828b 	bne.w	800b91c <_dtoa_r+0x93c>
 800b406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b40a:	462a      	mov	r2, r5
 800b40c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b410:	f7f5 fb6c 	bl	8000aec <__aeabi_dcmplt>
 800b414:	2800      	cmp	r0, #0
 800b416:	f040 8128 	bne.w	800b66a <_dtoa_r+0x68a>
 800b41a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b41e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b422:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b424:	2b00      	cmp	r3, #0
 800b426:	f2c0 815a 	blt.w	800b6de <_dtoa_r+0x6fe>
 800b42a:	2f0e      	cmp	r7, #14
 800b42c:	f300 8157 	bgt.w	800b6de <_dtoa_r+0x6fe>
 800b430:	4b5a      	ldr	r3, [pc, #360]	@ (800b59c <_dtoa_r+0x5bc>)
 800b432:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b436:	ed93 7b00 	vldr	d7, [r3]
 800b43a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	ed8d 7b00 	vstr	d7, [sp]
 800b442:	da03      	bge.n	800b44c <_dtoa_r+0x46c>
 800b444:	9b07      	ldr	r3, [sp, #28]
 800b446:	2b00      	cmp	r3, #0
 800b448:	f340 8101 	ble.w	800b64e <_dtoa_r+0x66e>
 800b44c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b450:	4656      	mov	r6, sl
 800b452:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b456:	4620      	mov	r0, r4
 800b458:	4629      	mov	r1, r5
 800b45a:	f7f5 f9ff 	bl	800085c <__aeabi_ddiv>
 800b45e:	f7f5 fb83 	bl	8000b68 <__aeabi_d2iz>
 800b462:	4680      	mov	r8, r0
 800b464:	f7f5 f866 	bl	8000534 <__aeabi_i2d>
 800b468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b46c:	f7f5 f8cc 	bl	8000608 <__aeabi_dmul>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4620      	mov	r0, r4
 800b476:	4629      	mov	r1, r5
 800b478:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b47c:	f7f4 ff0c 	bl	8000298 <__aeabi_dsub>
 800b480:	f806 4b01 	strb.w	r4, [r6], #1
 800b484:	9d07      	ldr	r5, [sp, #28]
 800b486:	eba6 040a 	sub.w	r4, r6, sl
 800b48a:	42a5      	cmp	r5, r4
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	f040 8117 	bne.w	800b6c2 <_dtoa_r+0x6e2>
 800b494:	f7f4 ff02 	bl	800029c <__adddf3>
 800b498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b49c:	4604      	mov	r4, r0
 800b49e:	460d      	mov	r5, r1
 800b4a0:	f7f5 fb42 	bl	8000b28 <__aeabi_dcmpgt>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f040 80f9 	bne.w	800b69c <_dtoa_r+0x6bc>
 800b4aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7f5 fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4b6:	b118      	cbz	r0, 800b4c0 <_dtoa_r+0x4e0>
 800b4b8:	f018 0f01 	tst.w	r8, #1
 800b4bc:	f040 80ee 	bne.w	800b69c <_dtoa_r+0x6bc>
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	4658      	mov	r0, fp
 800b4c4:	f000 fc90 	bl	800bde8 <_Bfree>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	7033      	strb	r3, [r6, #0]
 800b4cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4ce:	3701      	adds	r7, #1
 800b4d0:	601f      	str	r7, [r3, #0]
 800b4d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f000 831d 	beq.w	800bb14 <_dtoa_r+0xb34>
 800b4da:	601e      	str	r6, [r3, #0]
 800b4dc:	e31a      	b.n	800bb14 <_dtoa_r+0xb34>
 800b4de:	07e2      	lsls	r2, r4, #31
 800b4e0:	d505      	bpl.n	800b4ee <_dtoa_r+0x50e>
 800b4e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4e6:	f7f5 f88f 	bl	8000608 <__aeabi_dmul>
 800b4ea:	3601      	adds	r6, #1
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	1064      	asrs	r4, r4, #1
 800b4f0:	3508      	adds	r5, #8
 800b4f2:	e73f      	b.n	800b374 <_dtoa_r+0x394>
 800b4f4:	2602      	movs	r6, #2
 800b4f6:	e742      	b.n	800b37e <_dtoa_r+0x39e>
 800b4f8:	9c07      	ldr	r4, [sp, #28]
 800b4fa:	9704      	str	r7, [sp, #16]
 800b4fc:	e761      	b.n	800b3c2 <_dtoa_r+0x3e2>
 800b4fe:	4b27      	ldr	r3, [pc, #156]	@ (800b59c <_dtoa_r+0x5bc>)
 800b500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b506:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b50a:	4454      	add	r4, sl
 800b50c:	2900      	cmp	r1, #0
 800b50e:	d053      	beq.n	800b5b8 <_dtoa_r+0x5d8>
 800b510:	4928      	ldr	r1, [pc, #160]	@ (800b5b4 <_dtoa_r+0x5d4>)
 800b512:	2000      	movs	r0, #0
 800b514:	f7f5 f9a2 	bl	800085c <__aeabi_ddiv>
 800b518:	4633      	mov	r3, r6
 800b51a:	462a      	mov	r2, r5
 800b51c:	f7f4 febc 	bl	8000298 <__aeabi_dsub>
 800b520:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b524:	4656      	mov	r6, sl
 800b526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b52a:	f7f5 fb1d 	bl	8000b68 <__aeabi_d2iz>
 800b52e:	4605      	mov	r5, r0
 800b530:	f7f5 f800 	bl	8000534 <__aeabi_i2d>
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b53c:	f7f4 feac 	bl	8000298 <__aeabi_dsub>
 800b540:	3530      	adds	r5, #48	@ 0x30
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b54a:	f806 5b01 	strb.w	r5, [r6], #1
 800b54e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b552:	f7f5 facb 	bl	8000aec <__aeabi_dcmplt>
 800b556:	2800      	cmp	r0, #0
 800b558:	d171      	bne.n	800b63e <_dtoa_r+0x65e>
 800b55a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b55e:	4911      	ldr	r1, [pc, #68]	@ (800b5a4 <_dtoa_r+0x5c4>)
 800b560:	2000      	movs	r0, #0
 800b562:	f7f4 fe99 	bl	8000298 <__aeabi_dsub>
 800b566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b56a:	f7f5 fabf 	bl	8000aec <__aeabi_dcmplt>
 800b56e:	2800      	cmp	r0, #0
 800b570:	f040 8095 	bne.w	800b69e <_dtoa_r+0x6be>
 800b574:	42a6      	cmp	r6, r4
 800b576:	f43f af50 	beq.w	800b41a <_dtoa_r+0x43a>
 800b57a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b57e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <_dtoa_r+0x5c8>)
 800b580:	2200      	movs	r2, #0
 800b582:	f7f5 f841 	bl	8000608 <__aeabi_dmul>
 800b586:	4b08      	ldr	r3, [pc, #32]	@ (800b5a8 <_dtoa_r+0x5c8>)
 800b588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b58c:	2200      	movs	r2, #0
 800b58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b592:	f7f5 f839 	bl	8000608 <__aeabi_dmul>
 800b596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b59a:	e7c4      	b.n	800b526 <_dtoa_r+0x546>
 800b59c:	0800e858 	.word	0x0800e858
 800b5a0:	0800e830 	.word	0x0800e830
 800b5a4:	3ff00000 	.word	0x3ff00000
 800b5a8:	40240000 	.word	0x40240000
 800b5ac:	401c0000 	.word	0x401c0000
 800b5b0:	40140000 	.word	0x40140000
 800b5b4:	3fe00000 	.word	0x3fe00000
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f7f5 f824 	bl	8000608 <__aeabi_dmul>
 800b5c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b5c6:	4656      	mov	r6, sl
 800b5c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5cc:	f7f5 facc 	bl	8000b68 <__aeabi_d2iz>
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	f7f4 ffaf 	bl	8000534 <__aeabi_i2d>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5de:	f7f4 fe5b 	bl	8000298 <__aeabi_dsub>
 800b5e2:	3530      	adds	r5, #48	@ 0x30
 800b5e4:	f806 5b01 	strb.w	r5, [r6], #1
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	42a6      	cmp	r6, r4
 800b5ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5f2:	f04f 0200 	mov.w	r2, #0
 800b5f6:	d124      	bne.n	800b642 <_dtoa_r+0x662>
 800b5f8:	4bac      	ldr	r3, [pc, #688]	@ (800b8ac <_dtoa_r+0x8cc>)
 800b5fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5fe:	f7f4 fe4d 	bl	800029c <__adddf3>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b60a:	f7f5 fa8d 	bl	8000b28 <__aeabi_dcmpgt>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d145      	bne.n	800b69e <_dtoa_r+0x6be>
 800b612:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b616:	49a5      	ldr	r1, [pc, #660]	@ (800b8ac <_dtoa_r+0x8cc>)
 800b618:	2000      	movs	r0, #0
 800b61a:	f7f4 fe3d 	bl	8000298 <__aeabi_dsub>
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b626:	f7f5 fa61 	bl	8000aec <__aeabi_dcmplt>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f aef5 	beq.w	800b41a <_dtoa_r+0x43a>
 800b630:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b632:	1e73      	subs	r3, r6, #1
 800b634:	9315      	str	r3, [sp, #84]	@ 0x54
 800b636:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b63a:	2b30      	cmp	r3, #48	@ 0x30
 800b63c:	d0f8      	beq.n	800b630 <_dtoa_r+0x650>
 800b63e:	9f04      	ldr	r7, [sp, #16]
 800b640:	e73e      	b.n	800b4c0 <_dtoa_r+0x4e0>
 800b642:	4b9b      	ldr	r3, [pc, #620]	@ (800b8b0 <_dtoa_r+0x8d0>)
 800b644:	f7f4 ffe0 	bl	8000608 <__aeabi_dmul>
 800b648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b64c:	e7bc      	b.n	800b5c8 <_dtoa_r+0x5e8>
 800b64e:	d10c      	bne.n	800b66a <_dtoa_r+0x68a>
 800b650:	4b98      	ldr	r3, [pc, #608]	@ (800b8b4 <_dtoa_r+0x8d4>)
 800b652:	2200      	movs	r2, #0
 800b654:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b658:	f7f4 ffd6 	bl	8000608 <__aeabi_dmul>
 800b65c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b660:	f7f5 fa58 	bl	8000b14 <__aeabi_dcmpge>
 800b664:	2800      	cmp	r0, #0
 800b666:	f000 8157 	beq.w	800b918 <_dtoa_r+0x938>
 800b66a:	2400      	movs	r4, #0
 800b66c:	4625      	mov	r5, r4
 800b66e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b670:	43db      	mvns	r3, r3
 800b672:	9304      	str	r3, [sp, #16]
 800b674:	4656      	mov	r6, sl
 800b676:	2700      	movs	r7, #0
 800b678:	4621      	mov	r1, r4
 800b67a:	4658      	mov	r0, fp
 800b67c:	f000 fbb4 	bl	800bde8 <_Bfree>
 800b680:	2d00      	cmp	r5, #0
 800b682:	d0dc      	beq.n	800b63e <_dtoa_r+0x65e>
 800b684:	b12f      	cbz	r7, 800b692 <_dtoa_r+0x6b2>
 800b686:	42af      	cmp	r7, r5
 800b688:	d003      	beq.n	800b692 <_dtoa_r+0x6b2>
 800b68a:	4639      	mov	r1, r7
 800b68c:	4658      	mov	r0, fp
 800b68e:	f000 fbab 	bl	800bde8 <_Bfree>
 800b692:	4629      	mov	r1, r5
 800b694:	4658      	mov	r0, fp
 800b696:	f000 fba7 	bl	800bde8 <_Bfree>
 800b69a:	e7d0      	b.n	800b63e <_dtoa_r+0x65e>
 800b69c:	9704      	str	r7, [sp, #16]
 800b69e:	4633      	mov	r3, r6
 800b6a0:	461e      	mov	r6, r3
 800b6a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6a6:	2a39      	cmp	r2, #57	@ 0x39
 800b6a8:	d107      	bne.n	800b6ba <_dtoa_r+0x6da>
 800b6aa:	459a      	cmp	sl, r3
 800b6ac:	d1f8      	bne.n	800b6a0 <_dtoa_r+0x6c0>
 800b6ae:	9a04      	ldr	r2, [sp, #16]
 800b6b0:	3201      	adds	r2, #1
 800b6b2:	9204      	str	r2, [sp, #16]
 800b6b4:	2230      	movs	r2, #48	@ 0x30
 800b6b6:	f88a 2000 	strb.w	r2, [sl]
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	3201      	adds	r2, #1
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	e7bd      	b.n	800b63e <_dtoa_r+0x65e>
 800b6c2:	4b7b      	ldr	r3, [pc, #492]	@ (800b8b0 <_dtoa_r+0x8d0>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f7f4 ff9f 	bl	8000608 <__aeabi_dmul>
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	f7f5 fa01 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f43f aebb 	beq.w	800b452 <_dtoa_r+0x472>
 800b6dc:	e6f0      	b.n	800b4c0 <_dtoa_r+0x4e0>
 800b6de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6e0:	2a00      	cmp	r2, #0
 800b6e2:	f000 80db 	beq.w	800b89c <_dtoa_r+0x8bc>
 800b6e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6e8:	2a01      	cmp	r2, #1
 800b6ea:	f300 80bf 	bgt.w	800b86c <_dtoa_r+0x88c>
 800b6ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	f000 80b7 	beq.w	800b864 <_dtoa_r+0x884>
 800b6f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b6fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6fc:	4646      	mov	r6, r8
 800b6fe:	9a08      	ldr	r2, [sp, #32]
 800b700:	2101      	movs	r1, #1
 800b702:	441a      	add	r2, r3
 800b704:	4658      	mov	r0, fp
 800b706:	4498      	add	r8, r3
 800b708:	9208      	str	r2, [sp, #32]
 800b70a:	f000 fc6b 	bl	800bfe4 <__i2b>
 800b70e:	4605      	mov	r5, r0
 800b710:	b15e      	cbz	r6, 800b72a <_dtoa_r+0x74a>
 800b712:	9b08      	ldr	r3, [sp, #32]
 800b714:	2b00      	cmp	r3, #0
 800b716:	dd08      	ble.n	800b72a <_dtoa_r+0x74a>
 800b718:	42b3      	cmp	r3, r6
 800b71a:	9a08      	ldr	r2, [sp, #32]
 800b71c:	bfa8      	it	ge
 800b71e:	4633      	movge	r3, r6
 800b720:	eba8 0803 	sub.w	r8, r8, r3
 800b724:	1af6      	subs	r6, r6, r3
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	9308      	str	r3, [sp, #32]
 800b72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b72c:	b1f3      	cbz	r3, 800b76c <_dtoa_r+0x78c>
 800b72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 80b7 	beq.w	800b8a4 <_dtoa_r+0x8c4>
 800b736:	b18c      	cbz	r4, 800b75c <_dtoa_r+0x77c>
 800b738:	4629      	mov	r1, r5
 800b73a:	4622      	mov	r2, r4
 800b73c:	4658      	mov	r0, fp
 800b73e:	f000 fd11 	bl	800c164 <__pow5mult>
 800b742:	464a      	mov	r2, r9
 800b744:	4601      	mov	r1, r0
 800b746:	4605      	mov	r5, r0
 800b748:	4658      	mov	r0, fp
 800b74a:	f000 fc61 	bl	800c010 <__multiply>
 800b74e:	4649      	mov	r1, r9
 800b750:	9004      	str	r0, [sp, #16]
 800b752:	4658      	mov	r0, fp
 800b754:	f000 fb48 	bl	800bde8 <_Bfree>
 800b758:	9b04      	ldr	r3, [sp, #16]
 800b75a:	4699      	mov	r9, r3
 800b75c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b75e:	1b1a      	subs	r2, r3, r4
 800b760:	d004      	beq.n	800b76c <_dtoa_r+0x78c>
 800b762:	4649      	mov	r1, r9
 800b764:	4658      	mov	r0, fp
 800b766:	f000 fcfd 	bl	800c164 <__pow5mult>
 800b76a:	4681      	mov	r9, r0
 800b76c:	2101      	movs	r1, #1
 800b76e:	4658      	mov	r0, fp
 800b770:	f000 fc38 	bl	800bfe4 <__i2b>
 800b774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b776:	4604      	mov	r4, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 81cf 	beq.w	800bb1c <_dtoa_r+0xb3c>
 800b77e:	461a      	mov	r2, r3
 800b780:	4601      	mov	r1, r0
 800b782:	4658      	mov	r0, fp
 800b784:	f000 fcee 	bl	800c164 <__pow5mult>
 800b788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	4604      	mov	r4, r0
 800b78e:	f300 8095 	bgt.w	800b8bc <_dtoa_r+0x8dc>
 800b792:	9b02      	ldr	r3, [sp, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f040 8087 	bne.w	800b8a8 <_dtoa_r+0x8c8>
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f040 8089 	bne.w	800b8b8 <_dtoa_r+0x8d8>
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7ac:	0d1b      	lsrs	r3, r3, #20
 800b7ae:	051b      	lsls	r3, r3, #20
 800b7b0:	b12b      	cbz	r3, 800b7be <_dtoa_r+0x7de>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	9308      	str	r3, [sp, #32]
 800b7b8:	f108 0801 	add.w	r8, r8, #1
 800b7bc:	2301      	movs	r3, #1
 800b7be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 81b0 	beq.w	800bb28 <_dtoa_r+0xb48>
 800b7c8:	6923      	ldr	r3, [r4, #16]
 800b7ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7ce:	6918      	ldr	r0, [r3, #16]
 800b7d0:	f000 fbbc 	bl	800bf4c <__hi0bits>
 800b7d4:	f1c0 0020 	rsb	r0, r0, #32
 800b7d8:	9b08      	ldr	r3, [sp, #32]
 800b7da:	4418      	add	r0, r3
 800b7dc:	f010 001f 	ands.w	r0, r0, #31
 800b7e0:	d077      	beq.n	800b8d2 <_dtoa_r+0x8f2>
 800b7e2:	f1c0 0320 	rsb	r3, r0, #32
 800b7e6:	2b04      	cmp	r3, #4
 800b7e8:	dd6b      	ble.n	800b8c2 <_dtoa_r+0x8e2>
 800b7ea:	9b08      	ldr	r3, [sp, #32]
 800b7ec:	f1c0 001c 	rsb	r0, r0, #28
 800b7f0:	4403      	add	r3, r0
 800b7f2:	4480      	add	r8, r0
 800b7f4:	4406      	add	r6, r0
 800b7f6:	9308      	str	r3, [sp, #32]
 800b7f8:	f1b8 0f00 	cmp.w	r8, #0
 800b7fc:	dd05      	ble.n	800b80a <_dtoa_r+0x82a>
 800b7fe:	4649      	mov	r1, r9
 800b800:	4642      	mov	r2, r8
 800b802:	4658      	mov	r0, fp
 800b804:	f000 fd08 	bl	800c218 <__lshift>
 800b808:	4681      	mov	r9, r0
 800b80a:	9b08      	ldr	r3, [sp, #32]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	dd05      	ble.n	800b81c <_dtoa_r+0x83c>
 800b810:	4621      	mov	r1, r4
 800b812:	461a      	mov	r2, r3
 800b814:	4658      	mov	r0, fp
 800b816:	f000 fcff 	bl	800c218 <__lshift>
 800b81a:	4604      	mov	r4, r0
 800b81c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d059      	beq.n	800b8d6 <_dtoa_r+0x8f6>
 800b822:	4621      	mov	r1, r4
 800b824:	4648      	mov	r0, r9
 800b826:	f000 fd63 	bl	800c2f0 <__mcmp>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	da53      	bge.n	800b8d6 <_dtoa_r+0x8f6>
 800b82e:	1e7b      	subs	r3, r7, #1
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	4649      	mov	r1, r9
 800b834:	2300      	movs	r3, #0
 800b836:	220a      	movs	r2, #10
 800b838:	4658      	mov	r0, fp
 800b83a:	f000 faf7 	bl	800be2c <__multadd>
 800b83e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b840:	4681      	mov	r9, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 8172 	beq.w	800bb2c <_dtoa_r+0xb4c>
 800b848:	2300      	movs	r3, #0
 800b84a:	4629      	mov	r1, r5
 800b84c:	220a      	movs	r2, #10
 800b84e:	4658      	mov	r0, fp
 800b850:	f000 faec 	bl	800be2c <__multadd>
 800b854:	9b00      	ldr	r3, [sp, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	4605      	mov	r5, r0
 800b85a:	dc67      	bgt.n	800b92c <_dtoa_r+0x94c>
 800b85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85e:	2b02      	cmp	r3, #2
 800b860:	dc41      	bgt.n	800b8e6 <_dtoa_r+0x906>
 800b862:	e063      	b.n	800b92c <_dtoa_r+0x94c>
 800b864:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b866:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b86a:	e746      	b.n	800b6fa <_dtoa_r+0x71a>
 800b86c:	9b07      	ldr	r3, [sp, #28]
 800b86e:	1e5c      	subs	r4, r3, #1
 800b870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b872:	42a3      	cmp	r3, r4
 800b874:	bfbf      	itttt	lt
 800b876:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b878:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b87a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b87c:	1ae3      	sublt	r3, r4, r3
 800b87e:	bfb4      	ite	lt
 800b880:	18d2      	addlt	r2, r2, r3
 800b882:	1b1c      	subge	r4, r3, r4
 800b884:	9b07      	ldr	r3, [sp, #28]
 800b886:	bfbc      	itt	lt
 800b888:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b88a:	2400      	movlt	r4, #0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bfb5      	itete	lt
 800b890:	eba8 0603 	sublt.w	r6, r8, r3
 800b894:	9b07      	ldrge	r3, [sp, #28]
 800b896:	2300      	movlt	r3, #0
 800b898:	4646      	movge	r6, r8
 800b89a:	e730      	b.n	800b6fe <_dtoa_r+0x71e>
 800b89c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b89e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b8a0:	4646      	mov	r6, r8
 800b8a2:	e735      	b.n	800b710 <_dtoa_r+0x730>
 800b8a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8a6:	e75c      	b.n	800b762 <_dtoa_r+0x782>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	e788      	b.n	800b7be <_dtoa_r+0x7de>
 800b8ac:	3fe00000 	.word	0x3fe00000
 800b8b0:	40240000 	.word	0x40240000
 800b8b4:	40140000 	.word	0x40140000
 800b8b8:	9b02      	ldr	r3, [sp, #8]
 800b8ba:	e780      	b.n	800b7be <_dtoa_r+0x7de>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8c0:	e782      	b.n	800b7c8 <_dtoa_r+0x7e8>
 800b8c2:	d099      	beq.n	800b7f8 <_dtoa_r+0x818>
 800b8c4:	9a08      	ldr	r2, [sp, #32]
 800b8c6:	331c      	adds	r3, #28
 800b8c8:	441a      	add	r2, r3
 800b8ca:	4498      	add	r8, r3
 800b8cc:	441e      	add	r6, r3
 800b8ce:	9208      	str	r2, [sp, #32]
 800b8d0:	e792      	b.n	800b7f8 <_dtoa_r+0x818>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	e7f6      	b.n	800b8c4 <_dtoa_r+0x8e4>
 800b8d6:	9b07      	ldr	r3, [sp, #28]
 800b8d8:	9704      	str	r7, [sp, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	dc20      	bgt.n	800b920 <_dtoa_r+0x940>
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	dd1e      	ble.n	800b924 <_dtoa_r+0x944>
 800b8e6:	9b00      	ldr	r3, [sp, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f47f aec0 	bne.w	800b66e <_dtoa_r+0x68e>
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	2205      	movs	r2, #5
 800b8f2:	4658      	mov	r0, fp
 800b8f4:	f000 fa9a 	bl	800be2c <__multadd>
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4648      	mov	r0, r9
 800b8fe:	f000 fcf7 	bl	800c2f0 <__mcmp>
 800b902:	2800      	cmp	r0, #0
 800b904:	f77f aeb3 	ble.w	800b66e <_dtoa_r+0x68e>
 800b908:	4656      	mov	r6, sl
 800b90a:	2331      	movs	r3, #49	@ 0x31
 800b90c:	f806 3b01 	strb.w	r3, [r6], #1
 800b910:	9b04      	ldr	r3, [sp, #16]
 800b912:	3301      	adds	r3, #1
 800b914:	9304      	str	r3, [sp, #16]
 800b916:	e6ae      	b.n	800b676 <_dtoa_r+0x696>
 800b918:	9c07      	ldr	r4, [sp, #28]
 800b91a:	9704      	str	r7, [sp, #16]
 800b91c:	4625      	mov	r5, r4
 800b91e:	e7f3      	b.n	800b908 <_dtoa_r+0x928>
 800b920:	9b07      	ldr	r3, [sp, #28]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 8104 	beq.w	800bb34 <_dtoa_r+0xb54>
 800b92c:	2e00      	cmp	r6, #0
 800b92e:	dd05      	ble.n	800b93c <_dtoa_r+0x95c>
 800b930:	4629      	mov	r1, r5
 800b932:	4632      	mov	r2, r6
 800b934:	4658      	mov	r0, fp
 800b936:	f000 fc6f 	bl	800c218 <__lshift>
 800b93a:	4605      	mov	r5, r0
 800b93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d05a      	beq.n	800b9f8 <_dtoa_r+0xa18>
 800b942:	6869      	ldr	r1, [r5, #4]
 800b944:	4658      	mov	r0, fp
 800b946:	f000 fa0f 	bl	800bd68 <_Balloc>
 800b94a:	4606      	mov	r6, r0
 800b94c:	b928      	cbnz	r0, 800b95a <_dtoa_r+0x97a>
 800b94e:	4b84      	ldr	r3, [pc, #528]	@ (800bb60 <_dtoa_r+0xb80>)
 800b950:	4602      	mov	r2, r0
 800b952:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b956:	f7ff bb5a 	b.w	800b00e <_dtoa_r+0x2e>
 800b95a:	692a      	ldr	r2, [r5, #16]
 800b95c:	3202      	adds	r2, #2
 800b95e:	0092      	lsls	r2, r2, #2
 800b960:	f105 010c 	add.w	r1, r5, #12
 800b964:	300c      	adds	r0, #12
 800b966:	f001 ff75 	bl	800d854 <memcpy>
 800b96a:	2201      	movs	r2, #1
 800b96c:	4631      	mov	r1, r6
 800b96e:	4658      	mov	r0, fp
 800b970:	f000 fc52 	bl	800c218 <__lshift>
 800b974:	f10a 0301 	add.w	r3, sl, #1
 800b978:	9307      	str	r3, [sp, #28]
 800b97a:	9b00      	ldr	r3, [sp, #0]
 800b97c:	4453      	add	r3, sl
 800b97e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	462f      	mov	r7, r5
 800b988:	930a      	str	r3, [sp, #40]	@ 0x28
 800b98a:	4605      	mov	r5, r0
 800b98c:	9b07      	ldr	r3, [sp, #28]
 800b98e:	4621      	mov	r1, r4
 800b990:	3b01      	subs	r3, #1
 800b992:	4648      	mov	r0, r9
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	f7ff fa99 	bl	800aecc <quorem>
 800b99a:	4639      	mov	r1, r7
 800b99c:	9002      	str	r0, [sp, #8]
 800b99e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9a2:	4648      	mov	r0, r9
 800b9a4:	f000 fca4 	bl	800c2f0 <__mcmp>
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	9008      	str	r0, [sp, #32]
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	f000 fcba 	bl	800c328 <__mdiff>
 800b9b4:	68c2      	ldr	r2, [r0, #12]
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	bb02      	cbnz	r2, 800b9fc <_dtoa_r+0xa1c>
 800b9ba:	4601      	mov	r1, r0
 800b9bc:	4648      	mov	r0, r9
 800b9be:	f000 fc97 	bl	800c2f0 <__mcmp>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4658      	mov	r0, fp
 800b9c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9ca:	f000 fa0d 	bl	800bde8 <_Bfree>
 800b9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9d2:	9e07      	ldr	r6, [sp, #28]
 800b9d4:	ea43 0102 	orr.w	r1, r3, r2
 800b9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9da:	4319      	orrs	r1, r3
 800b9dc:	d110      	bne.n	800ba00 <_dtoa_r+0xa20>
 800b9de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9e2:	d029      	beq.n	800ba38 <_dtoa_r+0xa58>
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dd02      	ble.n	800b9f0 <_dtoa_r+0xa10>
 800b9ea:	9b02      	ldr	r3, [sp, #8]
 800b9ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b9f0:	9b00      	ldr	r3, [sp, #0]
 800b9f2:	f883 8000 	strb.w	r8, [r3]
 800b9f6:	e63f      	b.n	800b678 <_dtoa_r+0x698>
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	e7bb      	b.n	800b974 <_dtoa_r+0x994>
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	e7e1      	b.n	800b9c4 <_dtoa_r+0x9e4>
 800ba00:	9b08      	ldr	r3, [sp, #32]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	db04      	blt.n	800ba10 <_dtoa_r+0xa30>
 800ba06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba08:	430b      	orrs	r3, r1
 800ba0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	d120      	bne.n	800ba52 <_dtoa_r+0xa72>
 800ba10:	2a00      	cmp	r2, #0
 800ba12:	dded      	ble.n	800b9f0 <_dtoa_r+0xa10>
 800ba14:	4649      	mov	r1, r9
 800ba16:	2201      	movs	r2, #1
 800ba18:	4658      	mov	r0, fp
 800ba1a:	f000 fbfd 	bl	800c218 <__lshift>
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4681      	mov	r9, r0
 800ba22:	f000 fc65 	bl	800c2f0 <__mcmp>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	dc03      	bgt.n	800ba32 <_dtoa_r+0xa52>
 800ba2a:	d1e1      	bne.n	800b9f0 <_dtoa_r+0xa10>
 800ba2c:	f018 0f01 	tst.w	r8, #1
 800ba30:	d0de      	beq.n	800b9f0 <_dtoa_r+0xa10>
 800ba32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba36:	d1d8      	bne.n	800b9ea <_dtoa_r+0xa0a>
 800ba38:	9a00      	ldr	r2, [sp, #0]
 800ba3a:	2339      	movs	r3, #57	@ 0x39
 800ba3c:	7013      	strb	r3, [r2, #0]
 800ba3e:	4633      	mov	r3, r6
 800ba40:	461e      	mov	r6, r3
 800ba42:	3b01      	subs	r3, #1
 800ba44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba48:	2a39      	cmp	r2, #57	@ 0x39
 800ba4a:	d052      	beq.n	800baf2 <_dtoa_r+0xb12>
 800ba4c:	3201      	adds	r2, #1
 800ba4e:	701a      	strb	r2, [r3, #0]
 800ba50:	e612      	b.n	800b678 <_dtoa_r+0x698>
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	dd07      	ble.n	800ba66 <_dtoa_r+0xa86>
 800ba56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba5a:	d0ed      	beq.n	800ba38 <_dtoa_r+0xa58>
 800ba5c:	9a00      	ldr	r2, [sp, #0]
 800ba5e:	f108 0301 	add.w	r3, r8, #1
 800ba62:	7013      	strb	r3, [r2, #0]
 800ba64:	e608      	b.n	800b678 <_dtoa_r+0x698>
 800ba66:	9b07      	ldr	r3, [sp, #28]
 800ba68:	9a07      	ldr	r2, [sp, #28]
 800ba6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d028      	beq.n	800bac6 <_dtoa_r+0xae6>
 800ba74:	4649      	mov	r1, r9
 800ba76:	2300      	movs	r3, #0
 800ba78:	220a      	movs	r2, #10
 800ba7a:	4658      	mov	r0, fp
 800ba7c:	f000 f9d6 	bl	800be2c <__multadd>
 800ba80:	42af      	cmp	r7, r5
 800ba82:	4681      	mov	r9, r0
 800ba84:	f04f 0300 	mov.w	r3, #0
 800ba88:	f04f 020a 	mov.w	r2, #10
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	4658      	mov	r0, fp
 800ba90:	d107      	bne.n	800baa2 <_dtoa_r+0xac2>
 800ba92:	f000 f9cb 	bl	800be2c <__multadd>
 800ba96:	4607      	mov	r7, r0
 800ba98:	4605      	mov	r5, r0
 800ba9a:	9b07      	ldr	r3, [sp, #28]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	9307      	str	r3, [sp, #28]
 800baa0:	e774      	b.n	800b98c <_dtoa_r+0x9ac>
 800baa2:	f000 f9c3 	bl	800be2c <__multadd>
 800baa6:	4629      	mov	r1, r5
 800baa8:	4607      	mov	r7, r0
 800baaa:	2300      	movs	r3, #0
 800baac:	220a      	movs	r2, #10
 800baae:	4658      	mov	r0, fp
 800bab0:	f000 f9bc 	bl	800be2c <__multadd>
 800bab4:	4605      	mov	r5, r0
 800bab6:	e7f0      	b.n	800ba9a <_dtoa_r+0xaba>
 800bab8:	9b00      	ldr	r3, [sp, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	bfcc      	ite	gt
 800babe:	461e      	movgt	r6, r3
 800bac0:	2601      	movle	r6, #1
 800bac2:	4456      	add	r6, sl
 800bac4:	2700      	movs	r7, #0
 800bac6:	4649      	mov	r1, r9
 800bac8:	2201      	movs	r2, #1
 800baca:	4658      	mov	r0, fp
 800bacc:	f000 fba4 	bl	800c218 <__lshift>
 800bad0:	4621      	mov	r1, r4
 800bad2:	4681      	mov	r9, r0
 800bad4:	f000 fc0c 	bl	800c2f0 <__mcmp>
 800bad8:	2800      	cmp	r0, #0
 800bada:	dcb0      	bgt.n	800ba3e <_dtoa_r+0xa5e>
 800badc:	d102      	bne.n	800bae4 <_dtoa_r+0xb04>
 800bade:	f018 0f01 	tst.w	r8, #1
 800bae2:	d1ac      	bne.n	800ba3e <_dtoa_r+0xa5e>
 800bae4:	4633      	mov	r3, r6
 800bae6:	461e      	mov	r6, r3
 800bae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baec:	2a30      	cmp	r2, #48	@ 0x30
 800baee:	d0fa      	beq.n	800bae6 <_dtoa_r+0xb06>
 800baf0:	e5c2      	b.n	800b678 <_dtoa_r+0x698>
 800baf2:	459a      	cmp	sl, r3
 800baf4:	d1a4      	bne.n	800ba40 <_dtoa_r+0xa60>
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	3301      	adds	r3, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	2331      	movs	r3, #49	@ 0x31
 800bafe:	f88a 3000 	strb.w	r3, [sl]
 800bb02:	e5b9      	b.n	800b678 <_dtoa_r+0x698>
 800bb04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb64 <_dtoa_r+0xb84>
 800bb0a:	b11b      	cbz	r3, 800bb14 <_dtoa_r+0xb34>
 800bb0c:	f10a 0308 	add.w	r3, sl, #8
 800bb10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	4650      	mov	r0, sl
 800bb16:	b019      	add	sp, #100	@ 0x64
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	f77f ae37 	ble.w	800b792 <_dtoa_r+0x7b2>
 800bb24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb26:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb28:	2001      	movs	r0, #1
 800bb2a:	e655      	b.n	800b7d8 <_dtoa_r+0x7f8>
 800bb2c:	9b00      	ldr	r3, [sp, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f77f aed6 	ble.w	800b8e0 <_dtoa_r+0x900>
 800bb34:	4656      	mov	r6, sl
 800bb36:	4621      	mov	r1, r4
 800bb38:	4648      	mov	r0, r9
 800bb3a:	f7ff f9c7 	bl	800aecc <quorem>
 800bb3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb42:	f806 8b01 	strb.w	r8, [r6], #1
 800bb46:	9b00      	ldr	r3, [sp, #0]
 800bb48:	eba6 020a 	sub.w	r2, r6, sl
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	ddb3      	ble.n	800bab8 <_dtoa_r+0xad8>
 800bb50:	4649      	mov	r1, r9
 800bb52:	2300      	movs	r3, #0
 800bb54:	220a      	movs	r2, #10
 800bb56:	4658      	mov	r0, fp
 800bb58:	f000 f968 	bl	800be2c <__multadd>
 800bb5c:	4681      	mov	r9, r0
 800bb5e:	e7ea      	b.n	800bb36 <_dtoa_r+0xb56>
 800bb60:	0800e7b5 	.word	0x0800e7b5
 800bb64:	0800e739 	.word	0x0800e739

0800bb68 <_free_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	2900      	cmp	r1, #0
 800bb6e:	d041      	beq.n	800bbf4 <_free_r+0x8c>
 800bb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb74:	1f0c      	subs	r4, r1, #4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bfb8      	it	lt
 800bb7a:	18e4      	addlt	r4, r4, r3
 800bb7c:	f000 f8e8 	bl	800bd50 <__malloc_lock>
 800bb80:	4a1d      	ldr	r2, [pc, #116]	@ (800bbf8 <_free_r+0x90>)
 800bb82:	6813      	ldr	r3, [r2, #0]
 800bb84:	b933      	cbnz	r3, 800bb94 <_free_r+0x2c>
 800bb86:	6063      	str	r3, [r4, #4]
 800bb88:	6014      	str	r4, [r2, #0]
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb90:	f000 b8e4 	b.w	800bd5c <__malloc_unlock>
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	d908      	bls.n	800bbaa <_free_r+0x42>
 800bb98:	6820      	ldr	r0, [r4, #0]
 800bb9a:	1821      	adds	r1, r4, r0
 800bb9c:	428b      	cmp	r3, r1
 800bb9e:	bf01      	itttt	eq
 800bba0:	6819      	ldreq	r1, [r3, #0]
 800bba2:	685b      	ldreq	r3, [r3, #4]
 800bba4:	1809      	addeq	r1, r1, r0
 800bba6:	6021      	streq	r1, [r4, #0]
 800bba8:	e7ed      	b.n	800bb86 <_free_r+0x1e>
 800bbaa:	461a      	mov	r2, r3
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	b10b      	cbz	r3, 800bbb4 <_free_r+0x4c>
 800bbb0:	42a3      	cmp	r3, r4
 800bbb2:	d9fa      	bls.n	800bbaa <_free_r+0x42>
 800bbb4:	6811      	ldr	r1, [r2, #0]
 800bbb6:	1850      	adds	r0, r2, r1
 800bbb8:	42a0      	cmp	r0, r4
 800bbba:	d10b      	bne.n	800bbd4 <_free_r+0x6c>
 800bbbc:	6820      	ldr	r0, [r4, #0]
 800bbbe:	4401      	add	r1, r0
 800bbc0:	1850      	adds	r0, r2, r1
 800bbc2:	4283      	cmp	r3, r0
 800bbc4:	6011      	str	r1, [r2, #0]
 800bbc6:	d1e0      	bne.n	800bb8a <_free_r+0x22>
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	6053      	str	r3, [r2, #4]
 800bbce:	4408      	add	r0, r1
 800bbd0:	6010      	str	r0, [r2, #0]
 800bbd2:	e7da      	b.n	800bb8a <_free_r+0x22>
 800bbd4:	d902      	bls.n	800bbdc <_free_r+0x74>
 800bbd6:	230c      	movs	r3, #12
 800bbd8:	602b      	str	r3, [r5, #0]
 800bbda:	e7d6      	b.n	800bb8a <_free_r+0x22>
 800bbdc:	6820      	ldr	r0, [r4, #0]
 800bbde:	1821      	adds	r1, r4, r0
 800bbe0:	428b      	cmp	r3, r1
 800bbe2:	bf04      	itt	eq
 800bbe4:	6819      	ldreq	r1, [r3, #0]
 800bbe6:	685b      	ldreq	r3, [r3, #4]
 800bbe8:	6063      	str	r3, [r4, #4]
 800bbea:	bf04      	itt	eq
 800bbec:	1809      	addeq	r1, r1, r0
 800bbee:	6021      	streq	r1, [r4, #0]
 800bbf0:	6054      	str	r4, [r2, #4]
 800bbf2:	e7ca      	b.n	800bb8a <_free_r+0x22>
 800bbf4:	bd38      	pop	{r3, r4, r5, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20001944 	.word	0x20001944

0800bbfc <malloc>:
 800bbfc:	4b02      	ldr	r3, [pc, #8]	@ (800bc08 <malloc+0xc>)
 800bbfe:	4601      	mov	r1, r0
 800bc00:	6818      	ldr	r0, [r3, #0]
 800bc02:	f000 b825 	b.w	800bc50 <_malloc_r>
 800bc06:	bf00      	nop
 800bc08:	20000128 	.word	0x20000128

0800bc0c <sbrk_aligned>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4e0f      	ldr	r6, [pc, #60]	@ (800bc4c <sbrk_aligned+0x40>)
 800bc10:	460c      	mov	r4, r1
 800bc12:	6831      	ldr	r1, [r6, #0]
 800bc14:	4605      	mov	r5, r0
 800bc16:	b911      	cbnz	r1, 800bc1e <sbrk_aligned+0x12>
 800bc18:	f001 fe0c 	bl	800d834 <_sbrk_r>
 800bc1c:	6030      	str	r0, [r6, #0]
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4628      	mov	r0, r5
 800bc22:	f001 fe07 	bl	800d834 <_sbrk_r>
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	d103      	bne.n	800bc32 <sbrk_aligned+0x26>
 800bc2a:	f04f 34ff 	mov.w	r4, #4294967295
 800bc2e:	4620      	mov	r0, r4
 800bc30:	bd70      	pop	{r4, r5, r6, pc}
 800bc32:	1cc4      	adds	r4, r0, #3
 800bc34:	f024 0403 	bic.w	r4, r4, #3
 800bc38:	42a0      	cmp	r0, r4
 800bc3a:	d0f8      	beq.n	800bc2e <sbrk_aligned+0x22>
 800bc3c:	1a21      	subs	r1, r4, r0
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f001 fdf8 	bl	800d834 <_sbrk_r>
 800bc44:	3001      	adds	r0, #1
 800bc46:	d1f2      	bne.n	800bc2e <sbrk_aligned+0x22>
 800bc48:	e7ef      	b.n	800bc2a <sbrk_aligned+0x1e>
 800bc4a:	bf00      	nop
 800bc4c:	20001940 	.word	0x20001940

0800bc50 <_malloc_r>:
 800bc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc54:	1ccd      	adds	r5, r1, #3
 800bc56:	f025 0503 	bic.w	r5, r5, #3
 800bc5a:	3508      	adds	r5, #8
 800bc5c:	2d0c      	cmp	r5, #12
 800bc5e:	bf38      	it	cc
 800bc60:	250c      	movcc	r5, #12
 800bc62:	2d00      	cmp	r5, #0
 800bc64:	4606      	mov	r6, r0
 800bc66:	db01      	blt.n	800bc6c <_malloc_r+0x1c>
 800bc68:	42a9      	cmp	r1, r5
 800bc6a:	d904      	bls.n	800bc76 <_malloc_r+0x26>
 800bc6c:	230c      	movs	r3, #12
 800bc6e:	6033      	str	r3, [r6, #0]
 800bc70:	2000      	movs	r0, #0
 800bc72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd4c <_malloc_r+0xfc>
 800bc7a:	f000 f869 	bl	800bd50 <__malloc_lock>
 800bc7e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc82:	461c      	mov	r4, r3
 800bc84:	bb44      	cbnz	r4, 800bcd8 <_malloc_r+0x88>
 800bc86:	4629      	mov	r1, r5
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f7ff ffbf 	bl	800bc0c <sbrk_aligned>
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	4604      	mov	r4, r0
 800bc92:	d158      	bne.n	800bd46 <_malloc_r+0xf6>
 800bc94:	f8d8 4000 	ldr.w	r4, [r8]
 800bc98:	4627      	mov	r7, r4
 800bc9a:	2f00      	cmp	r7, #0
 800bc9c:	d143      	bne.n	800bd26 <_malloc_r+0xd6>
 800bc9e:	2c00      	cmp	r4, #0
 800bca0:	d04b      	beq.n	800bd3a <_malloc_r+0xea>
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	4639      	mov	r1, r7
 800bca6:	4630      	mov	r0, r6
 800bca8:	eb04 0903 	add.w	r9, r4, r3
 800bcac:	f001 fdc2 	bl	800d834 <_sbrk_r>
 800bcb0:	4581      	cmp	r9, r0
 800bcb2:	d142      	bne.n	800bd3a <_malloc_r+0xea>
 800bcb4:	6821      	ldr	r1, [r4, #0]
 800bcb6:	1a6d      	subs	r5, r5, r1
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7ff ffa6 	bl	800bc0c <sbrk_aligned>
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d03a      	beq.n	800bd3a <_malloc_r+0xea>
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	442b      	add	r3, r5
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	f8d8 3000 	ldr.w	r3, [r8]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	bb62      	cbnz	r2, 800bd2c <_malloc_r+0xdc>
 800bcd2:	f8c8 7000 	str.w	r7, [r8]
 800bcd6:	e00f      	b.n	800bcf8 <_malloc_r+0xa8>
 800bcd8:	6822      	ldr	r2, [r4, #0]
 800bcda:	1b52      	subs	r2, r2, r5
 800bcdc:	d420      	bmi.n	800bd20 <_malloc_r+0xd0>
 800bcde:	2a0b      	cmp	r2, #11
 800bce0:	d917      	bls.n	800bd12 <_malloc_r+0xc2>
 800bce2:	1961      	adds	r1, r4, r5
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	6025      	str	r5, [r4, #0]
 800bce8:	bf18      	it	ne
 800bcea:	6059      	strne	r1, [r3, #4]
 800bcec:	6863      	ldr	r3, [r4, #4]
 800bcee:	bf08      	it	eq
 800bcf0:	f8c8 1000 	streq.w	r1, [r8]
 800bcf4:	5162      	str	r2, [r4, r5]
 800bcf6:	604b      	str	r3, [r1, #4]
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f000 f82f 	bl	800bd5c <__malloc_unlock>
 800bcfe:	f104 000b 	add.w	r0, r4, #11
 800bd02:	1d23      	adds	r3, r4, #4
 800bd04:	f020 0007 	bic.w	r0, r0, #7
 800bd08:	1ac2      	subs	r2, r0, r3
 800bd0a:	bf1c      	itt	ne
 800bd0c:	1a1b      	subne	r3, r3, r0
 800bd0e:	50a3      	strne	r3, [r4, r2]
 800bd10:	e7af      	b.n	800bc72 <_malloc_r+0x22>
 800bd12:	6862      	ldr	r2, [r4, #4]
 800bd14:	42a3      	cmp	r3, r4
 800bd16:	bf0c      	ite	eq
 800bd18:	f8c8 2000 	streq.w	r2, [r8]
 800bd1c:	605a      	strne	r2, [r3, #4]
 800bd1e:	e7eb      	b.n	800bcf8 <_malloc_r+0xa8>
 800bd20:	4623      	mov	r3, r4
 800bd22:	6864      	ldr	r4, [r4, #4]
 800bd24:	e7ae      	b.n	800bc84 <_malloc_r+0x34>
 800bd26:	463c      	mov	r4, r7
 800bd28:	687f      	ldr	r7, [r7, #4]
 800bd2a:	e7b6      	b.n	800bc9a <_malloc_r+0x4a>
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	42a3      	cmp	r3, r4
 800bd32:	d1fb      	bne.n	800bd2c <_malloc_r+0xdc>
 800bd34:	2300      	movs	r3, #0
 800bd36:	6053      	str	r3, [r2, #4]
 800bd38:	e7de      	b.n	800bcf8 <_malloc_r+0xa8>
 800bd3a:	230c      	movs	r3, #12
 800bd3c:	6033      	str	r3, [r6, #0]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f000 f80c 	bl	800bd5c <__malloc_unlock>
 800bd44:	e794      	b.n	800bc70 <_malloc_r+0x20>
 800bd46:	6005      	str	r5, [r0, #0]
 800bd48:	e7d6      	b.n	800bcf8 <_malloc_r+0xa8>
 800bd4a:	bf00      	nop
 800bd4c:	20001944 	.word	0x20001944

0800bd50 <__malloc_lock>:
 800bd50:	4801      	ldr	r0, [pc, #4]	@ (800bd58 <__malloc_lock+0x8>)
 800bd52:	f7ff b8b2 	b.w	800aeba <__retarget_lock_acquire_recursive>
 800bd56:	bf00      	nop
 800bd58:	2000193c 	.word	0x2000193c

0800bd5c <__malloc_unlock>:
 800bd5c:	4801      	ldr	r0, [pc, #4]	@ (800bd64 <__malloc_unlock+0x8>)
 800bd5e:	f7ff b8ad 	b.w	800aebc <__retarget_lock_release_recursive>
 800bd62:	bf00      	nop
 800bd64:	2000193c 	.word	0x2000193c

0800bd68 <_Balloc>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	69c6      	ldr	r6, [r0, #28]
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	b976      	cbnz	r6, 800bd90 <_Balloc+0x28>
 800bd72:	2010      	movs	r0, #16
 800bd74:	f7ff ff42 	bl	800bbfc <malloc>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	61e0      	str	r0, [r4, #28]
 800bd7c:	b920      	cbnz	r0, 800bd88 <_Balloc+0x20>
 800bd7e:	4b18      	ldr	r3, [pc, #96]	@ (800bde0 <_Balloc+0x78>)
 800bd80:	4818      	ldr	r0, [pc, #96]	@ (800bde4 <_Balloc+0x7c>)
 800bd82:	216b      	movs	r1, #107	@ 0x6b
 800bd84:	f001 fd7c 	bl	800d880 <__assert_func>
 800bd88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd8c:	6006      	str	r6, [r0, #0]
 800bd8e:	60c6      	str	r6, [r0, #12]
 800bd90:	69e6      	ldr	r6, [r4, #28]
 800bd92:	68f3      	ldr	r3, [r6, #12]
 800bd94:	b183      	cbz	r3, 800bdb8 <_Balloc+0x50>
 800bd96:	69e3      	ldr	r3, [r4, #28]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd9e:	b9b8      	cbnz	r0, 800bdd0 <_Balloc+0x68>
 800bda0:	2101      	movs	r1, #1
 800bda2:	fa01 f605 	lsl.w	r6, r1, r5
 800bda6:	1d72      	adds	r2, r6, #5
 800bda8:	0092      	lsls	r2, r2, #2
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f001 fd86 	bl	800d8bc <_calloc_r>
 800bdb0:	b160      	cbz	r0, 800bdcc <_Balloc+0x64>
 800bdb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdb6:	e00e      	b.n	800bdd6 <_Balloc+0x6e>
 800bdb8:	2221      	movs	r2, #33	@ 0x21
 800bdba:	2104      	movs	r1, #4
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f001 fd7d 	bl	800d8bc <_calloc_r>
 800bdc2:	69e3      	ldr	r3, [r4, #28]
 800bdc4:	60f0      	str	r0, [r6, #12]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e4      	bne.n	800bd96 <_Balloc+0x2e>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	bd70      	pop	{r4, r5, r6, pc}
 800bdd0:	6802      	ldr	r2, [r0, #0]
 800bdd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bddc:	e7f7      	b.n	800bdce <_Balloc+0x66>
 800bdde:	bf00      	nop
 800bde0:	0800e746 	.word	0x0800e746
 800bde4:	0800e7c6 	.word	0x0800e7c6

0800bde8 <_Bfree>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	69c6      	ldr	r6, [r0, #28]
 800bdec:	4605      	mov	r5, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	b976      	cbnz	r6, 800be10 <_Bfree+0x28>
 800bdf2:	2010      	movs	r0, #16
 800bdf4:	f7ff ff02 	bl	800bbfc <malloc>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	61e8      	str	r0, [r5, #28]
 800bdfc:	b920      	cbnz	r0, 800be08 <_Bfree+0x20>
 800bdfe:	4b09      	ldr	r3, [pc, #36]	@ (800be24 <_Bfree+0x3c>)
 800be00:	4809      	ldr	r0, [pc, #36]	@ (800be28 <_Bfree+0x40>)
 800be02:	218f      	movs	r1, #143	@ 0x8f
 800be04:	f001 fd3c 	bl	800d880 <__assert_func>
 800be08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be0c:	6006      	str	r6, [r0, #0]
 800be0e:	60c6      	str	r6, [r0, #12]
 800be10:	b13c      	cbz	r4, 800be22 <_Bfree+0x3a>
 800be12:	69eb      	ldr	r3, [r5, #28]
 800be14:	6862      	ldr	r2, [r4, #4]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be1c:	6021      	str	r1, [r4, #0]
 800be1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be22:	bd70      	pop	{r4, r5, r6, pc}
 800be24:	0800e746 	.word	0x0800e746
 800be28:	0800e7c6 	.word	0x0800e7c6

0800be2c <__multadd>:
 800be2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be30:	690d      	ldr	r5, [r1, #16]
 800be32:	4607      	mov	r7, r0
 800be34:	460c      	mov	r4, r1
 800be36:	461e      	mov	r6, r3
 800be38:	f101 0c14 	add.w	ip, r1, #20
 800be3c:	2000      	movs	r0, #0
 800be3e:	f8dc 3000 	ldr.w	r3, [ip]
 800be42:	b299      	uxth	r1, r3
 800be44:	fb02 6101 	mla	r1, r2, r1, r6
 800be48:	0c1e      	lsrs	r6, r3, #16
 800be4a:	0c0b      	lsrs	r3, r1, #16
 800be4c:	fb02 3306 	mla	r3, r2, r6, r3
 800be50:	b289      	uxth	r1, r1
 800be52:	3001      	adds	r0, #1
 800be54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be58:	4285      	cmp	r5, r0
 800be5a:	f84c 1b04 	str.w	r1, [ip], #4
 800be5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be62:	dcec      	bgt.n	800be3e <__multadd+0x12>
 800be64:	b30e      	cbz	r6, 800beaa <__multadd+0x7e>
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	42ab      	cmp	r3, r5
 800be6a:	dc19      	bgt.n	800bea0 <__multadd+0x74>
 800be6c:	6861      	ldr	r1, [r4, #4]
 800be6e:	4638      	mov	r0, r7
 800be70:	3101      	adds	r1, #1
 800be72:	f7ff ff79 	bl	800bd68 <_Balloc>
 800be76:	4680      	mov	r8, r0
 800be78:	b928      	cbnz	r0, 800be86 <__multadd+0x5a>
 800be7a:	4602      	mov	r2, r0
 800be7c:	4b0c      	ldr	r3, [pc, #48]	@ (800beb0 <__multadd+0x84>)
 800be7e:	480d      	ldr	r0, [pc, #52]	@ (800beb4 <__multadd+0x88>)
 800be80:	21ba      	movs	r1, #186	@ 0xba
 800be82:	f001 fcfd 	bl	800d880 <__assert_func>
 800be86:	6922      	ldr	r2, [r4, #16]
 800be88:	3202      	adds	r2, #2
 800be8a:	f104 010c 	add.w	r1, r4, #12
 800be8e:	0092      	lsls	r2, r2, #2
 800be90:	300c      	adds	r0, #12
 800be92:	f001 fcdf 	bl	800d854 <memcpy>
 800be96:	4621      	mov	r1, r4
 800be98:	4638      	mov	r0, r7
 800be9a:	f7ff ffa5 	bl	800bde8 <_Bfree>
 800be9e:	4644      	mov	r4, r8
 800bea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bea4:	3501      	adds	r5, #1
 800bea6:	615e      	str	r6, [r3, #20]
 800bea8:	6125      	str	r5, [r4, #16]
 800beaa:	4620      	mov	r0, r4
 800beac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb0:	0800e7b5 	.word	0x0800e7b5
 800beb4:	0800e7c6 	.word	0x0800e7c6

0800beb8 <__s2b>:
 800beb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bebc:	460c      	mov	r4, r1
 800bebe:	4615      	mov	r5, r2
 800bec0:	461f      	mov	r7, r3
 800bec2:	2209      	movs	r2, #9
 800bec4:	3308      	adds	r3, #8
 800bec6:	4606      	mov	r6, r0
 800bec8:	fb93 f3f2 	sdiv	r3, r3, r2
 800becc:	2100      	movs	r1, #0
 800bece:	2201      	movs	r2, #1
 800bed0:	429a      	cmp	r2, r3
 800bed2:	db09      	blt.n	800bee8 <__s2b+0x30>
 800bed4:	4630      	mov	r0, r6
 800bed6:	f7ff ff47 	bl	800bd68 <_Balloc>
 800beda:	b940      	cbnz	r0, 800beee <__s2b+0x36>
 800bedc:	4602      	mov	r2, r0
 800bede:	4b19      	ldr	r3, [pc, #100]	@ (800bf44 <__s2b+0x8c>)
 800bee0:	4819      	ldr	r0, [pc, #100]	@ (800bf48 <__s2b+0x90>)
 800bee2:	21d3      	movs	r1, #211	@ 0xd3
 800bee4:	f001 fccc 	bl	800d880 <__assert_func>
 800bee8:	0052      	lsls	r2, r2, #1
 800beea:	3101      	adds	r1, #1
 800beec:	e7f0      	b.n	800bed0 <__s2b+0x18>
 800beee:	9b08      	ldr	r3, [sp, #32]
 800bef0:	6143      	str	r3, [r0, #20]
 800bef2:	2d09      	cmp	r5, #9
 800bef4:	f04f 0301 	mov.w	r3, #1
 800bef8:	6103      	str	r3, [r0, #16]
 800befa:	dd16      	ble.n	800bf2a <__s2b+0x72>
 800befc:	f104 0909 	add.w	r9, r4, #9
 800bf00:	46c8      	mov	r8, r9
 800bf02:	442c      	add	r4, r5
 800bf04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf08:	4601      	mov	r1, r0
 800bf0a:	3b30      	subs	r3, #48	@ 0x30
 800bf0c:	220a      	movs	r2, #10
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ff8c 	bl	800be2c <__multadd>
 800bf14:	45a0      	cmp	r8, r4
 800bf16:	d1f5      	bne.n	800bf04 <__s2b+0x4c>
 800bf18:	f1a5 0408 	sub.w	r4, r5, #8
 800bf1c:	444c      	add	r4, r9
 800bf1e:	1b2d      	subs	r5, r5, r4
 800bf20:	1963      	adds	r3, r4, r5
 800bf22:	42bb      	cmp	r3, r7
 800bf24:	db04      	blt.n	800bf30 <__s2b+0x78>
 800bf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf2a:	340a      	adds	r4, #10
 800bf2c:	2509      	movs	r5, #9
 800bf2e:	e7f6      	b.n	800bf1e <__s2b+0x66>
 800bf30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf34:	4601      	mov	r1, r0
 800bf36:	3b30      	subs	r3, #48	@ 0x30
 800bf38:	220a      	movs	r2, #10
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	f7ff ff76 	bl	800be2c <__multadd>
 800bf40:	e7ee      	b.n	800bf20 <__s2b+0x68>
 800bf42:	bf00      	nop
 800bf44:	0800e7b5 	.word	0x0800e7b5
 800bf48:	0800e7c6 	.word	0x0800e7c6

0800bf4c <__hi0bits>:
 800bf4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bf50:	4603      	mov	r3, r0
 800bf52:	bf36      	itet	cc
 800bf54:	0403      	lslcc	r3, r0, #16
 800bf56:	2000      	movcs	r0, #0
 800bf58:	2010      	movcc	r0, #16
 800bf5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf5e:	bf3c      	itt	cc
 800bf60:	021b      	lslcc	r3, r3, #8
 800bf62:	3008      	addcc	r0, #8
 800bf64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf68:	bf3c      	itt	cc
 800bf6a:	011b      	lslcc	r3, r3, #4
 800bf6c:	3004      	addcc	r0, #4
 800bf6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf72:	bf3c      	itt	cc
 800bf74:	009b      	lslcc	r3, r3, #2
 800bf76:	3002      	addcc	r0, #2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	db05      	blt.n	800bf88 <__hi0bits+0x3c>
 800bf7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bf80:	f100 0001 	add.w	r0, r0, #1
 800bf84:	bf08      	it	eq
 800bf86:	2020      	moveq	r0, #32
 800bf88:	4770      	bx	lr

0800bf8a <__lo0bits>:
 800bf8a:	6803      	ldr	r3, [r0, #0]
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	f013 0007 	ands.w	r0, r3, #7
 800bf92:	d00b      	beq.n	800bfac <__lo0bits+0x22>
 800bf94:	07d9      	lsls	r1, r3, #31
 800bf96:	d421      	bmi.n	800bfdc <__lo0bits+0x52>
 800bf98:	0798      	lsls	r0, r3, #30
 800bf9a:	bf49      	itett	mi
 800bf9c:	085b      	lsrmi	r3, r3, #1
 800bf9e:	089b      	lsrpl	r3, r3, #2
 800bfa0:	2001      	movmi	r0, #1
 800bfa2:	6013      	strmi	r3, [r2, #0]
 800bfa4:	bf5c      	itt	pl
 800bfa6:	6013      	strpl	r3, [r2, #0]
 800bfa8:	2002      	movpl	r0, #2
 800bfaa:	4770      	bx	lr
 800bfac:	b299      	uxth	r1, r3
 800bfae:	b909      	cbnz	r1, 800bfb4 <__lo0bits+0x2a>
 800bfb0:	0c1b      	lsrs	r3, r3, #16
 800bfb2:	2010      	movs	r0, #16
 800bfb4:	b2d9      	uxtb	r1, r3
 800bfb6:	b909      	cbnz	r1, 800bfbc <__lo0bits+0x32>
 800bfb8:	3008      	adds	r0, #8
 800bfba:	0a1b      	lsrs	r3, r3, #8
 800bfbc:	0719      	lsls	r1, r3, #28
 800bfbe:	bf04      	itt	eq
 800bfc0:	091b      	lsreq	r3, r3, #4
 800bfc2:	3004      	addeq	r0, #4
 800bfc4:	0799      	lsls	r1, r3, #30
 800bfc6:	bf04      	itt	eq
 800bfc8:	089b      	lsreq	r3, r3, #2
 800bfca:	3002      	addeq	r0, #2
 800bfcc:	07d9      	lsls	r1, r3, #31
 800bfce:	d403      	bmi.n	800bfd8 <__lo0bits+0x4e>
 800bfd0:	085b      	lsrs	r3, r3, #1
 800bfd2:	f100 0001 	add.w	r0, r0, #1
 800bfd6:	d003      	beq.n	800bfe0 <__lo0bits+0x56>
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	4770      	bx	lr
 800bfdc:	2000      	movs	r0, #0
 800bfde:	4770      	bx	lr
 800bfe0:	2020      	movs	r0, #32
 800bfe2:	4770      	bx	lr

0800bfe4 <__i2b>:
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	2101      	movs	r1, #1
 800bfea:	f7ff febd 	bl	800bd68 <_Balloc>
 800bfee:	4602      	mov	r2, r0
 800bff0:	b928      	cbnz	r0, 800bffe <__i2b+0x1a>
 800bff2:	4b05      	ldr	r3, [pc, #20]	@ (800c008 <__i2b+0x24>)
 800bff4:	4805      	ldr	r0, [pc, #20]	@ (800c00c <__i2b+0x28>)
 800bff6:	f240 1145 	movw	r1, #325	@ 0x145
 800bffa:	f001 fc41 	bl	800d880 <__assert_func>
 800bffe:	2301      	movs	r3, #1
 800c000:	6144      	str	r4, [r0, #20]
 800c002:	6103      	str	r3, [r0, #16]
 800c004:	bd10      	pop	{r4, pc}
 800c006:	bf00      	nop
 800c008:	0800e7b5 	.word	0x0800e7b5
 800c00c:	0800e7c6 	.word	0x0800e7c6

0800c010 <__multiply>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	4614      	mov	r4, r2
 800c016:	690a      	ldr	r2, [r1, #16]
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	bfa8      	it	ge
 800c01e:	4623      	movge	r3, r4
 800c020:	460f      	mov	r7, r1
 800c022:	bfa4      	itt	ge
 800c024:	460c      	movge	r4, r1
 800c026:	461f      	movge	r7, r3
 800c028:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c02c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c030:	68a3      	ldr	r3, [r4, #8]
 800c032:	6861      	ldr	r1, [r4, #4]
 800c034:	eb0a 0609 	add.w	r6, sl, r9
 800c038:	42b3      	cmp	r3, r6
 800c03a:	b085      	sub	sp, #20
 800c03c:	bfb8      	it	lt
 800c03e:	3101      	addlt	r1, #1
 800c040:	f7ff fe92 	bl	800bd68 <_Balloc>
 800c044:	b930      	cbnz	r0, 800c054 <__multiply+0x44>
 800c046:	4602      	mov	r2, r0
 800c048:	4b44      	ldr	r3, [pc, #272]	@ (800c15c <__multiply+0x14c>)
 800c04a:	4845      	ldr	r0, [pc, #276]	@ (800c160 <__multiply+0x150>)
 800c04c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c050:	f001 fc16 	bl	800d880 <__assert_func>
 800c054:	f100 0514 	add.w	r5, r0, #20
 800c058:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c05c:	462b      	mov	r3, r5
 800c05e:	2200      	movs	r2, #0
 800c060:	4543      	cmp	r3, r8
 800c062:	d321      	bcc.n	800c0a8 <__multiply+0x98>
 800c064:	f107 0114 	add.w	r1, r7, #20
 800c068:	f104 0214 	add.w	r2, r4, #20
 800c06c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c070:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c074:	9302      	str	r3, [sp, #8]
 800c076:	1b13      	subs	r3, r2, r4
 800c078:	3b15      	subs	r3, #21
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	3304      	adds	r3, #4
 800c080:	f104 0715 	add.w	r7, r4, #21
 800c084:	42ba      	cmp	r2, r7
 800c086:	bf38      	it	cc
 800c088:	2304      	movcc	r3, #4
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	9b02      	ldr	r3, [sp, #8]
 800c08e:	9103      	str	r1, [sp, #12]
 800c090:	428b      	cmp	r3, r1
 800c092:	d80c      	bhi.n	800c0ae <__multiply+0x9e>
 800c094:	2e00      	cmp	r6, #0
 800c096:	dd03      	ble.n	800c0a0 <__multiply+0x90>
 800c098:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d05b      	beq.n	800c158 <__multiply+0x148>
 800c0a0:	6106      	str	r6, [r0, #16]
 800c0a2:	b005      	add	sp, #20
 800c0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a8:	f843 2b04 	str.w	r2, [r3], #4
 800c0ac:	e7d8      	b.n	800c060 <__multiply+0x50>
 800c0ae:	f8b1 a000 	ldrh.w	sl, [r1]
 800c0b2:	f1ba 0f00 	cmp.w	sl, #0
 800c0b6:	d024      	beq.n	800c102 <__multiply+0xf2>
 800c0b8:	f104 0e14 	add.w	lr, r4, #20
 800c0bc:	46a9      	mov	r9, r5
 800c0be:	f04f 0c00 	mov.w	ip, #0
 800c0c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0c6:	f8d9 3000 	ldr.w	r3, [r9]
 800c0ca:	fa1f fb87 	uxth.w	fp, r7
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c0d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c0d8:	f8d9 7000 	ldr.w	r7, [r9]
 800c0dc:	4463      	add	r3, ip
 800c0de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c0e2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c0e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c0f0:	4572      	cmp	r2, lr
 800c0f2:	f849 3b04 	str.w	r3, [r9], #4
 800c0f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c0fa:	d8e2      	bhi.n	800c0c2 <__multiply+0xb2>
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	f845 c003 	str.w	ip, [r5, r3]
 800c102:	9b03      	ldr	r3, [sp, #12]
 800c104:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c108:	3104      	adds	r1, #4
 800c10a:	f1b9 0f00 	cmp.w	r9, #0
 800c10e:	d021      	beq.n	800c154 <__multiply+0x144>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	f104 0c14 	add.w	ip, r4, #20
 800c116:	46ae      	mov	lr, r5
 800c118:	f04f 0a00 	mov.w	sl, #0
 800c11c:	f8bc b000 	ldrh.w	fp, [ip]
 800c120:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c124:	fb09 770b 	mla	r7, r9, fp, r7
 800c128:	4457      	add	r7, sl
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c130:	f84e 3b04 	str.w	r3, [lr], #4
 800c134:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c13c:	f8be 3000 	ldrh.w	r3, [lr]
 800c140:	fb09 330a 	mla	r3, r9, sl, r3
 800c144:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c148:	4562      	cmp	r2, ip
 800c14a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c14e:	d8e5      	bhi.n	800c11c <__multiply+0x10c>
 800c150:	9f01      	ldr	r7, [sp, #4]
 800c152:	51eb      	str	r3, [r5, r7]
 800c154:	3504      	adds	r5, #4
 800c156:	e799      	b.n	800c08c <__multiply+0x7c>
 800c158:	3e01      	subs	r6, #1
 800c15a:	e79b      	b.n	800c094 <__multiply+0x84>
 800c15c:	0800e7b5 	.word	0x0800e7b5
 800c160:	0800e7c6 	.word	0x0800e7c6

0800c164 <__pow5mult>:
 800c164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c168:	4615      	mov	r5, r2
 800c16a:	f012 0203 	ands.w	r2, r2, #3
 800c16e:	4607      	mov	r7, r0
 800c170:	460e      	mov	r6, r1
 800c172:	d007      	beq.n	800c184 <__pow5mult+0x20>
 800c174:	4c25      	ldr	r4, [pc, #148]	@ (800c20c <__pow5mult+0xa8>)
 800c176:	3a01      	subs	r2, #1
 800c178:	2300      	movs	r3, #0
 800c17a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c17e:	f7ff fe55 	bl	800be2c <__multadd>
 800c182:	4606      	mov	r6, r0
 800c184:	10ad      	asrs	r5, r5, #2
 800c186:	d03d      	beq.n	800c204 <__pow5mult+0xa0>
 800c188:	69fc      	ldr	r4, [r7, #28]
 800c18a:	b97c      	cbnz	r4, 800c1ac <__pow5mult+0x48>
 800c18c:	2010      	movs	r0, #16
 800c18e:	f7ff fd35 	bl	800bbfc <malloc>
 800c192:	4602      	mov	r2, r0
 800c194:	61f8      	str	r0, [r7, #28]
 800c196:	b928      	cbnz	r0, 800c1a4 <__pow5mult+0x40>
 800c198:	4b1d      	ldr	r3, [pc, #116]	@ (800c210 <__pow5mult+0xac>)
 800c19a:	481e      	ldr	r0, [pc, #120]	@ (800c214 <__pow5mult+0xb0>)
 800c19c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c1a0:	f001 fb6e 	bl	800d880 <__assert_func>
 800c1a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1a8:	6004      	str	r4, [r0, #0]
 800c1aa:	60c4      	str	r4, [r0, #12]
 800c1ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c1b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1b4:	b94c      	cbnz	r4, 800c1ca <__pow5mult+0x66>
 800c1b6:	f240 2171 	movw	r1, #625	@ 0x271
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	f7ff ff12 	bl	800bfe4 <__i2b>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	6003      	str	r3, [r0, #0]
 800c1ca:	f04f 0900 	mov.w	r9, #0
 800c1ce:	07eb      	lsls	r3, r5, #31
 800c1d0:	d50a      	bpl.n	800c1e8 <__pow5mult+0x84>
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	f7ff ff1a 	bl	800c010 <__multiply>
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4680      	mov	r8, r0
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	f7ff fe01 	bl	800bde8 <_Bfree>
 800c1e6:	4646      	mov	r6, r8
 800c1e8:	106d      	asrs	r5, r5, #1
 800c1ea:	d00b      	beq.n	800c204 <__pow5mult+0xa0>
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	b938      	cbnz	r0, 800c200 <__pow5mult+0x9c>
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff ff0b 	bl	800c010 <__multiply>
 800c1fa:	6020      	str	r0, [r4, #0]
 800c1fc:	f8c0 9000 	str.w	r9, [r0]
 800c200:	4604      	mov	r4, r0
 800c202:	e7e4      	b.n	800c1ce <__pow5mult+0x6a>
 800c204:	4630      	mov	r0, r6
 800c206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c20a:	bf00      	nop
 800c20c:	0800e820 	.word	0x0800e820
 800c210:	0800e746 	.word	0x0800e746
 800c214:	0800e7c6 	.word	0x0800e7c6

0800c218 <__lshift>:
 800c218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c21c:	460c      	mov	r4, r1
 800c21e:	6849      	ldr	r1, [r1, #4]
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c226:	68a3      	ldr	r3, [r4, #8]
 800c228:	4607      	mov	r7, r0
 800c22a:	4691      	mov	r9, r2
 800c22c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c230:	f108 0601 	add.w	r6, r8, #1
 800c234:	42b3      	cmp	r3, r6
 800c236:	db0b      	blt.n	800c250 <__lshift+0x38>
 800c238:	4638      	mov	r0, r7
 800c23a:	f7ff fd95 	bl	800bd68 <_Balloc>
 800c23e:	4605      	mov	r5, r0
 800c240:	b948      	cbnz	r0, 800c256 <__lshift+0x3e>
 800c242:	4602      	mov	r2, r0
 800c244:	4b28      	ldr	r3, [pc, #160]	@ (800c2e8 <__lshift+0xd0>)
 800c246:	4829      	ldr	r0, [pc, #164]	@ (800c2ec <__lshift+0xd4>)
 800c248:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c24c:	f001 fb18 	bl	800d880 <__assert_func>
 800c250:	3101      	adds	r1, #1
 800c252:	005b      	lsls	r3, r3, #1
 800c254:	e7ee      	b.n	800c234 <__lshift+0x1c>
 800c256:	2300      	movs	r3, #0
 800c258:	f100 0114 	add.w	r1, r0, #20
 800c25c:	f100 0210 	add.w	r2, r0, #16
 800c260:	4618      	mov	r0, r3
 800c262:	4553      	cmp	r3, sl
 800c264:	db33      	blt.n	800c2ce <__lshift+0xb6>
 800c266:	6920      	ldr	r0, [r4, #16]
 800c268:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c26c:	f104 0314 	add.w	r3, r4, #20
 800c270:	f019 091f 	ands.w	r9, r9, #31
 800c274:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c278:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c27c:	d02b      	beq.n	800c2d6 <__lshift+0xbe>
 800c27e:	f1c9 0e20 	rsb	lr, r9, #32
 800c282:	468a      	mov	sl, r1
 800c284:	2200      	movs	r2, #0
 800c286:	6818      	ldr	r0, [r3, #0]
 800c288:	fa00 f009 	lsl.w	r0, r0, r9
 800c28c:	4310      	orrs	r0, r2
 800c28e:	f84a 0b04 	str.w	r0, [sl], #4
 800c292:	f853 2b04 	ldr.w	r2, [r3], #4
 800c296:	459c      	cmp	ip, r3
 800c298:	fa22 f20e 	lsr.w	r2, r2, lr
 800c29c:	d8f3      	bhi.n	800c286 <__lshift+0x6e>
 800c29e:	ebac 0304 	sub.w	r3, ip, r4
 800c2a2:	3b15      	subs	r3, #21
 800c2a4:	f023 0303 	bic.w	r3, r3, #3
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	f104 0015 	add.w	r0, r4, #21
 800c2ae:	4584      	cmp	ip, r0
 800c2b0:	bf38      	it	cc
 800c2b2:	2304      	movcc	r3, #4
 800c2b4:	50ca      	str	r2, [r1, r3]
 800c2b6:	b10a      	cbz	r2, 800c2bc <__lshift+0xa4>
 800c2b8:	f108 0602 	add.w	r6, r8, #2
 800c2bc:	3e01      	subs	r6, #1
 800c2be:	4638      	mov	r0, r7
 800c2c0:	612e      	str	r6, [r5, #16]
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	f7ff fd90 	bl	800bde8 <_Bfree>
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	e7c5      	b.n	800c262 <__lshift+0x4a>
 800c2d6:	3904      	subs	r1, #4
 800c2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2e0:	459c      	cmp	ip, r3
 800c2e2:	d8f9      	bhi.n	800c2d8 <__lshift+0xc0>
 800c2e4:	e7ea      	b.n	800c2bc <__lshift+0xa4>
 800c2e6:	bf00      	nop
 800c2e8:	0800e7b5 	.word	0x0800e7b5
 800c2ec:	0800e7c6 	.word	0x0800e7c6

0800c2f0 <__mcmp>:
 800c2f0:	690a      	ldr	r2, [r1, #16]
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	6900      	ldr	r0, [r0, #16]
 800c2f6:	1a80      	subs	r0, r0, r2
 800c2f8:	b530      	push	{r4, r5, lr}
 800c2fa:	d10e      	bne.n	800c31a <__mcmp+0x2a>
 800c2fc:	3314      	adds	r3, #20
 800c2fe:	3114      	adds	r1, #20
 800c300:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c304:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c30c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c310:	4295      	cmp	r5, r2
 800c312:	d003      	beq.n	800c31c <__mcmp+0x2c>
 800c314:	d205      	bcs.n	800c322 <__mcmp+0x32>
 800c316:	f04f 30ff 	mov.w	r0, #4294967295
 800c31a:	bd30      	pop	{r4, r5, pc}
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	d3f3      	bcc.n	800c308 <__mcmp+0x18>
 800c320:	e7fb      	b.n	800c31a <__mcmp+0x2a>
 800c322:	2001      	movs	r0, #1
 800c324:	e7f9      	b.n	800c31a <__mcmp+0x2a>
	...

0800c328 <__mdiff>:
 800c328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32c:	4689      	mov	r9, r1
 800c32e:	4606      	mov	r6, r0
 800c330:	4611      	mov	r1, r2
 800c332:	4648      	mov	r0, r9
 800c334:	4614      	mov	r4, r2
 800c336:	f7ff ffdb 	bl	800c2f0 <__mcmp>
 800c33a:	1e05      	subs	r5, r0, #0
 800c33c:	d112      	bne.n	800c364 <__mdiff+0x3c>
 800c33e:	4629      	mov	r1, r5
 800c340:	4630      	mov	r0, r6
 800c342:	f7ff fd11 	bl	800bd68 <_Balloc>
 800c346:	4602      	mov	r2, r0
 800c348:	b928      	cbnz	r0, 800c356 <__mdiff+0x2e>
 800c34a:	4b3f      	ldr	r3, [pc, #252]	@ (800c448 <__mdiff+0x120>)
 800c34c:	f240 2137 	movw	r1, #567	@ 0x237
 800c350:	483e      	ldr	r0, [pc, #248]	@ (800c44c <__mdiff+0x124>)
 800c352:	f001 fa95 	bl	800d880 <__assert_func>
 800c356:	2301      	movs	r3, #1
 800c358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c35c:	4610      	mov	r0, r2
 800c35e:	b003      	add	sp, #12
 800c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	bfbc      	itt	lt
 800c366:	464b      	movlt	r3, r9
 800c368:	46a1      	movlt	r9, r4
 800c36a:	4630      	mov	r0, r6
 800c36c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c370:	bfba      	itte	lt
 800c372:	461c      	movlt	r4, r3
 800c374:	2501      	movlt	r5, #1
 800c376:	2500      	movge	r5, #0
 800c378:	f7ff fcf6 	bl	800bd68 <_Balloc>
 800c37c:	4602      	mov	r2, r0
 800c37e:	b918      	cbnz	r0, 800c388 <__mdiff+0x60>
 800c380:	4b31      	ldr	r3, [pc, #196]	@ (800c448 <__mdiff+0x120>)
 800c382:	f240 2145 	movw	r1, #581	@ 0x245
 800c386:	e7e3      	b.n	800c350 <__mdiff+0x28>
 800c388:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c38c:	6926      	ldr	r6, [r4, #16]
 800c38e:	60c5      	str	r5, [r0, #12]
 800c390:	f109 0310 	add.w	r3, r9, #16
 800c394:	f109 0514 	add.w	r5, r9, #20
 800c398:	f104 0e14 	add.w	lr, r4, #20
 800c39c:	f100 0b14 	add.w	fp, r0, #20
 800c3a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c3a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	46d9      	mov	r9, fp
 800c3ac:	f04f 0c00 	mov.w	ip, #0
 800c3b0:	9b01      	ldr	r3, [sp, #4]
 800c3b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c3b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c3ba:	9301      	str	r3, [sp, #4]
 800c3bc:	fa1f f38a 	uxth.w	r3, sl
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	b283      	uxth	r3, r0
 800c3c4:	1acb      	subs	r3, r1, r3
 800c3c6:	0c00      	lsrs	r0, r0, #16
 800c3c8:	4463      	add	r3, ip
 800c3ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c3ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c3d8:	4576      	cmp	r6, lr
 800c3da:	f849 3b04 	str.w	r3, [r9], #4
 800c3de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3e2:	d8e5      	bhi.n	800c3b0 <__mdiff+0x88>
 800c3e4:	1b33      	subs	r3, r6, r4
 800c3e6:	3b15      	subs	r3, #21
 800c3e8:	f023 0303 	bic.w	r3, r3, #3
 800c3ec:	3415      	adds	r4, #21
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	42a6      	cmp	r6, r4
 800c3f2:	bf38      	it	cc
 800c3f4:	2304      	movcc	r3, #4
 800c3f6:	441d      	add	r5, r3
 800c3f8:	445b      	add	r3, fp
 800c3fa:	461e      	mov	r6, r3
 800c3fc:	462c      	mov	r4, r5
 800c3fe:	4544      	cmp	r4, r8
 800c400:	d30e      	bcc.n	800c420 <__mdiff+0xf8>
 800c402:	f108 0103 	add.w	r1, r8, #3
 800c406:	1b49      	subs	r1, r1, r5
 800c408:	f021 0103 	bic.w	r1, r1, #3
 800c40c:	3d03      	subs	r5, #3
 800c40e:	45a8      	cmp	r8, r5
 800c410:	bf38      	it	cc
 800c412:	2100      	movcc	r1, #0
 800c414:	440b      	add	r3, r1
 800c416:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c41a:	b191      	cbz	r1, 800c442 <__mdiff+0x11a>
 800c41c:	6117      	str	r7, [r2, #16]
 800c41e:	e79d      	b.n	800c35c <__mdiff+0x34>
 800c420:	f854 1b04 	ldr.w	r1, [r4], #4
 800c424:	46e6      	mov	lr, ip
 800c426:	0c08      	lsrs	r0, r1, #16
 800c428:	fa1c fc81 	uxtah	ip, ip, r1
 800c42c:	4471      	add	r1, lr
 800c42e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c432:	b289      	uxth	r1, r1
 800c434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c438:	f846 1b04 	str.w	r1, [r6], #4
 800c43c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c440:	e7dd      	b.n	800c3fe <__mdiff+0xd6>
 800c442:	3f01      	subs	r7, #1
 800c444:	e7e7      	b.n	800c416 <__mdiff+0xee>
 800c446:	bf00      	nop
 800c448:	0800e7b5 	.word	0x0800e7b5
 800c44c:	0800e7c6 	.word	0x0800e7c6

0800c450 <__ulp>:
 800c450:	b082      	sub	sp, #8
 800c452:	ed8d 0b00 	vstr	d0, [sp]
 800c456:	9a01      	ldr	r2, [sp, #4]
 800c458:	4b0f      	ldr	r3, [pc, #60]	@ (800c498 <__ulp+0x48>)
 800c45a:	4013      	ands	r3, r2
 800c45c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c460:	2b00      	cmp	r3, #0
 800c462:	dc08      	bgt.n	800c476 <__ulp+0x26>
 800c464:	425b      	negs	r3, r3
 800c466:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c46a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c46e:	da04      	bge.n	800c47a <__ulp+0x2a>
 800c470:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c474:	4113      	asrs	r3, r2
 800c476:	2200      	movs	r2, #0
 800c478:	e008      	b.n	800c48c <__ulp+0x3c>
 800c47a:	f1a2 0314 	sub.w	r3, r2, #20
 800c47e:	2b1e      	cmp	r3, #30
 800c480:	bfda      	itte	le
 800c482:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c486:	40da      	lsrle	r2, r3
 800c488:	2201      	movgt	r2, #1
 800c48a:	2300      	movs	r3, #0
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	ec41 0b10 	vmov	d0, r0, r1
 800c494:	b002      	add	sp, #8
 800c496:	4770      	bx	lr
 800c498:	7ff00000 	.word	0x7ff00000

0800c49c <__b2d>:
 800c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a0:	6906      	ldr	r6, [r0, #16]
 800c4a2:	f100 0814 	add.w	r8, r0, #20
 800c4a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c4aa:	1f37      	subs	r7, r6, #4
 800c4ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	f7ff fd4b 	bl	800bf4c <__hi0bits>
 800c4b6:	f1c0 0320 	rsb	r3, r0, #32
 800c4ba:	280a      	cmp	r0, #10
 800c4bc:	600b      	str	r3, [r1, #0]
 800c4be:	491b      	ldr	r1, [pc, #108]	@ (800c52c <__b2d+0x90>)
 800c4c0:	dc15      	bgt.n	800c4ee <__b2d+0x52>
 800c4c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c4c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c4ca:	45b8      	cmp	r8, r7
 800c4cc:	ea43 0501 	orr.w	r5, r3, r1
 800c4d0:	bf34      	ite	cc
 800c4d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4d6:	2300      	movcs	r3, #0
 800c4d8:	3015      	adds	r0, #21
 800c4da:	fa02 f000 	lsl.w	r0, r2, r0
 800c4de:	fa23 f30c 	lsr.w	r3, r3, ip
 800c4e2:	4303      	orrs	r3, r0
 800c4e4:	461c      	mov	r4, r3
 800c4e6:	ec45 4b10 	vmov	d0, r4, r5
 800c4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ee:	45b8      	cmp	r8, r7
 800c4f0:	bf3a      	itte	cc
 800c4f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c4fa:	2300      	movcs	r3, #0
 800c4fc:	380b      	subs	r0, #11
 800c4fe:	d012      	beq.n	800c526 <__b2d+0x8a>
 800c500:	f1c0 0120 	rsb	r1, r0, #32
 800c504:	fa23 f401 	lsr.w	r4, r3, r1
 800c508:	4082      	lsls	r2, r0
 800c50a:	4322      	orrs	r2, r4
 800c50c:	4547      	cmp	r7, r8
 800c50e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c512:	bf8c      	ite	hi
 800c514:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c518:	2200      	movls	r2, #0
 800c51a:	4083      	lsls	r3, r0
 800c51c:	40ca      	lsrs	r2, r1
 800c51e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c522:	4313      	orrs	r3, r2
 800c524:	e7de      	b.n	800c4e4 <__b2d+0x48>
 800c526:	ea42 0501 	orr.w	r5, r2, r1
 800c52a:	e7db      	b.n	800c4e4 <__b2d+0x48>
 800c52c:	3ff00000 	.word	0x3ff00000

0800c530 <__d2b>:
 800c530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c534:	460f      	mov	r7, r1
 800c536:	2101      	movs	r1, #1
 800c538:	ec59 8b10 	vmov	r8, r9, d0
 800c53c:	4616      	mov	r6, r2
 800c53e:	f7ff fc13 	bl	800bd68 <_Balloc>
 800c542:	4604      	mov	r4, r0
 800c544:	b930      	cbnz	r0, 800c554 <__d2b+0x24>
 800c546:	4602      	mov	r2, r0
 800c548:	4b23      	ldr	r3, [pc, #140]	@ (800c5d8 <__d2b+0xa8>)
 800c54a:	4824      	ldr	r0, [pc, #144]	@ (800c5dc <__d2b+0xac>)
 800c54c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c550:	f001 f996 	bl	800d880 <__assert_func>
 800c554:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c55c:	b10d      	cbz	r5, 800c562 <__d2b+0x32>
 800c55e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	f1b8 0300 	subs.w	r3, r8, #0
 800c568:	d023      	beq.n	800c5b2 <__d2b+0x82>
 800c56a:	4668      	mov	r0, sp
 800c56c:	9300      	str	r3, [sp, #0]
 800c56e:	f7ff fd0c 	bl	800bf8a <__lo0bits>
 800c572:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c576:	b1d0      	cbz	r0, 800c5ae <__d2b+0x7e>
 800c578:	f1c0 0320 	rsb	r3, r0, #32
 800c57c:	fa02 f303 	lsl.w	r3, r2, r3
 800c580:	430b      	orrs	r3, r1
 800c582:	40c2      	lsrs	r2, r0
 800c584:	6163      	str	r3, [r4, #20]
 800c586:	9201      	str	r2, [sp, #4]
 800c588:	9b01      	ldr	r3, [sp, #4]
 800c58a:	61a3      	str	r3, [r4, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bf0c      	ite	eq
 800c590:	2201      	moveq	r2, #1
 800c592:	2202      	movne	r2, #2
 800c594:	6122      	str	r2, [r4, #16]
 800c596:	b1a5      	cbz	r5, 800c5c2 <__d2b+0x92>
 800c598:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c59c:	4405      	add	r5, r0
 800c59e:	603d      	str	r5, [r7, #0]
 800c5a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5a4:	6030      	str	r0, [r6, #0]
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ae:	6161      	str	r1, [r4, #20]
 800c5b0:	e7ea      	b.n	800c588 <__d2b+0x58>
 800c5b2:	a801      	add	r0, sp, #4
 800c5b4:	f7ff fce9 	bl	800bf8a <__lo0bits>
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	6163      	str	r3, [r4, #20]
 800c5bc:	3020      	adds	r0, #32
 800c5be:	2201      	movs	r2, #1
 800c5c0:	e7e8      	b.n	800c594 <__d2b+0x64>
 800c5c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5ca:	6038      	str	r0, [r7, #0]
 800c5cc:	6918      	ldr	r0, [r3, #16]
 800c5ce:	f7ff fcbd 	bl	800bf4c <__hi0bits>
 800c5d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5d6:	e7e5      	b.n	800c5a4 <__d2b+0x74>
 800c5d8:	0800e7b5 	.word	0x0800e7b5
 800c5dc:	0800e7c6 	.word	0x0800e7c6

0800c5e0 <__ratio>:
 800c5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	b085      	sub	sp, #20
 800c5e6:	e9cd 1000 	strd	r1, r0, [sp]
 800c5ea:	a902      	add	r1, sp, #8
 800c5ec:	f7ff ff56 	bl	800c49c <__b2d>
 800c5f0:	9800      	ldr	r0, [sp, #0]
 800c5f2:	a903      	add	r1, sp, #12
 800c5f4:	ec55 4b10 	vmov	r4, r5, d0
 800c5f8:	f7ff ff50 	bl	800c49c <__b2d>
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	6919      	ldr	r1, [r3, #16]
 800c600:	9b00      	ldr	r3, [sp, #0]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	1ac9      	subs	r1, r1, r3
 800c606:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	ec5b ab10 	vmov	sl, fp, d0
 800c610:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c614:	2b00      	cmp	r3, #0
 800c616:	bfce      	itee	gt
 800c618:	462a      	movgt	r2, r5
 800c61a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c61e:	465a      	movle	r2, fp
 800c620:	462f      	mov	r7, r5
 800c622:	46d9      	mov	r9, fp
 800c624:	bfcc      	ite	gt
 800c626:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c62a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c62e:	464b      	mov	r3, r9
 800c630:	4652      	mov	r2, sl
 800c632:	4620      	mov	r0, r4
 800c634:	4639      	mov	r1, r7
 800c636:	f7f4 f911 	bl	800085c <__aeabi_ddiv>
 800c63a:	ec41 0b10 	vmov	d0, r0, r1
 800c63e:	b005      	add	sp, #20
 800c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c644 <__copybits>:
 800c644:	3901      	subs	r1, #1
 800c646:	b570      	push	{r4, r5, r6, lr}
 800c648:	1149      	asrs	r1, r1, #5
 800c64a:	6914      	ldr	r4, [r2, #16]
 800c64c:	3101      	adds	r1, #1
 800c64e:	f102 0314 	add.w	r3, r2, #20
 800c652:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c65a:	1f05      	subs	r5, r0, #4
 800c65c:	42a3      	cmp	r3, r4
 800c65e:	d30c      	bcc.n	800c67a <__copybits+0x36>
 800c660:	1aa3      	subs	r3, r4, r2
 800c662:	3b11      	subs	r3, #17
 800c664:	f023 0303 	bic.w	r3, r3, #3
 800c668:	3211      	adds	r2, #17
 800c66a:	42a2      	cmp	r2, r4
 800c66c:	bf88      	it	hi
 800c66e:	2300      	movhi	r3, #0
 800c670:	4418      	add	r0, r3
 800c672:	2300      	movs	r3, #0
 800c674:	4288      	cmp	r0, r1
 800c676:	d305      	bcc.n	800c684 <__copybits+0x40>
 800c678:	bd70      	pop	{r4, r5, r6, pc}
 800c67a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c67e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c682:	e7eb      	b.n	800c65c <__copybits+0x18>
 800c684:	f840 3b04 	str.w	r3, [r0], #4
 800c688:	e7f4      	b.n	800c674 <__copybits+0x30>

0800c68a <__any_on>:
 800c68a:	f100 0214 	add.w	r2, r0, #20
 800c68e:	6900      	ldr	r0, [r0, #16]
 800c690:	114b      	asrs	r3, r1, #5
 800c692:	4298      	cmp	r0, r3
 800c694:	b510      	push	{r4, lr}
 800c696:	db11      	blt.n	800c6bc <__any_on+0x32>
 800c698:	dd0a      	ble.n	800c6b0 <__any_on+0x26>
 800c69a:	f011 011f 	ands.w	r1, r1, #31
 800c69e:	d007      	beq.n	800c6b0 <__any_on+0x26>
 800c6a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6a4:	fa24 f001 	lsr.w	r0, r4, r1
 800c6a8:	fa00 f101 	lsl.w	r1, r0, r1
 800c6ac:	428c      	cmp	r4, r1
 800c6ae:	d10b      	bne.n	800c6c8 <__any_on+0x3e>
 800c6b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d803      	bhi.n	800c6c0 <__any_on+0x36>
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	bd10      	pop	{r4, pc}
 800c6bc:	4603      	mov	r3, r0
 800c6be:	e7f7      	b.n	800c6b0 <__any_on+0x26>
 800c6c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	d0f5      	beq.n	800c6b4 <__any_on+0x2a>
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	e7f6      	b.n	800c6ba <__any_on+0x30>

0800c6cc <sulp>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	ec45 4b10 	vmov	d0, r4, r5
 800c6d6:	4616      	mov	r6, r2
 800c6d8:	f7ff feba 	bl	800c450 <__ulp>
 800c6dc:	ec51 0b10 	vmov	r0, r1, d0
 800c6e0:	b17e      	cbz	r6, 800c702 <sulp+0x36>
 800c6e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c6e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	dd09      	ble.n	800c702 <sulp+0x36>
 800c6ee:	051b      	lsls	r3, r3, #20
 800c6f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c6f4:	2400      	movs	r4, #0
 800c6f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	462b      	mov	r3, r5
 800c6fe:	f7f3 ff83 	bl	8000608 <__aeabi_dmul>
 800c702:	ec41 0b10 	vmov	d0, r0, r1
 800c706:	bd70      	pop	{r4, r5, r6, pc}

0800c708 <_strtod_l>:
 800c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	b09f      	sub	sp, #124	@ 0x7c
 800c70e:	460c      	mov	r4, r1
 800c710:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c712:	2200      	movs	r2, #0
 800c714:	921a      	str	r2, [sp, #104]	@ 0x68
 800c716:	9005      	str	r0, [sp, #20]
 800c718:	f04f 0a00 	mov.w	sl, #0
 800c71c:	f04f 0b00 	mov.w	fp, #0
 800c720:	460a      	mov	r2, r1
 800c722:	9219      	str	r2, [sp, #100]	@ 0x64
 800c724:	7811      	ldrb	r1, [r2, #0]
 800c726:	292b      	cmp	r1, #43	@ 0x2b
 800c728:	d04a      	beq.n	800c7c0 <_strtod_l+0xb8>
 800c72a:	d838      	bhi.n	800c79e <_strtod_l+0x96>
 800c72c:	290d      	cmp	r1, #13
 800c72e:	d832      	bhi.n	800c796 <_strtod_l+0x8e>
 800c730:	2908      	cmp	r1, #8
 800c732:	d832      	bhi.n	800c79a <_strtod_l+0x92>
 800c734:	2900      	cmp	r1, #0
 800c736:	d03b      	beq.n	800c7b0 <_strtod_l+0xa8>
 800c738:	2200      	movs	r2, #0
 800c73a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c73c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c73e:	782a      	ldrb	r2, [r5, #0]
 800c740:	2a30      	cmp	r2, #48	@ 0x30
 800c742:	f040 80b3 	bne.w	800c8ac <_strtod_l+0x1a4>
 800c746:	786a      	ldrb	r2, [r5, #1]
 800c748:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c74c:	2a58      	cmp	r2, #88	@ 0x58
 800c74e:	d16e      	bne.n	800c82e <_strtod_l+0x126>
 800c750:	9302      	str	r3, [sp, #8]
 800c752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	ab1a      	add	r3, sp, #104	@ 0x68
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	4a8e      	ldr	r2, [pc, #568]	@ (800c994 <_strtod_l+0x28c>)
 800c75c:	9805      	ldr	r0, [sp, #20]
 800c75e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c760:	a919      	add	r1, sp, #100	@ 0x64
 800c762:	f001 f927 	bl	800d9b4 <__gethex>
 800c766:	f010 060f 	ands.w	r6, r0, #15
 800c76a:	4604      	mov	r4, r0
 800c76c:	d005      	beq.n	800c77a <_strtod_l+0x72>
 800c76e:	2e06      	cmp	r6, #6
 800c770:	d128      	bne.n	800c7c4 <_strtod_l+0xbc>
 800c772:	3501      	adds	r5, #1
 800c774:	2300      	movs	r3, #0
 800c776:	9519      	str	r5, [sp, #100]	@ 0x64
 800c778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c77a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f040 858e 	bne.w	800d29e <_strtod_l+0xb96>
 800c782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c784:	b1cb      	cbz	r3, 800c7ba <_strtod_l+0xb2>
 800c786:	4652      	mov	r2, sl
 800c788:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c78c:	ec43 2b10 	vmov	d0, r2, r3
 800c790:	b01f      	add	sp, #124	@ 0x7c
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	2920      	cmp	r1, #32
 800c798:	d1ce      	bne.n	800c738 <_strtod_l+0x30>
 800c79a:	3201      	adds	r2, #1
 800c79c:	e7c1      	b.n	800c722 <_strtod_l+0x1a>
 800c79e:	292d      	cmp	r1, #45	@ 0x2d
 800c7a0:	d1ca      	bne.n	800c738 <_strtod_l+0x30>
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c7a6:	1c51      	adds	r1, r2, #1
 800c7a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c7aa:	7852      	ldrb	r2, [r2, #1]
 800c7ac:	2a00      	cmp	r2, #0
 800c7ae:	d1c5      	bne.n	800c73c <_strtod_l+0x34>
 800c7b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f040 8570 	bne.w	800d29a <_strtod_l+0xb92>
 800c7ba:	4652      	mov	r2, sl
 800c7bc:	465b      	mov	r3, fp
 800c7be:	e7e5      	b.n	800c78c <_strtod_l+0x84>
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	e7ef      	b.n	800c7a4 <_strtod_l+0x9c>
 800c7c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c7c6:	b13a      	cbz	r2, 800c7d8 <_strtod_l+0xd0>
 800c7c8:	2135      	movs	r1, #53	@ 0x35
 800c7ca:	a81c      	add	r0, sp, #112	@ 0x70
 800c7cc:	f7ff ff3a 	bl	800c644 <__copybits>
 800c7d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7d2:	9805      	ldr	r0, [sp, #20]
 800c7d4:	f7ff fb08 	bl	800bde8 <_Bfree>
 800c7d8:	3e01      	subs	r6, #1
 800c7da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c7dc:	2e04      	cmp	r6, #4
 800c7de:	d806      	bhi.n	800c7ee <_strtod_l+0xe6>
 800c7e0:	e8df f006 	tbb	[pc, r6]
 800c7e4:	201d0314 	.word	0x201d0314
 800c7e8:	14          	.byte	0x14
 800c7e9:	00          	.byte	0x00
 800c7ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c7ee:	05e1      	lsls	r1, r4, #23
 800c7f0:	bf48      	it	mi
 800c7f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c7f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c7fa:	0d1b      	lsrs	r3, r3, #20
 800c7fc:	051b      	lsls	r3, r3, #20
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1bb      	bne.n	800c77a <_strtod_l+0x72>
 800c802:	f7fe fb2f 	bl	800ae64 <__errno>
 800c806:	2322      	movs	r3, #34	@ 0x22
 800c808:	6003      	str	r3, [r0, #0]
 800c80a:	e7b6      	b.n	800c77a <_strtod_l+0x72>
 800c80c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c810:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c814:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c818:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c81c:	e7e7      	b.n	800c7ee <_strtod_l+0xe6>
 800c81e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c99c <_strtod_l+0x294>
 800c822:	e7e4      	b.n	800c7ee <_strtod_l+0xe6>
 800c824:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c828:	f04f 3aff 	mov.w	sl, #4294967295
 800c82c:	e7df      	b.n	800c7ee <_strtod_l+0xe6>
 800c82e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	9219      	str	r2, [sp, #100]	@ 0x64
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	2b30      	cmp	r3, #48	@ 0x30
 800c838:	d0f9      	beq.n	800c82e <_strtod_l+0x126>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d09d      	beq.n	800c77a <_strtod_l+0x72>
 800c83e:	2301      	movs	r3, #1
 800c840:	9309      	str	r3, [sp, #36]	@ 0x24
 800c842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c844:	930c      	str	r3, [sp, #48]	@ 0x30
 800c846:	2300      	movs	r3, #0
 800c848:	9308      	str	r3, [sp, #32]
 800c84a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c84c:	461f      	mov	r7, r3
 800c84e:	220a      	movs	r2, #10
 800c850:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c852:	7805      	ldrb	r5, [r0, #0]
 800c854:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c858:	b2d9      	uxtb	r1, r3
 800c85a:	2909      	cmp	r1, #9
 800c85c:	d928      	bls.n	800c8b0 <_strtod_l+0x1a8>
 800c85e:	494e      	ldr	r1, [pc, #312]	@ (800c998 <_strtod_l+0x290>)
 800c860:	2201      	movs	r2, #1
 800c862:	f000 ffd5 	bl	800d810 <strncmp>
 800c866:	2800      	cmp	r0, #0
 800c868:	d032      	beq.n	800c8d0 <_strtod_l+0x1c8>
 800c86a:	2000      	movs	r0, #0
 800c86c:	462a      	mov	r2, r5
 800c86e:	4681      	mov	r9, r0
 800c870:	463d      	mov	r5, r7
 800c872:	4603      	mov	r3, r0
 800c874:	2a65      	cmp	r2, #101	@ 0x65
 800c876:	d001      	beq.n	800c87c <_strtod_l+0x174>
 800c878:	2a45      	cmp	r2, #69	@ 0x45
 800c87a:	d114      	bne.n	800c8a6 <_strtod_l+0x19e>
 800c87c:	b91d      	cbnz	r5, 800c886 <_strtod_l+0x17e>
 800c87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c880:	4302      	orrs	r2, r0
 800c882:	d095      	beq.n	800c7b0 <_strtod_l+0xa8>
 800c884:	2500      	movs	r5, #0
 800c886:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c888:	1c62      	adds	r2, r4, #1
 800c88a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c88c:	7862      	ldrb	r2, [r4, #1]
 800c88e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c890:	d077      	beq.n	800c982 <_strtod_l+0x27a>
 800c892:	2a2d      	cmp	r2, #45	@ 0x2d
 800c894:	d07b      	beq.n	800c98e <_strtod_l+0x286>
 800c896:	f04f 0c00 	mov.w	ip, #0
 800c89a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c89e:	2909      	cmp	r1, #9
 800c8a0:	f240 8082 	bls.w	800c9a8 <_strtod_l+0x2a0>
 800c8a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c8a6:	f04f 0800 	mov.w	r8, #0
 800c8aa:	e0a2      	b.n	800c9f2 <_strtod_l+0x2ea>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	e7c7      	b.n	800c840 <_strtod_l+0x138>
 800c8b0:	2f08      	cmp	r7, #8
 800c8b2:	bfd5      	itete	le
 800c8b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c8b6:	9908      	ldrgt	r1, [sp, #32]
 800c8b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c8c0:	f100 0001 	add.w	r0, r0, #1
 800c8c4:	bfd4      	ite	le
 800c8c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c8c8:	9308      	strgt	r3, [sp, #32]
 800c8ca:	3701      	adds	r7, #1
 800c8cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c8ce:	e7bf      	b.n	800c850 <_strtod_l+0x148>
 800c8d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8d2:	1c5a      	adds	r2, r3, #1
 800c8d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8d6:	785a      	ldrb	r2, [r3, #1]
 800c8d8:	b37f      	cbz	r7, 800c93a <_strtod_l+0x232>
 800c8da:	4681      	mov	r9, r0
 800c8dc:	463d      	mov	r5, r7
 800c8de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c8e2:	2b09      	cmp	r3, #9
 800c8e4:	d912      	bls.n	800c90c <_strtod_l+0x204>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e7c4      	b.n	800c874 <_strtod_l+0x16c>
 800c8ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8ec:	1c5a      	adds	r2, r3, #1
 800c8ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8f0:	785a      	ldrb	r2, [r3, #1]
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	2a30      	cmp	r2, #48	@ 0x30
 800c8f6:	d0f8      	beq.n	800c8ea <_strtod_l+0x1e2>
 800c8f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	f200 84d3 	bhi.w	800d2a8 <_strtod_l+0xba0>
 800c902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c904:	930c      	str	r3, [sp, #48]	@ 0x30
 800c906:	4681      	mov	r9, r0
 800c908:	2000      	movs	r0, #0
 800c90a:	4605      	mov	r5, r0
 800c90c:	3a30      	subs	r2, #48	@ 0x30
 800c90e:	f100 0301 	add.w	r3, r0, #1
 800c912:	d02a      	beq.n	800c96a <_strtod_l+0x262>
 800c914:	4499      	add	r9, r3
 800c916:	eb00 0c05 	add.w	ip, r0, r5
 800c91a:	462b      	mov	r3, r5
 800c91c:	210a      	movs	r1, #10
 800c91e:	4563      	cmp	r3, ip
 800c920:	d10d      	bne.n	800c93e <_strtod_l+0x236>
 800c922:	1c69      	adds	r1, r5, #1
 800c924:	4401      	add	r1, r0
 800c926:	4428      	add	r0, r5
 800c928:	2808      	cmp	r0, #8
 800c92a:	dc16      	bgt.n	800c95a <_strtod_l+0x252>
 800c92c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c92e:	230a      	movs	r3, #10
 800c930:	fb03 2300 	mla	r3, r3, r0, r2
 800c934:	930a      	str	r3, [sp, #40]	@ 0x28
 800c936:	2300      	movs	r3, #0
 800c938:	e018      	b.n	800c96c <_strtod_l+0x264>
 800c93a:	4638      	mov	r0, r7
 800c93c:	e7da      	b.n	800c8f4 <_strtod_l+0x1ec>
 800c93e:	2b08      	cmp	r3, #8
 800c940:	f103 0301 	add.w	r3, r3, #1
 800c944:	dc03      	bgt.n	800c94e <_strtod_l+0x246>
 800c946:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c948:	434e      	muls	r6, r1
 800c94a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c94c:	e7e7      	b.n	800c91e <_strtod_l+0x216>
 800c94e:	2b10      	cmp	r3, #16
 800c950:	bfde      	ittt	le
 800c952:	9e08      	ldrle	r6, [sp, #32]
 800c954:	434e      	mulle	r6, r1
 800c956:	9608      	strle	r6, [sp, #32]
 800c958:	e7e1      	b.n	800c91e <_strtod_l+0x216>
 800c95a:	280f      	cmp	r0, #15
 800c95c:	dceb      	bgt.n	800c936 <_strtod_l+0x22e>
 800c95e:	9808      	ldr	r0, [sp, #32]
 800c960:	230a      	movs	r3, #10
 800c962:	fb03 2300 	mla	r3, r3, r0, r2
 800c966:	9308      	str	r3, [sp, #32]
 800c968:	e7e5      	b.n	800c936 <_strtod_l+0x22e>
 800c96a:	4629      	mov	r1, r5
 800c96c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c96e:	1c50      	adds	r0, r2, #1
 800c970:	9019      	str	r0, [sp, #100]	@ 0x64
 800c972:	7852      	ldrb	r2, [r2, #1]
 800c974:	4618      	mov	r0, r3
 800c976:	460d      	mov	r5, r1
 800c978:	e7b1      	b.n	800c8de <_strtod_l+0x1d6>
 800c97a:	f04f 0900 	mov.w	r9, #0
 800c97e:	2301      	movs	r3, #1
 800c980:	e77d      	b.n	800c87e <_strtod_l+0x176>
 800c982:	f04f 0c00 	mov.w	ip, #0
 800c986:	1ca2      	adds	r2, r4, #2
 800c988:	9219      	str	r2, [sp, #100]	@ 0x64
 800c98a:	78a2      	ldrb	r2, [r4, #2]
 800c98c:	e785      	b.n	800c89a <_strtod_l+0x192>
 800c98e:	f04f 0c01 	mov.w	ip, #1
 800c992:	e7f8      	b.n	800c986 <_strtod_l+0x27e>
 800c994:	0800e938 	.word	0x0800e938
 800c998:	0800e920 	.word	0x0800e920
 800c99c:	7ff00000 	.word	0x7ff00000
 800c9a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9a2:	1c51      	adds	r1, r2, #1
 800c9a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9a6:	7852      	ldrb	r2, [r2, #1]
 800c9a8:	2a30      	cmp	r2, #48	@ 0x30
 800c9aa:	d0f9      	beq.n	800c9a0 <_strtod_l+0x298>
 800c9ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c9b0:	2908      	cmp	r1, #8
 800c9b2:	f63f af78 	bhi.w	800c8a6 <_strtod_l+0x19e>
 800c9b6:	3a30      	subs	r2, #48	@ 0x30
 800c9b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c9be:	f04f 080a 	mov.w	r8, #10
 800c9c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9c4:	1c56      	adds	r6, r2, #1
 800c9c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c9c8:	7852      	ldrb	r2, [r2, #1]
 800c9ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c9ce:	f1be 0f09 	cmp.w	lr, #9
 800c9d2:	d939      	bls.n	800ca48 <_strtod_l+0x340>
 800c9d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c9d6:	1a76      	subs	r6, r6, r1
 800c9d8:	2e08      	cmp	r6, #8
 800c9da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c9de:	dc03      	bgt.n	800c9e8 <_strtod_l+0x2e0>
 800c9e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c9e2:	4588      	cmp	r8, r1
 800c9e4:	bfa8      	it	ge
 800c9e6:	4688      	movge	r8, r1
 800c9e8:	f1bc 0f00 	cmp.w	ip, #0
 800c9ec:	d001      	beq.n	800c9f2 <_strtod_l+0x2ea>
 800c9ee:	f1c8 0800 	rsb	r8, r8, #0
 800c9f2:	2d00      	cmp	r5, #0
 800c9f4:	d14e      	bne.n	800ca94 <_strtod_l+0x38c>
 800c9f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9f8:	4308      	orrs	r0, r1
 800c9fa:	f47f aebe 	bne.w	800c77a <_strtod_l+0x72>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f47f aed6 	bne.w	800c7b0 <_strtod_l+0xa8>
 800ca04:	2a69      	cmp	r2, #105	@ 0x69
 800ca06:	d028      	beq.n	800ca5a <_strtod_l+0x352>
 800ca08:	dc25      	bgt.n	800ca56 <_strtod_l+0x34e>
 800ca0a:	2a49      	cmp	r2, #73	@ 0x49
 800ca0c:	d025      	beq.n	800ca5a <_strtod_l+0x352>
 800ca0e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ca10:	f47f aece 	bne.w	800c7b0 <_strtod_l+0xa8>
 800ca14:	499b      	ldr	r1, [pc, #620]	@ (800cc84 <_strtod_l+0x57c>)
 800ca16:	a819      	add	r0, sp, #100	@ 0x64
 800ca18:	f001 f9ee 	bl	800ddf8 <__match>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	f43f aec7 	beq.w	800c7b0 <_strtod_l+0xa8>
 800ca22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2b28      	cmp	r3, #40	@ 0x28
 800ca28:	d12e      	bne.n	800ca88 <_strtod_l+0x380>
 800ca2a:	4997      	ldr	r1, [pc, #604]	@ (800cc88 <_strtod_l+0x580>)
 800ca2c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca2e:	a819      	add	r0, sp, #100	@ 0x64
 800ca30:	f001 f9f6 	bl	800de20 <__hexnan>
 800ca34:	2805      	cmp	r0, #5
 800ca36:	d127      	bne.n	800ca88 <_strtod_l+0x380>
 800ca38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ca3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ca42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ca46:	e698      	b.n	800c77a <_strtod_l+0x72>
 800ca48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ca4a:	fb08 2101 	mla	r1, r8, r1, r2
 800ca4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ca52:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca54:	e7b5      	b.n	800c9c2 <_strtod_l+0x2ba>
 800ca56:	2a6e      	cmp	r2, #110	@ 0x6e
 800ca58:	e7da      	b.n	800ca10 <_strtod_l+0x308>
 800ca5a:	498c      	ldr	r1, [pc, #560]	@ (800cc8c <_strtod_l+0x584>)
 800ca5c:	a819      	add	r0, sp, #100	@ 0x64
 800ca5e:	f001 f9cb 	bl	800ddf8 <__match>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	f43f aea4 	beq.w	800c7b0 <_strtod_l+0xa8>
 800ca68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca6a:	4989      	ldr	r1, [pc, #548]	@ (800cc90 <_strtod_l+0x588>)
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	a819      	add	r0, sp, #100	@ 0x64
 800ca70:	9319      	str	r3, [sp, #100]	@ 0x64
 800ca72:	f001 f9c1 	bl	800ddf8 <__match>
 800ca76:	b910      	cbnz	r0, 800ca7e <_strtod_l+0x376>
 800ca78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ca7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cca0 <_strtod_l+0x598>
 800ca82:	f04f 0a00 	mov.w	sl, #0
 800ca86:	e678      	b.n	800c77a <_strtod_l+0x72>
 800ca88:	4882      	ldr	r0, [pc, #520]	@ (800cc94 <_strtod_l+0x58c>)
 800ca8a:	f000 fef1 	bl	800d870 <nan>
 800ca8e:	ec5b ab10 	vmov	sl, fp, d0
 800ca92:	e672      	b.n	800c77a <_strtod_l+0x72>
 800ca94:	eba8 0309 	sub.w	r3, r8, r9
 800ca98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca9c:	2f00      	cmp	r7, #0
 800ca9e:	bf08      	it	eq
 800caa0:	462f      	moveq	r7, r5
 800caa2:	2d10      	cmp	r5, #16
 800caa4:	462c      	mov	r4, r5
 800caa6:	bfa8      	it	ge
 800caa8:	2410      	movge	r4, #16
 800caaa:	f7f3 fd33 	bl	8000514 <__aeabi_ui2d>
 800caae:	2d09      	cmp	r5, #9
 800cab0:	4682      	mov	sl, r0
 800cab2:	468b      	mov	fp, r1
 800cab4:	dc13      	bgt.n	800cade <_strtod_l+0x3d6>
 800cab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f43f ae5e 	beq.w	800c77a <_strtod_l+0x72>
 800cabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac0:	dd78      	ble.n	800cbb4 <_strtod_l+0x4ac>
 800cac2:	2b16      	cmp	r3, #22
 800cac4:	dc5f      	bgt.n	800cb86 <_strtod_l+0x47e>
 800cac6:	4974      	ldr	r1, [pc, #464]	@ (800cc98 <_strtod_l+0x590>)
 800cac8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cacc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad0:	4652      	mov	r2, sl
 800cad2:	465b      	mov	r3, fp
 800cad4:	f7f3 fd98 	bl	8000608 <__aeabi_dmul>
 800cad8:	4682      	mov	sl, r0
 800cada:	468b      	mov	fp, r1
 800cadc:	e64d      	b.n	800c77a <_strtod_l+0x72>
 800cade:	4b6e      	ldr	r3, [pc, #440]	@ (800cc98 <_strtod_l+0x590>)
 800cae0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cae4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cae8:	f7f3 fd8e 	bl	8000608 <__aeabi_dmul>
 800caec:	4682      	mov	sl, r0
 800caee:	9808      	ldr	r0, [sp, #32]
 800caf0:	468b      	mov	fp, r1
 800caf2:	f7f3 fd0f 	bl	8000514 <__aeabi_ui2d>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	4650      	mov	r0, sl
 800cafc:	4659      	mov	r1, fp
 800cafe:	f7f3 fbcd 	bl	800029c <__adddf3>
 800cb02:	2d0f      	cmp	r5, #15
 800cb04:	4682      	mov	sl, r0
 800cb06:	468b      	mov	fp, r1
 800cb08:	ddd5      	ble.n	800cab6 <_strtod_l+0x3ae>
 800cb0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb0c:	1b2c      	subs	r4, r5, r4
 800cb0e:	441c      	add	r4, r3
 800cb10:	2c00      	cmp	r4, #0
 800cb12:	f340 8096 	ble.w	800cc42 <_strtod_l+0x53a>
 800cb16:	f014 030f 	ands.w	r3, r4, #15
 800cb1a:	d00a      	beq.n	800cb32 <_strtod_l+0x42a>
 800cb1c:	495e      	ldr	r1, [pc, #376]	@ (800cc98 <_strtod_l+0x590>)
 800cb1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb22:	4652      	mov	r2, sl
 800cb24:	465b      	mov	r3, fp
 800cb26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb2a:	f7f3 fd6d 	bl	8000608 <__aeabi_dmul>
 800cb2e:	4682      	mov	sl, r0
 800cb30:	468b      	mov	fp, r1
 800cb32:	f034 040f 	bics.w	r4, r4, #15
 800cb36:	d073      	beq.n	800cc20 <_strtod_l+0x518>
 800cb38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cb3c:	dd48      	ble.n	800cbd0 <_strtod_l+0x4c8>
 800cb3e:	2400      	movs	r4, #0
 800cb40:	46a0      	mov	r8, r4
 800cb42:	940a      	str	r4, [sp, #40]	@ 0x28
 800cb44:	46a1      	mov	r9, r4
 800cb46:	9a05      	ldr	r2, [sp, #20]
 800cb48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cca0 <_strtod_l+0x598>
 800cb4c:	2322      	movs	r3, #34	@ 0x22
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	f04f 0a00 	mov.w	sl, #0
 800cb54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f43f ae0f 	beq.w	800c77a <_strtod_l+0x72>
 800cb5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb5e:	9805      	ldr	r0, [sp, #20]
 800cb60:	f7ff f942 	bl	800bde8 <_Bfree>
 800cb64:	9805      	ldr	r0, [sp, #20]
 800cb66:	4649      	mov	r1, r9
 800cb68:	f7ff f93e 	bl	800bde8 <_Bfree>
 800cb6c:	9805      	ldr	r0, [sp, #20]
 800cb6e:	4641      	mov	r1, r8
 800cb70:	f7ff f93a 	bl	800bde8 <_Bfree>
 800cb74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb76:	9805      	ldr	r0, [sp, #20]
 800cb78:	f7ff f936 	bl	800bde8 <_Bfree>
 800cb7c:	9805      	ldr	r0, [sp, #20]
 800cb7e:	4621      	mov	r1, r4
 800cb80:	f7ff f932 	bl	800bde8 <_Bfree>
 800cb84:	e5f9      	b.n	800c77a <_strtod_l+0x72>
 800cb86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	dbbc      	blt.n	800cb0a <_strtod_l+0x402>
 800cb90:	4c41      	ldr	r4, [pc, #260]	@ (800cc98 <_strtod_l+0x590>)
 800cb92:	f1c5 050f 	rsb	r5, r5, #15
 800cb96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb9a:	4652      	mov	r2, sl
 800cb9c:	465b      	mov	r3, fp
 800cb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cba2:	f7f3 fd31 	bl	8000608 <__aeabi_dmul>
 800cba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba8:	1b5d      	subs	r5, r3, r5
 800cbaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cbae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cbb2:	e78f      	b.n	800cad4 <_strtod_l+0x3cc>
 800cbb4:	3316      	adds	r3, #22
 800cbb6:	dba8      	blt.n	800cb0a <_strtod_l+0x402>
 800cbb8:	4b37      	ldr	r3, [pc, #220]	@ (800cc98 <_strtod_l+0x590>)
 800cbba:	eba9 0808 	sub.w	r8, r9, r8
 800cbbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cbc2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	4659      	mov	r1, fp
 800cbca:	f7f3 fe47 	bl	800085c <__aeabi_ddiv>
 800cbce:	e783      	b.n	800cad8 <_strtod_l+0x3d0>
 800cbd0:	4b32      	ldr	r3, [pc, #200]	@ (800cc9c <_strtod_l+0x594>)
 800cbd2:	9308      	str	r3, [sp, #32]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	1124      	asrs	r4, r4, #4
 800cbd8:	4650      	mov	r0, sl
 800cbda:	4659      	mov	r1, fp
 800cbdc:	461e      	mov	r6, r3
 800cbde:	2c01      	cmp	r4, #1
 800cbe0:	dc21      	bgt.n	800cc26 <_strtod_l+0x51e>
 800cbe2:	b10b      	cbz	r3, 800cbe8 <_strtod_l+0x4e0>
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	468b      	mov	fp, r1
 800cbe8:	492c      	ldr	r1, [pc, #176]	@ (800cc9c <_strtod_l+0x594>)
 800cbea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cbee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cbf2:	4652      	mov	r2, sl
 800cbf4:	465b      	mov	r3, fp
 800cbf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbfa:	f7f3 fd05 	bl	8000608 <__aeabi_dmul>
 800cbfe:	4b28      	ldr	r3, [pc, #160]	@ (800cca0 <_strtod_l+0x598>)
 800cc00:	460a      	mov	r2, r1
 800cc02:	400b      	ands	r3, r1
 800cc04:	4927      	ldr	r1, [pc, #156]	@ (800cca4 <_strtod_l+0x59c>)
 800cc06:	428b      	cmp	r3, r1
 800cc08:	4682      	mov	sl, r0
 800cc0a:	d898      	bhi.n	800cb3e <_strtod_l+0x436>
 800cc0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cc10:	428b      	cmp	r3, r1
 800cc12:	bf86      	itte	hi
 800cc14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cca8 <_strtod_l+0x5a0>
 800cc18:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cc20:	2300      	movs	r3, #0
 800cc22:	9308      	str	r3, [sp, #32]
 800cc24:	e07a      	b.n	800cd1c <_strtod_l+0x614>
 800cc26:	07e2      	lsls	r2, r4, #31
 800cc28:	d505      	bpl.n	800cc36 <_strtod_l+0x52e>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	f7f3 fcea 	bl	8000608 <__aeabi_dmul>
 800cc34:	2301      	movs	r3, #1
 800cc36:	9a08      	ldr	r2, [sp, #32]
 800cc38:	3208      	adds	r2, #8
 800cc3a:	3601      	adds	r6, #1
 800cc3c:	1064      	asrs	r4, r4, #1
 800cc3e:	9208      	str	r2, [sp, #32]
 800cc40:	e7cd      	b.n	800cbde <_strtod_l+0x4d6>
 800cc42:	d0ed      	beq.n	800cc20 <_strtod_l+0x518>
 800cc44:	4264      	negs	r4, r4
 800cc46:	f014 020f 	ands.w	r2, r4, #15
 800cc4a:	d00a      	beq.n	800cc62 <_strtod_l+0x55a>
 800cc4c:	4b12      	ldr	r3, [pc, #72]	@ (800cc98 <_strtod_l+0x590>)
 800cc4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc52:	4650      	mov	r0, sl
 800cc54:	4659      	mov	r1, fp
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fdff 	bl	800085c <__aeabi_ddiv>
 800cc5e:	4682      	mov	sl, r0
 800cc60:	468b      	mov	fp, r1
 800cc62:	1124      	asrs	r4, r4, #4
 800cc64:	d0dc      	beq.n	800cc20 <_strtod_l+0x518>
 800cc66:	2c1f      	cmp	r4, #31
 800cc68:	dd20      	ble.n	800ccac <_strtod_l+0x5a4>
 800cc6a:	2400      	movs	r4, #0
 800cc6c:	46a0      	mov	r8, r4
 800cc6e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc70:	46a1      	mov	r9, r4
 800cc72:	9a05      	ldr	r2, [sp, #20]
 800cc74:	2322      	movs	r3, #34	@ 0x22
 800cc76:	f04f 0a00 	mov.w	sl, #0
 800cc7a:	f04f 0b00 	mov.w	fp, #0
 800cc7e:	6013      	str	r3, [r2, #0]
 800cc80:	e768      	b.n	800cb54 <_strtod_l+0x44c>
 800cc82:	bf00      	nop
 800cc84:	0800e70d 	.word	0x0800e70d
 800cc88:	0800e924 	.word	0x0800e924
 800cc8c:	0800e705 	.word	0x0800e705
 800cc90:	0800e73c 	.word	0x0800e73c
 800cc94:	0800eacd 	.word	0x0800eacd
 800cc98:	0800e858 	.word	0x0800e858
 800cc9c:	0800e830 	.word	0x0800e830
 800cca0:	7ff00000 	.word	0x7ff00000
 800cca4:	7ca00000 	.word	0x7ca00000
 800cca8:	7fefffff 	.word	0x7fefffff
 800ccac:	f014 0310 	ands.w	r3, r4, #16
 800ccb0:	bf18      	it	ne
 800ccb2:	236a      	movne	r3, #106	@ 0x6a
 800ccb4:	4ea9      	ldr	r6, [pc, #676]	@ (800cf5c <_strtod_l+0x854>)
 800ccb6:	9308      	str	r3, [sp, #32]
 800ccb8:	4650      	mov	r0, sl
 800ccba:	4659      	mov	r1, fp
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	07e2      	lsls	r2, r4, #31
 800ccc0:	d504      	bpl.n	800cccc <_strtod_l+0x5c4>
 800ccc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ccc6:	f7f3 fc9f 	bl	8000608 <__aeabi_dmul>
 800ccca:	2301      	movs	r3, #1
 800cccc:	1064      	asrs	r4, r4, #1
 800ccce:	f106 0608 	add.w	r6, r6, #8
 800ccd2:	d1f4      	bne.n	800ccbe <_strtod_l+0x5b6>
 800ccd4:	b10b      	cbz	r3, 800ccda <_strtod_l+0x5d2>
 800ccd6:	4682      	mov	sl, r0
 800ccd8:	468b      	mov	fp, r1
 800ccda:	9b08      	ldr	r3, [sp, #32]
 800ccdc:	b1b3      	cbz	r3, 800cd0c <_strtod_l+0x604>
 800ccde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cce2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	4659      	mov	r1, fp
 800ccea:	dd0f      	ble.n	800cd0c <_strtod_l+0x604>
 800ccec:	2b1f      	cmp	r3, #31
 800ccee:	dd55      	ble.n	800cd9c <_strtod_l+0x694>
 800ccf0:	2b34      	cmp	r3, #52	@ 0x34
 800ccf2:	bfde      	ittt	le
 800ccf4:	f04f 33ff 	movle.w	r3, #4294967295
 800ccf8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ccfc:	4093      	lslle	r3, r2
 800ccfe:	f04f 0a00 	mov.w	sl, #0
 800cd02:	bfcc      	ite	gt
 800cd04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cd08:	ea03 0b01 	andle.w	fp, r3, r1
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	2300      	movs	r3, #0
 800cd10:	4650      	mov	r0, sl
 800cd12:	4659      	mov	r1, fp
 800cd14:	f7f3 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d1a6      	bne.n	800cc6a <_strtod_l+0x562>
 800cd1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd22:	9805      	ldr	r0, [sp, #20]
 800cd24:	462b      	mov	r3, r5
 800cd26:	463a      	mov	r2, r7
 800cd28:	f7ff f8c6 	bl	800beb8 <__s2b>
 800cd2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f43f af05 	beq.w	800cb3e <_strtod_l+0x436>
 800cd34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd36:	2a00      	cmp	r2, #0
 800cd38:	eba9 0308 	sub.w	r3, r9, r8
 800cd3c:	bfa8      	it	ge
 800cd3e:	2300      	movge	r3, #0
 800cd40:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd42:	2400      	movs	r4, #0
 800cd44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cd48:	9316      	str	r3, [sp, #88]	@ 0x58
 800cd4a:	46a0      	mov	r8, r4
 800cd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd4e:	9805      	ldr	r0, [sp, #20]
 800cd50:	6859      	ldr	r1, [r3, #4]
 800cd52:	f7ff f809 	bl	800bd68 <_Balloc>
 800cd56:	4681      	mov	r9, r0
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	f43f aef4 	beq.w	800cb46 <_strtod_l+0x43e>
 800cd5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd60:	691a      	ldr	r2, [r3, #16]
 800cd62:	3202      	adds	r2, #2
 800cd64:	f103 010c 	add.w	r1, r3, #12
 800cd68:	0092      	lsls	r2, r2, #2
 800cd6a:	300c      	adds	r0, #12
 800cd6c:	f000 fd72 	bl	800d854 <memcpy>
 800cd70:	ec4b ab10 	vmov	d0, sl, fp
 800cd74:	9805      	ldr	r0, [sp, #20]
 800cd76:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd78:	a91b      	add	r1, sp, #108	@ 0x6c
 800cd7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cd7e:	f7ff fbd7 	bl	800c530 <__d2b>
 800cd82:	901a      	str	r0, [sp, #104]	@ 0x68
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f43f aede 	beq.w	800cb46 <_strtod_l+0x43e>
 800cd8a:	9805      	ldr	r0, [sp, #20]
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	f7ff f929 	bl	800bfe4 <__i2b>
 800cd92:	4680      	mov	r8, r0
 800cd94:	b948      	cbnz	r0, 800cdaa <_strtod_l+0x6a2>
 800cd96:	f04f 0800 	mov.w	r8, #0
 800cd9a:	e6d4      	b.n	800cb46 <_strtod_l+0x43e>
 800cd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cda0:	fa02 f303 	lsl.w	r3, r2, r3
 800cda4:	ea03 0a0a 	and.w	sl, r3, sl
 800cda8:	e7b0      	b.n	800cd0c <_strtod_l+0x604>
 800cdaa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cdac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cdae:	2d00      	cmp	r5, #0
 800cdb0:	bfab      	itete	ge
 800cdb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cdb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cdb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cdb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cdba:	bfac      	ite	ge
 800cdbc:	18ef      	addge	r7, r5, r3
 800cdbe:	1b5e      	sublt	r6, r3, r5
 800cdc0:	9b08      	ldr	r3, [sp, #32]
 800cdc2:	1aed      	subs	r5, r5, r3
 800cdc4:	4415      	add	r5, r2
 800cdc6:	4b66      	ldr	r3, [pc, #408]	@ (800cf60 <_strtod_l+0x858>)
 800cdc8:	3d01      	subs	r5, #1
 800cdca:	429d      	cmp	r5, r3
 800cdcc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cdd0:	da50      	bge.n	800ce74 <_strtod_l+0x76c>
 800cdd2:	1b5b      	subs	r3, r3, r5
 800cdd4:	2b1f      	cmp	r3, #31
 800cdd6:	eba2 0203 	sub.w	r2, r2, r3
 800cdda:	f04f 0101 	mov.w	r1, #1
 800cdde:	dc3d      	bgt.n	800ce5c <_strtod_l+0x754>
 800cde0:	fa01 f303 	lsl.w	r3, r1, r3
 800cde4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cde6:	2300      	movs	r3, #0
 800cde8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdea:	18bd      	adds	r5, r7, r2
 800cdec:	9b08      	ldr	r3, [sp, #32]
 800cdee:	42af      	cmp	r7, r5
 800cdf0:	4416      	add	r6, r2
 800cdf2:	441e      	add	r6, r3
 800cdf4:	463b      	mov	r3, r7
 800cdf6:	bfa8      	it	ge
 800cdf8:	462b      	movge	r3, r5
 800cdfa:	42b3      	cmp	r3, r6
 800cdfc:	bfa8      	it	ge
 800cdfe:	4633      	movge	r3, r6
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	bfc2      	ittt	gt
 800ce04:	1aed      	subgt	r5, r5, r3
 800ce06:	1af6      	subgt	r6, r6, r3
 800ce08:	1aff      	subgt	r7, r7, r3
 800ce0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	dd16      	ble.n	800ce3e <_strtod_l+0x736>
 800ce10:	4641      	mov	r1, r8
 800ce12:	9805      	ldr	r0, [sp, #20]
 800ce14:	461a      	mov	r2, r3
 800ce16:	f7ff f9a5 	bl	800c164 <__pow5mult>
 800ce1a:	4680      	mov	r8, r0
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d0ba      	beq.n	800cd96 <_strtod_l+0x68e>
 800ce20:	4601      	mov	r1, r0
 800ce22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ce24:	9805      	ldr	r0, [sp, #20]
 800ce26:	f7ff f8f3 	bl	800c010 <__multiply>
 800ce2a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	f43f ae8a 	beq.w	800cb46 <_strtod_l+0x43e>
 800ce32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce34:	9805      	ldr	r0, [sp, #20]
 800ce36:	f7fe ffd7 	bl	800bde8 <_Bfree>
 800ce3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce3e:	2d00      	cmp	r5, #0
 800ce40:	dc1d      	bgt.n	800ce7e <_strtod_l+0x776>
 800ce42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dd23      	ble.n	800ce90 <_strtod_l+0x788>
 800ce48:	4649      	mov	r1, r9
 800ce4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ce4c:	9805      	ldr	r0, [sp, #20]
 800ce4e:	f7ff f989 	bl	800c164 <__pow5mult>
 800ce52:	4681      	mov	r9, r0
 800ce54:	b9e0      	cbnz	r0, 800ce90 <_strtod_l+0x788>
 800ce56:	f04f 0900 	mov.w	r9, #0
 800ce5a:	e674      	b.n	800cb46 <_strtod_l+0x43e>
 800ce5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ce60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ce64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ce68:	35e2      	adds	r5, #226	@ 0xe2
 800ce6a:	fa01 f305 	lsl.w	r3, r1, r5
 800ce6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce70:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ce72:	e7ba      	b.n	800cdea <_strtod_l+0x6e2>
 800ce74:	2300      	movs	r3, #0
 800ce76:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce78:	2301      	movs	r3, #1
 800ce7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce7c:	e7b5      	b.n	800cdea <_strtod_l+0x6e2>
 800ce7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce80:	9805      	ldr	r0, [sp, #20]
 800ce82:	462a      	mov	r2, r5
 800ce84:	f7ff f9c8 	bl	800c218 <__lshift>
 800ce88:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d1d9      	bne.n	800ce42 <_strtod_l+0x73a>
 800ce8e:	e65a      	b.n	800cb46 <_strtod_l+0x43e>
 800ce90:	2e00      	cmp	r6, #0
 800ce92:	dd07      	ble.n	800cea4 <_strtod_l+0x79c>
 800ce94:	4649      	mov	r1, r9
 800ce96:	9805      	ldr	r0, [sp, #20]
 800ce98:	4632      	mov	r2, r6
 800ce9a:	f7ff f9bd 	bl	800c218 <__lshift>
 800ce9e:	4681      	mov	r9, r0
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d0d8      	beq.n	800ce56 <_strtod_l+0x74e>
 800cea4:	2f00      	cmp	r7, #0
 800cea6:	dd08      	ble.n	800ceba <_strtod_l+0x7b2>
 800cea8:	4641      	mov	r1, r8
 800ceaa:	9805      	ldr	r0, [sp, #20]
 800ceac:	463a      	mov	r2, r7
 800ceae:	f7ff f9b3 	bl	800c218 <__lshift>
 800ceb2:	4680      	mov	r8, r0
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f43f ae46 	beq.w	800cb46 <_strtod_l+0x43e>
 800ceba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cebc:	9805      	ldr	r0, [sp, #20]
 800cebe:	464a      	mov	r2, r9
 800cec0:	f7ff fa32 	bl	800c328 <__mdiff>
 800cec4:	4604      	mov	r4, r0
 800cec6:	2800      	cmp	r0, #0
 800cec8:	f43f ae3d 	beq.w	800cb46 <_strtod_l+0x43e>
 800cecc:	68c3      	ldr	r3, [r0, #12]
 800cece:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ced0:	2300      	movs	r3, #0
 800ced2:	60c3      	str	r3, [r0, #12]
 800ced4:	4641      	mov	r1, r8
 800ced6:	f7ff fa0b 	bl	800c2f0 <__mcmp>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	da46      	bge.n	800cf6c <_strtod_l+0x864>
 800cede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cee0:	ea53 030a 	orrs.w	r3, r3, sl
 800cee4:	d16c      	bne.n	800cfc0 <_strtod_l+0x8b8>
 800cee6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d168      	bne.n	800cfc0 <_strtod_l+0x8b8>
 800ceee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cef2:	0d1b      	lsrs	r3, r3, #20
 800cef4:	051b      	lsls	r3, r3, #20
 800cef6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cefa:	d961      	bls.n	800cfc0 <_strtod_l+0x8b8>
 800cefc:	6963      	ldr	r3, [r4, #20]
 800cefe:	b913      	cbnz	r3, 800cf06 <_strtod_l+0x7fe>
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	dd5c      	ble.n	800cfc0 <_strtod_l+0x8b8>
 800cf06:	4621      	mov	r1, r4
 800cf08:	2201      	movs	r2, #1
 800cf0a:	9805      	ldr	r0, [sp, #20]
 800cf0c:	f7ff f984 	bl	800c218 <__lshift>
 800cf10:	4641      	mov	r1, r8
 800cf12:	4604      	mov	r4, r0
 800cf14:	f7ff f9ec 	bl	800c2f0 <__mcmp>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	dd51      	ble.n	800cfc0 <_strtod_l+0x8b8>
 800cf1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf20:	9a08      	ldr	r2, [sp, #32]
 800cf22:	0d1b      	lsrs	r3, r3, #20
 800cf24:	051b      	lsls	r3, r3, #20
 800cf26:	2a00      	cmp	r2, #0
 800cf28:	d06b      	beq.n	800d002 <_strtod_l+0x8fa>
 800cf2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf2e:	d868      	bhi.n	800d002 <_strtod_l+0x8fa>
 800cf30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cf34:	f67f ae9d 	bls.w	800cc72 <_strtod_l+0x56a>
 800cf38:	4b0a      	ldr	r3, [pc, #40]	@ (800cf64 <_strtod_l+0x85c>)
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	4659      	mov	r1, fp
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f7f3 fb62 	bl	8000608 <__aeabi_dmul>
 800cf44:	4b08      	ldr	r3, [pc, #32]	@ (800cf68 <_strtod_l+0x860>)
 800cf46:	400b      	ands	r3, r1
 800cf48:	4682      	mov	sl, r0
 800cf4a:	468b      	mov	fp, r1
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f47f ae05 	bne.w	800cb5c <_strtod_l+0x454>
 800cf52:	9a05      	ldr	r2, [sp, #20]
 800cf54:	2322      	movs	r3, #34	@ 0x22
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	e600      	b.n	800cb5c <_strtod_l+0x454>
 800cf5a:	bf00      	nop
 800cf5c:	0800e950 	.word	0x0800e950
 800cf60:	fffffc02 	.word	0xfffffc02
 800cf64:	39500000 	.word	0x39500000
 800cf68:	7ff00000 	.word	0x7ff00000
 800cf6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf70:	d165      	bne.n	800d03e <_strtod_l+0x936>
 800cf72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cf74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf78:	b35a      	cbz	r2, 800cfd2 <_strtod_l+0x8ca>
 800cf7a:	4a9f      	ldr	r2, [pc, #636]	@ (800d1f8 <_strtod_l+0xaf0>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d12b      	bne.n	800cfd8 <_strtod_l+0x8d0>
 800cf80:	9b08      	ldr	r3, [sp, #32]
 800cf82:	4651      	mov	r1, sl
 800cf84:	b303      	cbz	r3, 800cfc8 <_strtod_l+0x8c0>
 800cf86:	4b9d      	ldr	r3, [pc, #628]	@ (800d1fc <_strtod_l+0xaf4>)
 800cf88:	465a      	mov	r2, fp
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cf90:	f04f 32ff 	mov.w	r2, #4294967295
 800cf94:	d81b      	bhi.n	800cfce <_strtod_l+0x8c6>
 800cf96:	0d1b      	lsrs	r3, r3, #20
 800cf98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa0:	4299      	cmp	r1, r3
 800cfa2:	d119      	bne.n	800cfd8 <_strtod_l+0x8d0>
 800cfa4:	4b96      	ldr	r3, [pc, #600]	@ (800d200 <_strtod_l+0xaf8>)
 800cfa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d102      	bne.n	800cfb2 <_strtod_l+0x8aa>
 800cfac:	3101      	adds	r1, #1
 800cfae:	f43f adca 	beq.w	800cb46 <_strtod_l+0x43e>
 800cfb2:	4b92      	ldr	r3, [pc, #584]	@ (800d1fc <_strtod_l+0xaf4>)
 800cfb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfb6:	401a      	ands	r2, r3
 800cfb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cfbc:	f04f 0a00 	mov.w	sl, #0
 800cfc0:	9b08      	ldr	r3, [sp, #32]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1b8      	bne.n	800cf38 <_strtod_l+0x830>
 800cfc6:	e5c9      	b.n	800cb5c <_strtod_l+0x454>
 800cfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfcc:	e7e8      	b.n	800cfa0 <_strtod_l+0x898>
 800cfce:	4613      	mov	r3, r2
 800cfd0:	e7e6      	b.n	800cfa0 <_strtod_l+0x898>
 800cfd2:	ea53 030a 	orrs.w	r3, r3, sl
 800cfd6:	d0a1      	beq.n	800cf1c <_strtod_l+0x814>
 800cfd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfda:	b1db      	cbz	r3, 800d014 <_strtod_l+0x90c>
 800cfdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfde:	4213      	tst	r3, r2
 800cfe0:	d0ee      	beq.n	800cfc0 <_strtod_l+0x8b8>
 800cfe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfe4:	9a08      	ldr	r2, [sp, #32]
 800cfe6:	4650      	mov	r0, sl
 800cfe8:	4659      	mov	r1, fp
 800cfea:	b1bb      	cbz	r3, 800d01c <_strtod_l+0x914>
 800cfec:	f7ff fb6e 	bl	800c6cc <sulp>
 800cff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cff4:	ec53 2b10 	vmov	r2, r3, d0
 800cff8:	f7f3 f950 	bl	800029c <__adddf3>
 800cffc:	4682      	mov	sl, r0
 800cffe:	468b      	mov	fp, r1
 800d000:	e7de      	b.n	800cfc0 <_strtod_l+0x8b8>
 800d002:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d006:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d00a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d00e:	f04f 3aff 	mov.w	sl, #4294967295
 800d012:	e7d5      	b.n	800cfc0 <_strtod_l+0x8b8>
 800d014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d016:	ea13 0f0a 	tst.w	r3, sl
 800d01a:	e7e1      	b.n	800cfe0 <_strtod_l+0x8d8>
 800d01c:	f7ff fb56 	bl	800c6cc <sulp>
 800d020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d024:	ec53 2b10 	vmov	r2, r3, d0
 800d028:	f7f3 f936 	bl	8000298 <__aeabi_dsub>
 800d02c:	2200      	movs	r2, #0
 800d02e:	2300      	movs	r3, #0
 800d030:	4682      	mov	sl, r0
 800d032:	468b      	mov	fp, r1
 800d034:	f7f3 fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d0c1      	beq.n	800cfc0 <_strtod_l+0x8b8>
 800d03c:	e619      	b.n	800cc72 <_strtod_l+0x56a>
 800d03e:	4641      	mov	r1, r8
 800d040:	4620      	mov	r0, r4
 800d042:	f7ff facd 	bl	800c5e0 <__ratio>
 800d046:	ec57 6b10 	vmov	r6, r7, d0
 800d04a:	2200      	movs	r2, #0
 800d04c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d050:	4630      	mov	r0, r6
 800d052:	4639      	mov	r1, r7
 800d054:	f7f3 fd54 	bl	8000b00 <__aeabi_dcmple>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d06f      	beq.n	800d13c <_strtod_l+0xa34>
 800d05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d17a      	bne.n	800d158 <_strtod_l+0xa50>
 800d062:	f1ba 0f00 	cmp.w	sl, #0
 800d066:	d158      	bne.n	800d11a <_strtod_l+0xa12>
 800d068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d06a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d15a      	bne.n	800d128 <_strtod_l+0xa20>
 800d072:	4b64      	ldr	r3, [pc, #400]	@ (800d204 <_strtod_l+0xafc>)
 800d074:	2200      	movs	r2, #0
 800d076:	4630      	mov	r0, r6
 800d078:	4639      	mov	r1, r7
 800d07a:	f7f3 fd37 	bl	8000aec <__aeabi_dcmplt>
 800d07e:	2800      	cmp	r0, #0
 800d080:	d159      	bne.n	800d136 <_strtod_l+0xa2e>
 800d082:	4630      	mov	r0, r6
 800d084:	4639      	mov	r1, r7
 800d086:	4b60      	ldr	r3, [pc, #384]	@ (800d208 <_strtod_l+0xb00>)
 800d088:	2200      	movs	r2, #0
 800d08a:	f7f3 fabd 	bl	8000608 <__aeabi_dmul>
 800d08e:	4606      	mov	r6, r0
 800d090:	460f      	mov	r7, r1
 800d092:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d096:	9606      	str	r6, [sp, #24]
 800d098:	9307      	str	r3, [sp, #28]
 800d09a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d09e:	4d57      	ldr	r5, [pc, #348]	@ (800d1fc <_strtod_l+0xaf4>)
 800d0a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d0a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0a6:	401d      	ands	r5, r3
 800d0a8:	4b58      	ldr	r3, [pc, #352]	@ (800d20c <_strtod_l+0xb04>)
 800d0aa:	429d      	cmp	r5, r3
 800d0ac:	f040 80b2 	bne.w	800d214 <_strtod_l+0xb0c>
 800d0b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d0b6:	ec4b ab10 	vmov	d0, sl, fp
 800d0ba:	f7ff f9c9 	bl	800c450 <__ulp>
 800d0be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0c2:	ec51 0b10 	vmov	r0, r1, d0
 800d0c6:	f7f3 fa9f 	bl	8000608 <__aeabi_dmul>
 800d0ca:	4652      	mov	r2, sl
 800d0cc:	465b      	mov	r3, fp
 800d0ce:	f7f3 f8e5 	bl	800029c <__adddf3>
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4949      	ldr	r1, [pc, #292]	@ (800d1fc <_strtod_l+0xaf4>)
 800d0d6:	4a4e      	ldr	r2, [pc, #312]	@ (800d210 <_strtod_l+0xb08>)
 800d0d8:	4019      	ands	r1, r3
 800d0da:	4291      	cmp	r1, r2
 800d0dc:	4682      	mov	sl, r0
 800d0de:	d942      	bls.n	800d166 <_strtod_l+0xa5e>
 800d0e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d0e2:	4b47      	ldr	r3, [pc, #284]	@ (800d200 <_strtod_l+0xaf8>)
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d103      	bne.n	800d0f0 <_strtod_l+0x9e8>
 800d0e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	f43f ad2b 	beq.w	800cb46 <_strtod_l+0x43e>
 800d0f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d200 <_strtod_l+0xaf8>
 800d0f4:	f04f 3aff 	mov.w	sl, #4294967295
 800d0f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0fa:	9805      	ldr	r0, [sp, #20]
 800d0fc:	f7fe fe74 	bl	800bde8 <_Bfree>
 800d100:	9805      	ldr	r0, [sp, #20]
 800d102:	4649      	mov	r1, r9
 800d104:	f7fe fe70 	bl	800bde8 <_Bfree>
 800d108:	9805      	ldr	r0, [sp, #20]
 800d10a:	4641      	mov	r1, r8
 800d10c:	f7fe fe6c 	bl	800bde8 <_Bfree>
 800d110:	9805      	ldr	r0, [sp, #20]
 800d112:	4621      	mov	r1, r4
 800d114:	f7fe fe68 	bl	800bde8 <_Bfree>
 800d118:	e618      	b.n	800cd4c <_strtod_l+0x644>
 800d11a:	f1ba 0f01 	cmp.w	sl, #1
 800d11e:	d103      	bne.n	800d128 <_strtod_l+0xa20>
 800d120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d122:	2b00      	cmp	r3, #0
 800d124:	f43f ada5 	beq.w	800cc72 <_strtod_l+0x56a>
 800d128:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d1d8 <_strtod_l+0xad0>
 800d12c:	4f35      	ldr	r7, [pc, #212]	@ (800d204 <_strtod_l+0xafc>)
 800d12e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d132:	2600      	movs	r6, #0
 800d134:	e7b1      	b.n	800d09a <_strtod_l+0x992>
 800d136:	4f34      	ldr	r7, [pc, #208]	@ (800d208 <_strtod_l+0xb00>)
 800d138:	2600      	movs	r6, #0
 800d13a:	e7aa      	b.n	800d092 <_strtod_l+0x98a>
 800d13c:	4b32      	ldr	r3, [pc, #200]	@ (800d208 <_strtod_l+0xb00>)
 800d13e:	4630      	mov	r0, r6
 800d140:	4639      	mov	r1, r7
 800d142:	2200      	movs	r2, #0
 800d144:	f7f3 fa60 	bl	8000608 <__aeabi_dmul>
 800d148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d09f      	beq.n	800d092 <_strtod_l+0x98a>
 800d152:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d156:	e7a0      	b.n	800d09a <_strtod_l+0x992>
 800d158:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d1e0 <_strtod_l+0xad8>
 800d15c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d160:	ec57 6b17 	vmov	r6, r7, d7
 800d164:	e799      	b.n	800d09a <_strtod_l+0x992>
 800d166:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d16a:	9b08      	ldr	r3, [sp, #32]
 800d16c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1c1      	bne.n	800d0f8 <_strtod_l+0x9f0>
 800d174:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d178:	0d1b      	lsrs	r3, r3, #20
 800d17a:	051b      	lsls	r3, r3, #20
 800d17c:	429d      	cmp	r5, r3
 800d17e:	d1bb      	bne.n	800d0f8 <_strtod_l+0x9f0>
 800d180:	4630      	mov	r0, r6
 800d182:	4639      	mov	r1, r7
 800d184:	f7f3 fda0 	bl	8000cc8 <__aeabi_d2lz>
 800d188:	f7f3 fa10 	bl	80005ac <__aeabi_l2d>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	4630      	mov	r0, r6
 800d192:	4639      	mov	r1, r7
 800d194:	f7f3 f880 	bl	8000298 <__aeabi_dsub>
 800d198:	460b      	mov	r3, r1
 800d19a:	4602      	mov	r2, r0
 800d19c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d1a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1a6:	ea46 060a 	orr.w	r6, r6, sl
 800d1aa:	431e      	orrs	r6, r3
 800d1ac:	d06f      	beq.n	800d28e <_strtod_l+0xb86>
 800d1ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800d1e8 <_strtod_l+0xae0>)
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	f7f3 fc9a 	bl	8000aec <__aeabi_dcmplt>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	f47f accf 	bne.w	800cb5c <_strtod_l+0x454>
 800d1be:	a30c      	add	r3, pc, #48	@ (adr r3, 800d1f0 <_strtod_l+0xae8>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1c8:	f7f3 fcae 	bl	8000b28 <__aeabi_dcmpgt>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d093      	beq.n	800d0f8 <_strtod_l+0x9f0>
 800d1d0:	e4c4      	b.n	800cb5c <_strtod_l+0x454>
 800d1d2:	bf00      	nop
 800d1d4:	f3af 8000 	nop.w
 800d1d8:	00000000 	.word	0x00000000
 800d1dc:	bff00000 	.word	0xbff00000
 800d1e0:	00000000 	.word	0x00000000
 800d1e4:	3ff00000 	.word	0x3ff00000
 800d1e8:	94a03595 	.word	0x94a03595
 800d1ec:	3fdfffff 	.word	0x3fdfffff
 800d1f0:	35afe535 	.word	0x35afe535
 800d1f4:	3fe00000 	.word	0x3fe00000
 800d1f8:	000fffff 	.word	0x000fffff
 800d1fc:	7ff00000 	.word	0x7ff00000
 800d200:	7fefffff 	.word	0x7fefffff
 800d204:	3ff00000 	.word	0x3ff00000
 800d208:	3fe00000 	.word	0x3fe00000
 800d20c:	7fe00000 	.word	0x7fe00000
 800d210:	7c9fffff 	.word	0x7c9fffff
 800d214:	9b08      	ldr	r3, [sp, #32]
 800d216:	b323      	cbz	r3, 800d262 <_strtod_l+0xb5a>
 800d218:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d21c:	d821      	bhi.n	800d262 <_strtod_l+0xb5a>
 800d21e:	a328      	add	r3, pc, #160	@ (adr r3, 800d2c0 <_strtod_l+0xbb8>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	4630      	mov	r0, r6
 800d226:	4639      	mov	r1, r7
 800d228:	f7f3 fc6a 	bl	8000b00 <__aeabi_dcmple>
 800d22c:	b1a0      	cbz	r0, 800d258 <_strtod_l+0xb50>
 800d22e:	4639      	mov	r1, r7
 800d230:	4630      	mov	r0, r6
 800d232:	f7f3 fcc1 	bl	8000bb8 <__aeabi_d2uiz>
 800d236:	2801      	cmp	r0, #1
 800d238:	bf38      	it	cc
 800d23a:	2001      	movcc	r0, #1
 800d23c:	f7f3 f96a 	bl	8000514 <__aeabi_ui2d>
 800d240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d242:	4606      	mov	r6, r0
 800d244:	460f      	mov	r7, r1
 800d246:	b9fb      	cbnz	r3, 800d288 <_strtod_l+0xb80>
 800d248:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d24c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d24e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d250:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d254:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d258:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d25a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d25e:	1b5b      	subs	r3, r3, r5
 800d260:	9311      	str	r3, [sp, #68]	@ 0x44
 800d262:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d266:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d26a:	f7ff f8f1 	bl	800c450 <__ulp>
 800d26e:	4650      	mov	r0, sl
 800d270:	ec53 2b10 	vmov	r2, r3, d0
 800d274:	4659      	mov	r1, fp
 800d276:	f7f3 f9c7 	bl	8000608 <__aeabi_dmul>
 800d27a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d27e:	f7f3 f80d 	bl	800029c <__adddf3>
 800d282:	4682      	mov	sl, r0
 800d284:	468b      	mov	fp, r1
 800d286:	e770      	b.n	800d16a <_strtod_l+0xa62>
 800d288:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d28c:	e7e0      	b.n	800d250 <_strtod_l+0xb48>
 800d28e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d2c8 <_strtod_l+0xbc0>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f7f3 fc2a 	bl	8000aec <__aeabi_dcmplt>
 800d298:	e798      	b.n	800d1cc <_strtod_l+0xac4>
 800d29a:	2300      	movs	r3, #0
 800d29c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d29e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d2a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2a2:	6013      	str	r3, [r2, #0]
 800d2a4:	f7ff ba6d 	b.w	800c782 <_strtod_l+0x7a>
 800d2a8:	2a65      	cmp	r2, #101	@ 0x65
 800d2aa:	f43f ab66 	beq.w	800c97a <_strtod_l+0x272>
 800d2ae:	2a45      	cmp	r2, #69	@ 0x45
 800d2b0:	f43f ab63 	beq.w	800c97a <_strtod_l+0x272>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	f7ff bb9e 	b.w	800c9f6 <_strtod_l+0x2ee>
 800d2ba:	bf00      	nop
 800d2bc:	f3af 8000 	nop.w
 800d2c0:	ffc00000 	.word	0xffc00000
 800d2c4:	41dfffff 	.word	0x41dfffff
 800d2c8:	94a03595 	.word	0x94a03595
 800d2cc:	3fcfffff 	.word	0x3fcfffff

0800d2d0 <_strtod_r>:
 800d2d0:	4b01      	ldr	r3, [pc, #4]	@ (800d2d8 <_strtod_r+0x8>)
 800d2d2:	f7ff ba19 	b.w	800c708 <_strtod_l>
 800d2d6:	bf00      	nop
 800d2d8:	20000178 	.word	0x20000178

0800d2dc <_strtol_l.constprop.0>:
 800d2dc:	2b24      	cmp	r3, #36	@ 0x24
 800d2de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e2:	4686      	mov	lr, r0
 800d2e4:	4690      	mov	r8, r2
 800d2e6:	d801      	bhi.n	800d2ec <_strtol_l.constprop.0+0x10>
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d106      	bne.n	800d2fa <_strtol_l.constprop.0+0x1e>
 800d2ec:	f7fd fdba 	bl	800ae64 <__errno>
 800d2f0:	2316      	movs	r3, #22
 800d2f2:	6003      	str	r3, [r0, #0]
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2fa:	4834      	ldr	r0, [pc, #208]	@ (800d3cc <_strtol_l.constprop.0+0xf0>)
 800d2fc:	460d      	mov	r5, r1
 800d2fe:	462a      	mov	r2, r5
 800d300:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d304:	5d06      	ldrb	r6, [r0, r4]
 800d306:	f016 0608 	ands.w	r6, r6, #8
 800d30a:	d1f8      	bne.n	800d2fe <_strtol_l.constprop.0+0x22>
 800d30c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d30e:	d12d      	bne.n	800d36c <_strtol_l.constprop.0+0x90>
 800d310:	782c      	ldrb	r4, [r5, #0]
 800d312:	2601      	movs	r6, #1
 800d314:	1c95      	adds	r5, r2, #2
 800d316:	f033 0210 	bics.w	r2, r3, #16
 800d31a:	d109      	bne.n	800d330 <_strtol_l.constprop.0+0x54>
 800d31c:	2c30      	cmp	r4, #48	@ 0x30
 800d31e:	d12a      	bne.n	800d376 <_strtol_l.constprop.0+0x9a>
 800d320:	782a      	ldrb	r2, [r5, #0]
 800d322:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d326:	2a58      	cmp	r2, #88	@ 0x58
 800d328:	d125      	bne.n	800d376 <_strtol_l.constprop.0+0x9a>
 800d32a:	786c      	ldrb	r4, [r5, #1]
 800d32c:	2310      	movs	r3, #16
 800d32e:	3502      	adds	r5, #2
 800d330:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d334:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d338:	2200      	movs	r2, #0
 800d33a:	fbbc f9f3 	udiv	r9, ip, r3
 800d33e:	4610      	mov	r0, r2
 800d340:	fb03 ca19 	mls	sl, r3, r9, ip
 800d344:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d348:	2f09      	cmp	r7, #9
 800d34a:	d81b      	bhi.n	800d384 <_strtol_l.constprop.0+0xa8>
 800d34c:	463c      	mov	r4, r7
 800d34e:	42a3      	cmp	r3, r4
 800d350:	dd27      	ble.n	800d3a2 <_strtol_l.constprop.0+0xc6>
 800d352:	1c57      	adds	r7, r2, #1
 800d354:	d007      	beq.n	800d366 <_strtol_l.constprop.0+0x8a>
 800d356:	4581      	cmp	r9, r0
 800d358:	d320      	bcc.n	800d39c <_strtol_l.constprop.0+0xc0>
 800d35a:	d101      	bne.n	800d360 <_strtol_l.constprop.0+0x84>
 800d35c:	45a2      	cmp	sl, r4
 800d35e:	db1d      	blt.n	800d39c <_strtol_l.constprop.0+0xc0>
 800d360:	fb00 4003 	mla	r0, r0, r3, r4
 800d364:	2201      	movs	r2, #1
 800d366:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d36a:	e7eb      	b.n	800d344 <_strtol_l.constprop.0+0x68>
 800d36c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d36e:	bf04      	itt	eq
 800d370:	782c      	ldrbeq	r4, [r5, #0]
 800d372:	1c95      	addeq	r5, r2, #2
 800d374:	e7cf      	b.n	800d316 <_strtol_l.constprop.0+0x3a>
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1da      	bne.n	800d330 <_strtol_l.constprop.0+0x54>
 800d37a:	2c30      	cmp	r4, #48	@ 0x30
 800d37c:	bf0c      	ite	eq
 800d37e:	2308      	moveq	r3, #8
 800d380:	230a      	movne	r3, #10
 800d382:	e7d5      	b.n	800d330 <_strtol_l.constprop.0+0x54>
 800d384:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d388:	2f19      	cmp	r7, #25
 800d38a:	d801      	bhi.n	800d390 <_strtol_l.constprop.0+0xb4>
 800d38c:	3c37      	subs	r4, #55	@ 0x37
 800d38e:	e7de      	b.n	800d34e <_strtol_l.constprop.0+0x72>
 800d390:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d394:	2f19      	cmp	r7, #25
 800d396:	d804      	bhi.n	800d3a2 <_strtol_l.constprop.0+0xc6>
 800d398:	3c57      	subs	r4, #87	@ 0x57
 800d39a:	e7d8      	b.n	800d34e <_strtol_l.constprop.0+0x72>
 800d39c:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a0:	e7e1      	b.n	800d366 <_strtol_l.constprop.0+0x8a>
 800d3a2:	1c53      	adds	r3, r2, #1
 800d3a4:	d108      	bne.n	800d3b8 <_strtol_l.constprop.0+0xdc>
 800d3a6:	2322      	movs	r3, #34	@ 0x22
 800d3a8:	f8ce 3000 	str.w	r3, [lr]
 800d3ac:	4660      	mov	r0, ip
 800d3ae:	f1b8 0f00 	cmp.w	r8, #0
 800d3b2:	d0a0      	beq.n	800d2f6 <_strtol_l.constprop.0+0x1a>
 800d3b4:	1e69      	subs	r1, r5, #1
 800d3b6:	e006      	b.n	800d3c6 <_strtol_l.constprop.0+0xea>
 800d3b8:	b106      	cbz	r6, 800d3bc <_strtol_l.constprop.0+0xe0>
 800d3ba:	4240      	negs	r0, r0
 800d3bc:	f1b8 0f00 	cmp.w	r8, #0
 800d3c0:	d099      	beq.n	800d2f6 <_strtol_l.constprop.0+0x1a>
 800d3c2:	2a00      	cmp	r2, #0
 800d3c4:	d1f6      	bne.n	800d3b4 <_strtol_l.constprop.0+0xd8>
 800d3c6:	f8c8 1000 	str.w	r1, [r8]
 800d3ca:	e794      	b.n	800d2f6 <_strtol_l.constprop.0+0x1a>
 800d3cc:	0800e979 	.word	0x0800e979

0800d3d0 <_strtol_r>:
 800d3d0:	f7ff bf84 	b.w	800d2dc <_strtol_l.constprop.0>

0800d3d4 <__ssputs_r>:
 800d3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d8:	688e      	ldr	r6, [r1, #8]
 800d3da:	461f      	mov	r7, r3
 800d3dc:	42be      	cmp	r6, r7
 800d3de:	680b      	ldr	r3, [r1, #0]
 800d3e0:	4682      	mov	sl, r0
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	4690      	mov	r8, r2
 800d3e6:	d82d      	bhi.n	800d444 <__ssputs_r+0x70>
 800d3e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d3f0:	d026      	beq.n	800d440 <__ssputs_r+0x6c>
 800d3f2:	6965      	ldr	r5, [r4, #20]
 800d3f4:	6909      	ldr	r1, [r1, #16]
 800d3f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3fa:	eba3 0901 	sub.w	r9, r3, r1
 800d3fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d402:	1c7b      	adds	r3, r7, #1
 800d404:	444b      	add	r3, r9
 800d406:	106d      	asrs	r5, r5, #1
 800d408:	429d      	cmp	r5, r3
 800d40a:	bf38      	it	cc
 800d40c:	461d      	movcc	r5, r3
 800d40e:	0553      	lsls	r3, r2, #21
 800d410:	d527      	bpl.n	800d462 <__ssputs_r+0x8e>
 800d412:	4629      	mov	r1, r5
 800d414:	f7fe fc1c 	bl	800bc50 <_malloc_r>
 800d418:	4606      	mov	r6, r0
 800d41a:	b360      	cbz	r0, 800d476 <__ssputs_r+0xa2>
 800d41c:	6921      	ldr	r1, [r4, #16]
 800d41e:	464a      	mov	r2, r9
 800d420:	f000 fa18 	bl	800d854 <memcpy>
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42e:	81a3      	strh	r3, [r4, #12]
 800d430:	6126      	str	r6, [r4, #16]
 800d432:	6165      	str	r5, [r4, #20]
 800d434:	444e      	add	r6, r9
 800d436:	eba5 0509 	sub.w	r5, r5, r9
 800d43a:	6026      	str	r6, [r4, #0]
 800d43c:	60a5      	str	r5, [r4, #8]
 800d43e:	463e      	mov	r6, r7
 800d440:	42be      	cmp	r6, r7
 800d442:	d900      	bls.n	800d446 <__ssputs_r+0x72>
 800d444:	463e      	mov	r6, r7
 800d446:	6820      	ldr	r0, [r4, #0]
 800d448:	4632      	mov	r2, r6
 800d44a:	4641      	mov	r1, r8
 800d44c:	f000 f9c6 	bl	800d7dc <memmove>
 800d450:	68a3      	ldr	r3, [r4, #8]
 800d452:	1b9b      	subs	r3, r3, r6
 800d454:	60a3      	str	r3, [r4, #8]
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	4433      	add	r3, r6
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	2000      	movs	r0, #0
 800d45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d462:	462a      	mov	r2, r5
 800d464:	f000 fd89 	bl	800df7a <_realloc_r>
 800d468:	4606      	mov	r6, r0
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d1e0      	bne.n	800d430 <__ssputs_r+0x5c>
 800d46e:	6921      	ldr	r1, [r4, #16]
 800d470:	4650      	mov	r0, sl
 800d472:	f7fe fb79 	bl	800bb68 <_free_r>
 800d476:	230c      	movs	r3, #12
 800d478:	f8ca 3000 	str.w	r3, [sl]
 800d47c:	89a3      	ldrh	r3, [r4, #12]
 800d47e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d482:	81a3      	strh	r3, [r4, #12]
 800d484:	f04f 30ff 	mov.w	r0, #4294967295
 800d488:	e7e9      	b.n	800d45e <__ssputs_r+0x8a>
	...

0800d48c <_svfiprintf_r>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	4698      	mov	r8, r3
 800d492:	898b      	ldrh	r3, [r1, #12]
 800d494:	061b      	lsls	r3, r3, #24
 800d496:	b09d      	sub	sp, #116	@ 0x74
 800d498:	4607      	mov	r7, r0
 800d49a:	460d      	mov	r5, r1
 800d49c:	4614      	mov	r4, r2
 800d49e:	d510      	bpl.n	800d4c2 <_svfiprintf_r+0x36>
 800d4a0:	690b      	ldr	r3, [r1, #16]
 800d4a2:	b973      	cbnz	r3, 800d4c2 <_svfiprintf_r+0x36>
 800d4a4:	2140      	movs	r1, #64	@ 0x40
 800d4a6:	f7fe fbd3 	bl	800bc50 <_malloc_r>
 800d4aa:	6028      	str	r0, [r5, #0]
 800d4ac:	6128      	str	r0, [r5, #16]
 800d4ae:	b930      	cbnz	r0, 800d4be <_svfiprintf_r+0x32>
 800d4b0:	230c      	movs	r3, #12
 800d4b2:	603b      	str	r3, [r7, #0]
 800d4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b8:	b01d      	add	sp, #116	@ 0x74
 800d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4be:	2340      	movs	r3, #64	@ 0x40
 800d4c0:	616b      	str	r3, [r5, #20]
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4c6:	2320      	movs	r3, #32
 800d4c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4d0:	2330      	movs	r3, #48	@ 0x30
 800d4d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d670 <_svfiprintf_r+0x1e4>
 800d4d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4da:	f04f 0901 	mov.w	r9, #1
 800d4de:	4623      	mov	r3, r4
 800d4e0:	469a      	mov	sl, r3
 800d4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4e6:	b10a      	cbz	r2, 800d4ec <_svfiprintf_r+0x60>
 800d4e8:	2a25      	cmp	r2, #37	@ 0x25
 800d4ea:	d1f9      	bne.n	800d4e0 <_svfiprintf_r+0x54>
 800d4ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d4f0:	d00b      	beq.n	800d50a <_svfiprintf_r+0x7e>
 800d4f2:	465b      	mov	r3, fp
 800d4f4:	4622      	mov	r2, r4
 800d4f6:	4629      	mov	r1, r5
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff ff6b 	bl	800d3d4 <__ssputs_r>
 800d4fe:	3001      	adds	r0, #1
 800d500:	f000 80a7 	beq.w	800d652 <_svfiprintf_r+0x1c6>
 800d504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d506:	445a      	add	r2, fp
 800d508:	9209      	str	r2, [sp, #36]	@ 0x24
 800d50a:	f89a 3000 	ldrb.w	r3, [sl]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f000 809f 	beq.w	800d652 <_svfiprintf_r+0x1c6>
 800d514:	2300      	movs	r3, #0
 800d516:	f04f 32ff 	mov.w	r2, #4294967295
 800d51a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d51e:	f10a 0a01 	add.w	sl, sl, #1
 800d522:	9304      	str	r3, [sp, #16]
 800d524:	9307      	str	r3, [sp, #28]
 800d526:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d52a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d52c:	4654      	mov	r4, sl
 800d52e:	2205      	movs	r2, #5
 800d530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d534:	484e      	ldr	r0, [pc, #312]	@ (800d670 <_svfiprintf_r+0x1e4>)
 800d536:	f7f2 fe53 	bl	80001e0 <memchr>
 800d53a:	9a04      	ldr	r2, [sp, #16]
 800d53c:	b9d8      	cbnz	r0, 800d576 <_svfiprintf_r+0xea>
 800d53e:	06d0      	lsls	r0, r2, #27
 800d540:	bf44      	itt	mi
 800d542:	2320      	movmi	r3, #32
 800d544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d548:	0711      	lsls	r1, r2, #28
 800d54a:	bf44      	itt	mi
 800d54c:	232b      	movmi	r3, #43	@ 0x2b
 800d54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d552:	f89a 3000 	ldrb.w	r3, [sl]
 800d556:	2b2a      	cmp	r3, #42	@ 0x2a
 800d558:	d015      	beq.n	800d586 <_svfiprintf_r+0xfa>
 800d55a:	9a07      	ldr	r2, [sp, #28]
 800d55c:	4654      	mov	r4, sl
 800d55e:	2000      	movs	r0, #0
 800d560:	f04f 0c0a 	mov.w	ip, #10
 800d564:	4621      	mov	r1, r4
 800d566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d56a:	3b30      	subs	r3, #48	@ 0x30
 800d56c:	2b09      	cmp	r3, #9
 800d56e:	d94b      	bls.n	800d608 <_svfiprintf_r+0x17c>
 800d570:	b1b0      	cbz	r0, 800d5a0 <_svfiprintf_r+0x114>
 800d572:	9207      	str	r2, [sp, #28]
 800d574:	e014      	b.n	800d5a0 <_svfiprintf_r+0x114>
 800d576:	eba0 0308 	sub.w	r3, r0, r8
 800d57a:	fa09 f303 	lsl.w	r3, r9, r3
 800d57e:	4313      	orrs	r3, r2
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	46a2      	mov	sl, r4
 800d584:	e7d2      	b.n	800d52c <_svfiprintf_r+0xa0>
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	1d19      	adds	r1, r3, #4
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	9103      	str	r1, [sp, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	bfbb      	ittet	lt
 800d592:	425b      	neglt	r3, r3
 800d594:	f042 0202 	orrlt.w	r2, r2, #2
 800d598:	9307      	strge	r3, [sp, #28]
 800d59a:	9307      	strlt	r3, [sp, #28]
 800d59c:	bfb8      	it	lt
 800d59e:	9204      	strlt	r2, [sp, #16]
 800d5a0:	7823      	ldrb	r3, [r4, #0]
 800d5a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5a4:	d10a      	bne.n	800d5bc <_svfiprintf_r+0x130>
 800d5a6:	7863      	ldrb	r3, [r4, #1]
 800d5a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5aa:	d132      	bne.n	800d612 <_svfiprintf_r+0x186>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	1d1a      	adds	r2, r3, #4
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	9203      	str	r2, [sp, #12]
 800d5b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5b8:	3402      	adds	r4, #2
 800d5ba:	9305      	str	r3, [sp, #20]
 800d5bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d680 <_svfiprintf_r+0x1f4>
 800d5c0:	7821      	ldrb	r1, [r4, #0]
 800d5c2:	2203      	movs	r2, #3
 800d5c4:	4650      	mov	r0, sl
 800d5c6:	f7f2 fe0b 	bl	80001e0 <memchr>
 800d5ca:	b138      	cbz	r0, 800d5dc <_svfiprintf_r+0x150>
 800d5cc:	9b04      	ldr	r3, [sp, #16]
 800d5ce:	eba0 000a 	sub.w	r0, r0, sl
 800d5d2:	2240      	movs	r2, #64	@ 0x40
 800d5d4:	4082      	lsls	r2, r0
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	3401      	adds	r4, #1
 800d5da:	9304      	str	r3, [sp, #16]
 800d5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e0:	4824      	ldr	r0, [pc, #144]	@ (800d674 <_svfiprintf_r+0x1e8>)
 800d5e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5e6:	2206      	movs	r2, #6
 800d5e8:	f7f2 fdfa 	bl	80001e0 <memchr>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d036      	beq.n	800d65e <_svfiprintf_r+0x1d2>
 800d5f0:	4b21      	ldr	r3, [pc, #132]	@ (800d678 <_svfiprintf_r+0x1ec>)
 800d5f2:	bb1b      	cbnz	r3, 800d63c <_svfiprintf_r+0x1b0>
 800d5f4:	9b03      	ldr	r3, [sp, #12]
 800d5f6:	3307      	adds	r3, #7
 800d5f8:	f023 0307 	bic.w	r3, r3, #7
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	9303      	str	r3, [sp, #12]
 800d600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d602:	4433      	add	r3, r6
 800d604:	9309      	str	r3, [sp, #36]	@ 0x24
 800d606:	e76a      	b.n	800d4de <_svfiprintf_r+0x52>
 800d608:	fb0c 3202 	mla	r2, ip, r2, r3
 800d60c:	460c      	mov	r4, r1
 800d60e:	2001      	movs	r0, #1
 800d610:	e7a8      	b.n	800d564 <_svfiprintf_r+0xd8>
 800d612:	2300      	movs	r3, #0
 800d614:	3401      	adds	r4, #1
 800d616:	9305      	str	r3, [sp, #20]
 800d618:	4619      	mov	r1, r3
 800d61a:	f04f 0c0a 	mov.w	ip, #10
 800d61e:	4620      	mov	r0, r4
 800d620:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d624:	3a30      	subs	r2, #48	@ 0x30
 800d626:	2a09      	cmp	r2, #9
 800d628:	d903      	bls.n	800d632 <_svfiprintf_r+0x1a6>
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d0c6      	beq.n	800d5bc <_svfiprintf_r+0x130>
 800d62e:	9105      	str	r1, [sp, #20]
 800d630:	e7c4      	b.n	800d5bc <_svfiprintf_r+0x130>
 800d632:	fb0c 2101 	mla	r1, ip, r1, r2
 800d636:	4604      	mov	r4, r0
 800d638:	2301      	movs	r3, #1
 800d63a:	e7f0      	b.n	800d61e <_svfiprintf_r+0x192>
 800d63c:	ab03      	add	r3, sp, #12
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	462a      	mov	r2, r5
 800d642:	4b0e      	ldr	r3, [pc, #56]	@ (800d67c <_svfiprintf_r+0x1f0>)
 800d644:	a904      	add	r1, sp, #16
 800d646:	4638      	mov	r0, r7
 800d648:	f7fc fcc8 	bl	8009fdc <_printf_float>
 800d64c:	1c42      	adds	r2, r0, #1
 800d64e:	4606      	mov	r6, r0
 800d650:	d1d6      	bne.n	800d600 <_svfiprintf_r+0x174>
 800d652:	89ab      	ldrh	r3, [r5, #12]
 800d654:	065b      	lsls	r3, r3, #25
 800d656:	f53f af2d 	bmi.w	800d4b4 <_svfiprintf_r+0x28>
 800d65a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d65c:	e72c      	b.n	800d4b8 <_svfiprintf_r+0x2c>
 800d65e:	ab03      	add	r3, sp, #12
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	462a      	mov	r2, r5
 800d664:	4b05      	ldr	r3, [pc, #20]	@ (800d67c <_svfiprintf_r+0x1f0>)
 800d666:	a904      	add	r1, sp, #16
 800d668:	4638      	mov	r0, r7
 800d66a:	f7fc ff4f 	bl	800a50c <_printf_i>
 800d66e:	e7ed      	b.n	800d64c <_svfiprintf_r+0x1c0>
 800d670:	0800ea79 	.word	0x0800ea79
 800d674:	0800ea83 	.word	0x0800ea83
 800d678:	08009fdd 	.word	0x08009fdd
 800d67c:	0800d3d5 	.word	0x0800d3d5
 800d680:	0800ea7f 	.word	0x0800ea7f

0800d684 <__sflush_r>:
 800d684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d68c:	0716      	lsls	r6, r2, #28
 800d68e:	4605      	mov	r5, r0
 800d690:	460c      	mov	r4, r1
 800d692:	d454      	bmi.n	800d73e <__sflush_r+0xba>
 800d694:	684b      	ldr	r3, [r1, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	dc02      	bgt.n	800d6a0 <__sflush_r+0x1c>
 800d69a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	dd48      	ble.n	800d732 <__sflush_r+0xae>
 800d6a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	d045      	beq.n	800d732 <__sflush_r+0xae>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6ac:	682f      	ldr	r7, [r5, #0]
 800d6ae:	6a21      	ldr	r1, [r4, #32]
 800d6b0:	602b      	str	r3, [r5, #0]
 800d6b2:	d030      	beq.n	800d716 <__sflush_r+0x92>
 800d6b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	0759      	lsls	r1, r3, #29
 800d6ba:	d505      	bpl.n	800d6c8 <__sflush_r+0x44>
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	1ad2      	subs	r2, r2, r3
 800d6c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6c2:	b10b      	cbz	r3, 800d6c8 <__sflush_r+0x44>
 800d6c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6c6:	1ad2      	subs	r2, r2, r3
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6cc:	6a21      	ldr	r1, [r4, #32]
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	47b0      	blx	r6
 800d6d2:	1c43      	adds	r3, r0, #1
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	d106      	bne.n	800d6e6 <__sflush_r+0x62>
 800d6d8:	6829      	ldr	r1, [r5, #0]
 800d6da:	291d      	cmp	r1, #29
 800d6dc:	d82b      	bhi.n	800d736 <__sflush_r+0xb2>
 800d6de:	4a2a      	ldr	r2, [pc, #168]	@ (800d788 <__sflush_r+0x104>)
 800d6e0:	410a      	asrs	r2, r1
 800d6e2:	07d6      	lsls	r6, r2, #31
 800d6e4:	d427      	bmi.n	800d736 <__sflush_r+0xb2>
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	6062      	str	r2, [r4, #4]
 800d6ea:	04d9      	lsls	r1, r3, #19
 800d6ec:	6922      	ldr	r2, [r4, #16]
 800d6ee:	6022      	str	r2, [r4, #0]
 800d6f0:	d504      	bpl.n	800d6fc <__sflush_r+0x78>
 800d6f2:	1c42      	adds	r2, r0, #1
 800d6f4:	d101      	bne.n	800d6fa <__sflush_r+0x76>
 800d6f6:	682b      	ldr	r3, [r5, #0]
 800d6f8:	b903      	cbnz	r3, 800d6fc <__sflush_r+0x78>
 800d6fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6fe:	602f      	str	r7, [r5, #0]
 800d700:	b1b9      	cbz	r1, 800d732 <__sflush_r+0xae>
 800d702:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d706:	4299      	cmp	r1, r3
 800d708:	d002      	beq.n	800d710 <__sflush_r+0x8c>
 800d70a:	4628      	mov	r0, r5
 800d70c:	f7fe fa2c 	bl	800bb68 <_free_r>
 800d710:	2300      	movs	r3, #0
 800d712:	6363      	str	r3, [r4, #52]	@ 0x34
 800d714:	e00d      	b.n	800d732 <__sflush_r+0xae>
 800d716:	2301      	movs	r3, #1
 800d718:	4628      	mov	r0, r5
 800d71a:	47b0      	blx	r6
 800d71c:	4602      	mov	r2, r0
 800d71e:	1c50      	adds	r0, r2, #1
 800d720:	d1c9      	bne.n	800d6b6 <__sflush_r+0x32>
 800d722:	682b      	ldr	r3, [r5, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d0c6      	beq.n	800d6b6 <__sflush_r+0x32>
 800d728:	2b1d      	cmp	r3, #29
 800d72a:	d001      	beq.n	800d730 <__sflush_r+0xac>
 800d72c:	2b16      	cmp	r3, #22
 800d72e:	d11e      	bne.n	800d76e <__sflush_r+0xea>
 800d730:	602f      	str	r7, [r5, #0]
 800d732:	2000      	movs	r0, #0
 800d734:	e022      	b.n	800d77c <__sflush_r+0xf8>
 800d736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d73a:	b21b      	sxth	r3, r3
 800d73c:	e01b      	b.n	800d776 <__sflush_r+0xf2>
 800d73e:	690f      	ldr	r7, [r1, #16]
 800d740:	2f00      	cmp	r7, #0
 800d742:	d0f6      	beq.n	800d732 <__sflush_r+0xae>
 800d744:	0793      	lsls	r3, r2, #30
 800d746:	680e      	ldr	r6, [r1, #0]
 800d748:	bf08      	it	eq
 800d74a:	694b      	ldreq	r3, [r1, #20]
 800d74c:	600f      	str	r7, [r1, #0]
 800d74e:	bf18      	it	ne
 800d750:	2300      	movne	r3, #0
 800d752:	eba6 0807 	sub.w	r8, r6, r7
 800d756:	608b      	str	r3, [r1, #8]
 800d758:	f1b8 0f00 	cmp.w	r8, #0
 800d75c:	dde9      	ble.n	800d732 <__sflush_r+0xae>
 800d75e:	6a21      	ldr	r1, [r4, #32]
 800d760:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d762:	4643      	mov	r3, r8
 800d764:	463a      	mov	r2, r7
 800d766:	4628      	mov	r0, r5
 800d768:	47b0      	blx	r6
 800d76a:	2800      	cmp	r0, #0
 800d76c:	dc08      	bgt.n	800d780 <__sflush_r+0xfc>
 800d76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d776:	81a3      	strh	r3, [r4, #12]
 800d778:	f04f 30ff 	mov.w	r0, #4294967295
 800d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d780:	4407      	add	r7, r0
 800d782:	eba8 0800 	sub.w	r8, r8, r0
 800d786:	e7e7      	b.n	800d758 <__sflush_r+0xd4>
 800d788:	dfbffffe 	.word	0xdfbffffe

0800d78c <_fflush_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	690b      	ldr	r3, [r1, #16]
 800d790:	4605      	mov	r5, r0
 800d792:	460c      	mov	r4, r1
 800d794:	b913      	cbnz	r3, 800d79c <_fflush_r+0x10>
 800d796:	2500      	movs	r5, #0
 800d798:	4628      	mov	r0, r5
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	b118      	cbz	r0, 800d7a6 <_fflush_r+0x1a>
 800d79e:	6a03      	ldr	r3, [r0, #32]
 800d7a0:	b90b      	cbnz	r3, 800d7a6 <_fflush_r+0x1a>
 800d7a2:	f7fd fa73 	bl	800ac8c <__sinit>
 800d7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d0f3      	beq.n	800d796 <_fflush_r+0xa>
 800d7ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7b0:	07d0      	lsls	r0, r2, #31
 800d7b2:	d404      	bmi.n	800d7be <_fflush_r+0x32>
 800d7b4:	0599      	lsls	r1, r3, #22
 800d7b6:	d402      	bmi.n	800d7be <_fflush_r+0x32>
 800d7b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ba:	f7fd fb7e 	bl	800aeba <__retarget_lock_acquire_recursive>
 800d7be:	4628      	mov	r0, r5
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	f7ff ff5f 	bl	800d684 <__sflush_r>
 800d7c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7c8:	07da      	lsls	r2, r3, #31
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	d4e4      	bmi.n	800d798 <_fflush_r+0xc>
 800d7ce:	89a3      	ldrh	r3, [r4, #12]
 800d7d0:	059b      	lsls	r3, r3, #22
 800d7d2:	d4e1      	bmi.n	800d798 <_fflush_r+0xc>
 800d7d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7d6:	f7fd fb71 	bl	800aebc <__retarget_lock_release_recursive>
 800d7da:	e7dd      	b.n	800d798 <_fflush_r+0xc>

0800d7dc <memmove>:
 800d7dc:	4288      	cmp	r0, r1
 800d7de:	b510      	push	{r4, lr}
 800d7e0:	eb01 0402 	add.w	r4, r1, r2
 800d7e4:	d902      	bls.n	800d7ec <memmove+0x10>
 800d7e6:	4284      	cmp	r4, r0
 800d7e8:	4623      	mov	r3, r4
 800d7ea:	d807      	bhi.n	800d7fc <memmove+0x20>
 800d7ec:	1e43      	subs	r3, r0, #1
 800d7ee:	42a1      	cmp	r1, r4
 800d7f0:	d008      	beq.n	800d804 <memmove+0x28>
 800d7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7fa:	e7f8      	b.n	800d7ee <memmove+0x12>
 800d7fc:	4402      	add	r2, r0
 800d7fe:	4601      	mov	r1, r0
 800d800:	428a      	cmp	r2, r1
 800d802:	d100      	bne.n	800d806 <memmove+0x2a>
 800d804:	bd10      	pop	{r4, pc}
 800d806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d80a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d80e:	e7f7      	b.n	800d800 <memmove+0x24>

0800d810 <strncmp>:
 800d810:	b510      	push	{r4, lr}
 800d812:	b16a      	cbz	r2, 800d830 <strncmp+0x20>
 800d814:	3901      	subs	r1, #1
 800d816:	1884      	adds	r4, r0, r2
 800d818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d81c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d820:	429a      	cmp	r2, r3
 800d822:	d103      	bne.n	800d82c <strncmp+0x1c>
 800d824:	42a0      	cmp	r0, r4
 800d826:	d001      	beq.n	800d82c <strncmp+0x1c>
 800d828:	2a00      	cmp	r2, #0
 800d82a:	d1f5      	bne.n	800d818 <strncmp+0x8>
 800d82c:	1ad0      	subs	r0, r2, r3
 800d82e:	bd10      	pop	{r4, pc}
 800d830:	4610      	mov	r0, r2
 800d832:	e7fc      	b.n	800d82e <strncmp+0x1e>

0800d834 <_sbrk_r>:
 800d834:	b538      	push	{r3, r4, r5, lr}
 800d836:	4d06      	ldr	r5, [pc, #24]	@ (800d850 <_sbrk_r+0x1c>)
 800d838:	2300      	movs	r3, #0
 800d83a:	4604      	mov	r4, r0
 800d83c:	4608      	mov	r0, r1
 800d83e:	602b      	str	r3, [r5, #0]
 800d840:	f7f4 fa52 	bl	8001ce8 <_sbrk>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d102      	bne.n	800d84e <_sbrk_r+0x1a>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	b103      	cbz	r3, 800d84e <_sbrk_r+0x1a>
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	20001938 	.word	0x20001938

0800d854 <memcpy>:
 800d854:	440a      	add	r2, r1
 800d856:	4291      	cmp	r1, r2
 800d858:	f100 33ff 	add.w	r3, r0, #4294967295
 800d85c:	d100      	bne.n	800d860 <memcpy+0xc>
 800d85e:	4770      	bx	lr
 800d860:	b510      	push	{r4, lr}
 800d862:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d86a:	4291      	cmp	r1, r2
 800d86c:	d1f9      	bne.n	800d862 <memcpy+0xe>
 800d86e:	bd10      	pop	{r4, pc}

0800d870 <nan>:
 800d870:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d878 <nan+0x8>
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	00000000 	.word	0x00000000
 800d87c:	7ff80000 	.word	0x7ff80000

0800d880 <__assert_func>:
 800d880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d882:	4614      	mov	r4, r2
 800d884:	461a      	mov	r2, r3
 800d886:	4b09      	ldr	r3, [pc, #36]	@ (800d8ac <__assert_func+0x2c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4605      	mov	r5, r0
 800d88c:	68d8      	ldr	r0, [r3, #12]
 800d88e:	b954      	cbnz	r4, 800d8a6 <__assert_func+0x26>
 800d890:	4b07      	ldr	r3, [pc, #28]	@ (800d8b0 <__assert_func+0x30>)
 800d892:	461c      	mov	r4, r3
 800d894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d898:	9100      	str	r1, [sp, #0]
 800d89a:	462b      	mov	r3, r5
 800d89c:	4905      	ldr	r1, [pc, #20]	@ (800d8b4 <__assert_func+0x34>)
 800d89e:	f000 fba7 	bl	800dff0 <fiprintf>
 800d8a2:	f000 fbb7 	bl	800e014 <abort>
 800d8a6:	4b04      	ldr	r3, [pc, #16]	@ (800d8b8 <__assert_func+0x38>)
 800d8a8:	e7f4      	b.n	800d894 <__assert_func+0x14>
 800d8aa:	bf00      	nop
 800d8ac:	20000128 	.word	0x20000128
 800d8b0:	0800eacd 	.word	0x0800eacd
 800d8b4:	0800ea9f 	.word	0x0800ea9f
 800d8b8:	0800ea92 	.word	0x0800ea92

0800d8bc <_calloc_r>:
 800d8bc:	b570      	push	{r4, r5, r6, lr}
 800d8be:	fba1 5402 	umull	r5, r4, r1, r2
 800d8c2:	b93c      	cbnz	r4, 800d8d4 <_calloc_r+0x18>
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	f7fe f9c3 	bl	800bc50 <_malloc_r>
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	b928      	cbnz	r0, 800d8da <_calloc_r+0x1e>
 800d8ce:	2600      	movs	r6, #0
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	220c      	movs	r2, #12
 800d8d6:	6002      	str	r2, [r0, #0]
 800d8d8:	e7f9      	b.n	800d8ce <_calloc_r+0x12>
 800d8da:	462a      	mov	r2, r5
 800d8dc:	4621      	mov	r1, r4
 800d8de:	f7fd fa6e 	bl	800adbe <memset>
 800d8e2:	e7f5      	b.n	800d8d0 <_calloc_r+0x14>

0800d8e4 <rshift>:
 800d8e4:	6903      	ldr	r3, [r0, #16]
 800d8e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d8ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d8f2:	f100 0414 	add.w	r4, r0, #20
 800d8f6:	dd45      	ble.n	800d984 <rshift+0xa0>
 800d8f8:	f011 011f 	ands.w	r1, r1, #31
 800d8fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d900:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d904:	d10c      	bne.n	800d920 <rshift+0x3c>
 800d906:	f100 0710 	add.w	r7, r0, #16
 800d90a:	4629      	mov	r1, r5
 800d90c:	42b1      	cmp	r1, r6
 800d90e:	d334      	bcc.n	800d97a <rshift+0x96>
 800d910:	1a9b      	subs	r3, r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	1eea      	subs	r2, r5, #3
 800d916:	4296      	cmp	r6, r2
 800d918:	bf38      	it	cc
 800d91a:	2300      	movcc	r3, #0
 800d91c:	4423      	add	r3, r4
 800d91e:	e015      	b.n	800d94c <rshift+0x68>
 800d920:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d924:	f1c1 0820 	rsb	r8, r1, #32
 800d928:	40cf      	lsrs	r7, r1
 800d92a:	f105 0e04 	add.w	lr, r5, #4
 800d92e:	46a1      	mov	r9, r4
 800d930:	4576      	cmp	r6, lr
 800d932:	46f4      	mov	ip, lr
 800d934:	d815      	bhi.n	800d962 <rshift+0x7e>
 800d936:	1a9a      	subs	r2, r3, r2
 800d938:	0092      	lsls	r2, r2, #2
 800d93a:	3a04      	subs	r2, #4
 800d93c:	3501      	adds	r5, #1
 800d93e:	42ae      	cmp	r6, r5
 800d940:	bf38      	it	cc
 800d942:	2200      	movcc	r2, #0
 800d944:	18a3      	adds	r3, r4, r2
 800d946:	50a7      	str	r7, [r4, r2]
 800d948:	b107      	cbz	r7, 800d94c <rshift+0x68>
 800d94a:	3304      	adds	r3, #4
 800d94c:	1b1a      	subs	r2, r3, r4
 800d94e:	42a3      	cmp	r3, r4
 800d950:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d954:	bf08      	it	eq
 800d956:	2300      	moveq	r3, #0
 800d958:	6102      	str	r2, [r0, #16]
 800d95a:	bf08      	it	eq
 800d95c:	6143      	streq	r3, [r0, #20]
 800d95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d962:	f8dc c000 	ldr.w	ip, [ip]
 800d966:	fa0c fc08 	lsl.w	ip, ip, r8
 800d96a:	ea4c 0707 	orr.w	r7, ip, r7
 800d96e:	f849 7b04 	str.w	r7, [r9], #4
 800d972:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d976:	40cf      	lsrs	r7, r1
 800d978:	e7da      	b.n	800d930 <rshift+0x4c>
 800d97a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d97e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d982:	e7c3      	b.n	800d90c <rshift+0x28>
 800d984:	4623      	mov	r3, r4
 800d986:	e7e1      	b.n	800d94c <rshift+0x68>

0800d988 <__hexdig_fun>:
 800d988:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d98c:	2b09      	cmp	r3, #9
 800d98e:	d802      	bhi.n	800d996 <__hexdig_fun+0xe>
 800d990:	3820      	subs	r0, #32
 800d992:	b2c0      	uxtb	r0, r0
 800d994:	4770      	bx	lr
 800d996:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d99a:	2b05      	cmp	r3, #5
 800d99c:	d801      	bhi.n	800d9a2 <__hexdig_fun+0x1a>
 800d99e:	3847      	subs	r0, #71	@ 0x47
 800d9a0:	e7f7      	b.n	800d992 <__hexdig_fun+0xa>
 800d9a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d9a6:	2b05      	cmp	r3, #5
 800d9a8:	d801      	bhi.n	800d9ae <__hexdig_fun+0x26>
 800d9aa:	3827      	subs	r0, #39	@ 0x27
 800d9ac:	e7f1      	b.n	800d992 <__hexdig_fun+0xa>
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	4770      	bx	lr
	...

0800d9b4 <__gethex>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	b085      	sub	sp, #20
 800d9ba:	468a      	mov	sl, r1
 800d9bc:	9302      	str	r3, [sp, #8]
 800d9be:	680b      	ldr	r3, [r1, #0]
 800d9c0:	9001      	str	r0, [sp, #4]
 800d9c2:	4690      	mov	r8, r2
 800d9c4:	1c9c      	adds	r4, r3, #2
 800d9c6:	46a1      	mov	r9, r4
 800d9c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d9cc:	2830      	cmp	r0, #48	@ 0x30
 800d9ce:	d0fa      	beq.n	800d9c6 <__gethex+0x12>
 800d9d0:	eba9 0303 	sub.w	r3, r9, r3
 800d9d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d9d8:	f7ff ffd6 	bl	800d988 <__hexdig_fun>
 800d9dc:	4605      	mov	r5, r0
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d168      	bne.n	800dab4 <__gethex+0x100>
 800d9e2:	49a0      	ldr	r1, [pc, #640]	@ (800dc64 <__gethex+0x2b0>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	4648      	mov	r0, r9
 800d9e8:	f7ff ff12 	bl	800d810 <strncmp>
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d167      	bne.n	800dac2 <__gethex+0x10e>
 800d9f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d9f6:	4626      	mov	r6, r4
 800d9f8:	f7ff ffc6 	bl	800d988 <__hexdig_fun>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d062      	beq.n	800dac6 <__gethex+0x112>
 800da00:	4623      	mov	r3, r4
 800da02:	7818      	ldrb	r0, [r3, #0]
 800da04:	2830      	cmp	r0, #48	@ 0x30
 800da06:	4699      	mov	r9, r3
 800da08:	f103 0301 	add.w	r3, r3, #1
 800da0c:	d0f9      	beq.n	800da02 <__gethex+0x4e>
 800da0e:	f7ff ffbb 	bl	800d988 <__hexdig_fun>
 800da12:	fab0 f580 	clz	r5, r0
 800da16:	096d      	lsrs	r5, r5, #5
 800da18:	f04f 0b01 	mov.w	fp, #1
 800da1c:	464a      	mov	r2, r9
 800da1e:	4616      	mov	r6, r2
 800da20:	3201      	adds	r2, #1
 800da22:	7830      	ldrb	r0, [r6, #0]
 800da24:	f7ff ffb0 	bl	800d988 <__hexdig_fun>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d1f8      	bne.n	800da1e <__gethex+0x6a>
 800da2c:	498d      	ldr	r1, [pc, #564]	@ (800dc64 <__gethex+0x2b0>)
 800da2e:	2201      	movs	r2, #1
 800da30:	4630      	mov	r0, r6
 800da32:	f7ff feed 	bl	800d810 <strncmp>
 800da36:	2800      	cmp	r0, #0
 800da38:	d13f      	bne.n	800daba <__gethex+0x106>
 800da3a:	b944      	cbnz	r4, 800da4e <__gethex+0x9a>
 800da3c:	1c74      	adds	r4, r6, #1
 800da3e:	4622      	mov	r2, r4
 800da40:	4616      	mov	r6, r2
 800da42:	3201      	adds	r2, #1
 800da44:	7830      	ldrb	r0, [r6, #0]
 800da46:	f7ff ff9f 	bl	800d988 <__hexdig_fun>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d1f8      	bne.n	800da40 <__gethex+0x8c>
 800da4e:	1ba4      	subs	r4, r4, r6
 800da50:	00a7      	lsls	r7, r4, #2
 800da52:	7833      	ldrb	r3, [r6, #0]
 800da54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800da58:	2b50      	cmp	r3, #80	@ 0x50
 800da5a:	d13e      	bne.n	800dada <__gethex+0x126>
 800da5c:	7873      	ldrb	r3, [r6, #1]
 800da5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800da60:	d033      	beq.n	800daca <__gethex+0x116>
 800da62:	2b2d      	cmp	r3, #45	@ 0x2d
 800da64:	d034      	beq.n	800dad0 <__gethex+0x11c>
 800da66:	1c71      	adds	r1, r6, #1
 800da68:	2400      	movs	r4, #0
 800da6a:	7808      	ldrb	r0, [r1, #0]
 800da6c:	f7ff ff8c 	bl	800d988 <__hexdig_fun>
 800da70:	1e43      	subs	r3, r0, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b18      	cmp	r3, #24
 800da76:	d830      	bhi.n	800dada <__gethex+0x126>
 800da78:	f1a0 0210 	sub.w	r2, r0, #16
 800da7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da80:	f7ff ff82 	bl	800d988 <__hexdig_fun>
 800da84:	f100 3cff 	add.w	ip, r0, #4294967295
 800da88:	fa5f fc8c 	uxtb.w	ip, ip
 800da8c:	f1bc 0f18 	cmp.w	ip, #24
 800da90:	f04f 030a 	mov.w	r3, #10
 800da94:	d91e      	bls.n	800dad4 <__gethex+0x120>
 800da96:	b104      	cbz	r4, 800da9a <__gethex+0xe6>
 800da98:	4252      	negs	r2, r2
 800da9a:	4417      	add	r7, r2
 800da9c:	f8ca 1000 	str.w	r1, [sl]
 800daa0:	b1ed      	cbz	r5, 800dade <__gethex+0x12a>
 800daa2:	f1bb 0f00 	cmp.w	fp, #0
 800daa6:	bf0c      	ite	eq
 800daa8:	2506      	moveq	r5, #6
 800daaa:	2500      	movne	r5, #0
 800daac:	4628      	mov	r0, r5
 800daae:	b005      	add	sp, #20
 800dab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab4:	2500      	movs	r5, #0
 800dab6:	462c      	mov	r4, r5
 800dab8:	e7b0      	b.n	800da1c <__gethex+0x68>
 800daba:	2c00      	cmp	r4, #0
 800dabc:	d1c7      	bne.n	800da4e <__gethex+0x9a>
 800dabe:	4627      	mov	r7, r4
 800dac0:	e7c7      	b.n	800da52 <__gethex+0x9e>
 800dac2:	464e      	mov	r6, r9
 800dac4:	462f      	mov	r7, r5
 800dac6:	2501      	movs	r5, #1
 800dac8:	e7c3      	b.n	800da52 <__gethex+0x9e>
 800daca:	2400      	movs	r4, #0
 800dacc:	1cb1      	adds	r1, r6, #2
 800dace:	e7cc      	b.n	800da6a <__gethex+0xb6>
 800dad0:	2401      	movs	r4, #1
 800dad2:	e7fb      	b.n	800dacc <__gethex+0x118>
 800dad4:	fb03 0002 	mla	r0, r3, r2, r0
 800dad8:	e7ce      	b.n	800da78 <__gethex+0xc4>
 800dada:	4631      	mov	r1, r6
 800dadc:	e7de      	b.n	800da9c <__gethex+0xe8>
 800dade:	eba6 0309 	sub.w	r3, r6, r9
 800dae2:	3b01      	subs	r3, #1
 800dae4:	4629      	mov	r1, r5
 800dae6:	2b07      	cmp	r3, #7
 800dae8:	dc0a      	bgt.n	800db00 <__gethex+0x14c>
 800daea:	9801      	ldr	r0, [sp, #4]
 800daec:	f7fe f93c 	bl	800bd68 <_Balloc>
 800daf0:	4604      	mov	r4, r0
 800daf2:	b940      	cbnz	r0, 800db06 <__gethex+0x152>
 800daf4:	4b5c      	ldr	r3, [pc, #368]	@ (800dc68 <__gethex+0x2b4>)
 800daf6:	4602      	mov	r2, r0
 800daf8:	21e4      	movs	r1, #228	@ 0xe4
 800dafa:	485c      	ldr	r0, [pc, #368]	@ (800dc6c <__gethex+0x2b8>)
 800dafc:	f7ff fec0 	bl	800d880 <__assert_func>
 800db00:	3101      	adds	r1, #1
 800db02:	105b      	asrs	r3, r3, #1
 800db04:	e7ef      	b.n	800dae6 <__gethex+0x132>
 800db06:	f100 0a14 	add.w	sl, r0, #20
 800db0a:	2300      	movs	r3, #0
 800db0c:	4655      	mov	r5, sl
 800db0e:	469b      	mov	fp, r3
 800db10:	45b1      	cmp	r9, r6
 800db12:	d337      	bcc.n	800db84 <__gethex+0x1d0>
 800db14:	f845 bb04 	str.w	fp, [r5], #4
 800db18:	eba5 050a 	sub.w	r5, r5, sl
 800db1c:	10ad      	asrs	r5, r5, #2
 800db1e:	6125      	str	r5, [r4, #16]
 800db20:	4658      	mov	r0, fp
 800db22:	f7fe fa13 	bl	800bf4c <__hi0bits>
 800db26:	016d      	lsls	r5, r5, #5
 800db28:	f8d8 6000 	ldr.w	r6, [r8]
 800db2c:	1a2d      	subs	r5, r5, r0
 800db2e:	42b5      	cmp	r5, r6
 800db30:	dd54      	ble.n	800dbdc <__gethex+0x228>
 800db32:	1bad      	subs	r5, r5, r6
 800db34:	4629      	mov	r1, r5
 800db36:	4620      	mov	r0, r4
 800db38:	f7fe fda7 	bl	800c68a <__any_on>
 800db3c:	4681      	mov	r9, r0
 800db3e:	b178      	cbz	r0, 800db60 <__gethex+0x1ac>
 800db40:	1e6b      	subs	r3, r5, #1
 800db42:	1159      	asrs	r1, r3, #5
 800db44:	f003 021f 	and.w	r2, r3, #31
 800db48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db4c:	f04f 0901 	mov.w	r9, #1
 800db50:	fa09 f202 	lsl.w	r2, r9, r2
 800db54:	420a      	tst	r2, r1
 800db56:	d003      	beq.n	800db60 <__gethex+0x1ac>
 800db58:	454b      	cmp	r3, r9
 800db5a:	dc36      	bgt.n	800dbca <__gethex+0x216>
 800db5c:	f04f 0902 	mov.w	r9, #2
 800db60:	4629      	mov	r1, r5
 800db62:	4620      	mov	r0, r4
 800db64:	f7ff febe 	bl	800d8e4 <rshift>
 800db68:	442f      	add	r7, r5
 800db6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db6e:	42bb      	cmp	r3, r7
 800db70:	da42      	bge.n	800dbf8 <__gethex+0x244>
 800db72:	9801      	ldr	r0, [sp, #4]
 800db74:	4621      	mov	r1, r4
 800db76:	f7fe f937 	bl	800bde8 <_Bfree>
 800db7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db7c:	2300      	movs	r3, #0
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	25a3      	movs	r5, #163	@ 0xa3
 800db82:	e793      	b.n	800daac <__gethex+0xf8>
 800db84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800db88:	2a2e      	cmp	r2, #46	@ 0x2e
 800db8a:	d012      	beq.n	800dbb2 <__gethex+0x1fe>
 800db8c:	2b20      	cmp	r3, #32
 800db8e:	d104      	bne.n	800db9a <__gethex+0x1e6>
 800db90:	f845 bb04 	str.w	fp, [r5], #4
 800db94:	f04f 0b00 	mov.w	fp, #0
 800db98:	465b      	mov	r3, fp
 800db9a:	7830      	ldrb	r0, [r6, #0]
 800db9c:	9303      	str	r3, [sp, #12]
 800db9e:	f7ff fef3 	bl	800d988 <__hexdig_fun>
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	f000 000f 	and.w	r0, r0, #15
 800dba8:	4098      	lsls	r0, r3
 800dbaa:	ea4b 0b00 	orr.w	fp, fp, r0
 800dbae:	3304      	adds	r3, #4
 800dbb0:	e7ae      	b.n	800db10 <__gethex+0x15c>
 800dbb2:	45b1      	cmp	r9, r6
 800dbb4:	d8ea      	bhi.n	800db8c <__gethex+0x1d8>
 800dbb6:	492b      	ldr	r1, [pc, #172]	@ (800dc64 <__gethex+0x2b0>)
 800dbb8:	9303      	str	r3, [sp, #12]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	f7ff fe27 	bl	800d810 <strncmp>
 800dbc2:	9b03      	ldr	r3, [sp, #12]
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d1e1      	bne.n	800db8c <__gethex+0x1d8>
 800dbc8:	e7a2      	b.n	800db10 <__gethex+0x15c>
 800dbca:	1ea9      	subs	r1, r5, #2
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f7fe fd5c 	bl	800c68a <__any_on>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d0c2      	beq.n	800db5c <__gethex+0x1a8>
 800dbd6:	f04f 0903 	mov.w	r9, #3
 800dbda:	e7c1      	b.n	800db60 <__gethex+0x1ac>
 800dbdc:	da09      	bge.n	800dbf2 <__gethex+0x23e>
 800dbde:	1b75      	subs	r5, r6, r5
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	9801      	ldr	r0, [sp, #4]
 800dbe4:	462a      	mov	r2, r5
 800dbe6:	f7fe fb17 	bl	800c218 <__lshift>
 800dbea:	1b7f      	subs	r7, r7, r5
 800dbec:	4604      	mov	r4, r0
 800dbee:	f100 0a14 	add.w	sl, r0, #20
 800dbf2:	f04f 0900 	mov.w	r9, #0
 800dbf6:	e7b8      	b.n	800db6a <__gethex+0x1b6>
 800dbf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dbfc:	42bd      	cmp	r5, r7
 800dbfe:	dd6f      	ble.n	800dce0 <__gethex+0x32c>
 800dc00:	1bed      	subs	r5, r5, r7
 800dc02:	42ae      	cmp	r6, r5
 800dc04:	dc34      	bgt.n	800dc70 <__gethex+0x2bc>
 800dc06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d022      	beq.n	800dc54 <__gethex+0x2a0>
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	d024      	beq.n	800dc5c <__gethex+0x2a8>
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d115      	bne.n	800dc42 <__gethex+0x28e>
 800dc16:	42ae      	cmp	r6, r5
 800dc18:	d113      	bne.n	800dc42 <__gethex+0x28e>
 800dc1a:	2e01      	cmp	r6, #1
 800dc1c:	d10b      	bne.n	800dc36 <__gethex+0x282>
 800dc1e:	9a02      	ldr	r2, [sp, #8]
 800dc20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc24:	6013      	str	r3, [r2, #0]
 800dc26:	2301      	movs	r3, #1
 800dc28:	6123      	str	r3, [r4, #16]
 800dc2a:	f8ca 3000 	str.w	r3, [sl]
 800dc2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc30:	2562      	movs	r5, #98	@ 0x62
 800dc32:	601c      	str	r4, [r3, #0]
 800dc34:	e73a      	b.n	800daac <__gethex+0xf8>
 800dc36:	1e71      	subs	r1, r6, #1
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f7fe fd26 	bl	800c68a <__any_on>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d1ed      	bne.n	800dc1e <__gethex+0x26a>
 800dc42:	9801      	ldr	r0, [sp, #4]
 800dc44:	4621      	mov	r1, r4
 800dc46:	f7fe f8cf 	bl	800bde8 <_Bfree>
 800dc4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	2550      	movs	r5, #80	@ 0x50
 800dc52:	e72b      	b.n	800daac <__gethex+0xf8>
 800dc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1f3      	bne.n	800dc42 <__gethex+0x28e>
 800dc5a:	e7e0      	b.n	800dc1e <__gethex+0x26a>
 800dc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1dd      	bne.n	800dc1e <__gethex+0x26a>
 800dc62:	e7ee      	b.n	800dc42 <__gethex+0x28e>
 800dc64:	0800e920 	.word	0x0800e920
 800dc68:	0800e7b5 	.word	0x0800e7b5
 800dc6c:	0800eace 	.word	0x0800eace
 800dc70:	1e6f      	subs	r7, r5, #1
 800dc72:	f1b9 0f00 	cmp.w	r9, #0
 800dc76:	d130      	bne.n	800dcda <__gethex+0x326>
 800dc78:	b127      	cbz	r7, 800dc84 <__gethex+0x2d0>
 800dc7a:	4639      	mov	r1, r7
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	f7fe fd04 	bl	800c68a <__any_on>
 800dc82:	4681      	mov	r9, r0
 800dc84:	117a      	asrs	r2, r7, #5
 800dc86:	2301      	movs	r3, #1
 800dc88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc8c:	f007 071f 	and.w	r7, r7, #31
 800dc90:	40bb      	lsls	r3, r7
 800dc92:	4213      	tst	r3, r2
 800dc94:	4629      	mov	r1, r5
 800dc96:	4620      	mov	r0, r4
 800dc98:	bf18      	it	ne
 800dc9a:	f049 0902 	orrne.w	r9, r9, #2
 800dc9e:	f7ff fe21 	bl	800d8e4 <rshift>
 800dca2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dca6:	1b76      	subs	r6, r6, r5
 800dca8:	2502      	movs	r5, #2
 800dcaa:	f1b9 0f00 	cmp.w	r9, #0
 800dcae:	d047      	beq.n	800dd40 <__gethex+0x38c>
 800dcb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d015      	beq.n	800dce4 <__gethex+0x330>
 800dcb8:	2b03      	cmp	r3, #3
 800dcba:	d017      	beq.n	800dcec <__gethex+0x338>
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d109      	bne.n	800dcd4 <__gethex+0x320>
 800dcc0:	f019 0f02 	tst.w	r9, #2
 800dcc4:	d006      	beq.n	800dcd4 <__gethex+0x320>
 800dcc6:	f8da 3000 	ldr.w	r3, [sl]
 800dcca:	ea49 0903 	orr.w	r9, r9, r3
 800dcce:	f019 0f01 	tst.w	r9, #1
 800dcd2:	d10e      	bne.n	800dcf2 <__gethex+0x33e>
 800dcd4:	f045 0510 	orr.w	r5, r5, #16
 800dcd8:	e032      	b.n	800dd40 <__gethex+0x38c>
 800dcda:	f04f 0901 	mov.w	r9, #1
 800dcde:	e7d1      	b.n	800dc84 <__gethex+0x2d0>
 800dce0:	2501      	movs	r5, #1
 800dce2:	e7e2      	b.n	800dcaa <__gethex+0x2f6>
 800dce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dce6:	f1c3 0301 	rsb	r3, r3, #1
 800dcea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dcec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d0f0      	beq.n	800dcd4 <__gethex+0x320>
 800dcf2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dcf6:	f104 0314 	add.w	r3, r4, #20
 800dcfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dcfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd02:	f04f 0c00 	mov.w	ip, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd10:	d01b      	beq.n	800dd4a <__gethex+0x396>
 800dd12:	3201      	adds	r2, #1
 800dd14:	6002      	str	r2, [r0, #0]
 800dd16:	2d02      	cmp	r5, #2
 800dd18:	f104 0314 	add.w	r3, r4, #20
 800dd1c:	d13c      	bne.n	800dd98 <__gethex+0x3e4>
 800dd1e:	f8d8 2000 	ldr.w	r2, [r8]
 800dd22:	3a01      	subs	r2, #1
 800dd24:	42b2      	cmp	r2, r6
 800dd26:	d109      	bne.n	800dd3c <__gethex+0x388>
 800dd28:	1171      	asrs	r1, r6, #5
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd30:	f006 061f 	and.w	r6, r6, #31
 800dd34:	fa02 f606 	lsl.w	r6, r2, r6
 800dd38:	421e      	tst	r6, r3
 800dd3a:	d13a      	bne.n	800ddb2 <__gethex+0x3fe>
 800dd3c:	f045 0520 	orr.w	r5, r5, #32
 800dd40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd42:	601c      	str	r4, [r3, #0]
 800dd44:	9b02      	ldr	r3, [sp, #8]
 800dd46:	601f      	str	r7, [r3, #0]
 800dd48:	e6b0      	b.n	800daac <__gethex+0xf8>
 800dd4a:	4299      	cmp	r1, r3
 800dd4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd50:	d8d9      	bhi.n	800dd06 <__gethex+0x352>
 800dd52:	68a3      	ldr	r3, [r4, #8]
 800dd54:	459b      	cmp	fp, r3
 800dd56:	db17      	blt.n	800dd88 <__gethex+0x3d4>
 800dd58:	6861      	ldr	r1, [r4, #4]
 800dd5a:	9801      	ldr	r0, [sp, #4]
 800dd5c:	3101      	adds	r1, #1
 800dd5e:	f7fe f803 	bl	800bd68 <_Balloc>
 800dd62:	4681      	mov	r9, r0
 800dd64:	b918      	cbnz	r0, 800dd6e <__gethex+0x3ba>
 800dd66:	4b1a      	ldr	r3, [pc, #104]	@ (800ddd0 <__gethex+0x41c>)
 800dd68:	4602      	mov	r2, r0
 800dd6a:	2184      	movs	r1, #132	@ 0x84
 800dd6c:	e6c5      	b.n	800dafa <__gethex+0x146>
 800dd6e:	6922      	ldr	r2, [r4, #16]
 800dd70:	3202      	adds	r2, #2
 800dd72:	f104 010c 	add.w	r1, r4, #12
 800dd76:	0092      	lsls	r2, r2, #2
 800dd78:	300c      	adds	r0, #12
 800dd7a:	f7ff fd6b 	bl	800d854 <memcpy>
 800dd7e:	4621      	mov	r1, r4
 800dd80:	9801      	ldr	r0, [sp, #4]
 800dd82:	f7fe f831 	bl	800bde8 <_Bfree>
 800dd86:	464c      	mov	r4, r9
 800dd88:	6923      	ldr	r3, [r4, #16]
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd90:	6122      	str	r2, [r4, #16]
 800dd92:	2201      	movs	r2, #1
 800dd94:	615a      	str	r2, [r3, #20]
 800dd96:	e7be      	b.n	800dd16 <__gethex+0x362>
 800dd98:	6922      	ldr	r2, [r4, #16]
 800dd9a:	455a      	cmp	r2, fp
 800dd9c:	dd0b      	ble.n	800ddb6 <__gethex+0x402>
 800dd9e:	2101      	movs	r1, #1
 800dda0:	4620      	mov	r0, r4
 800dda2:	f7ff fd9f 	bl	800d8e4 <rshift>
 800dda6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddaa:	3701      	adds	r7, #1
 800ddac:	42bb      	cmp	r3, r7
 800ddae:	f6ff aee0 	blt.w	800db72 <__gethex+0x1be>
 800ddb2:	2501      	movs	r5, #1
 800ddb4:	e7c2      	b.n	800dd3c <__gethex+0x388>
 800ddb6:	f016 061f 	ands.w	r6, r6, #31
 800ddba:	d0fa      	beq.n	800ddb2 <__gethex+0x3fe>
 800ddbc:	4453      	add	r3, sl
 800ddbe:	f1c6 0620 	rsb	r6, r6, #32
 800ddc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ddc6:	f7fe f8c1 	bl	800bf4c <__hi0bits>
 800ddca:	42b0      	cmp	r0, r6
 800ddcc:	dbe7      	blt.n	800dd9e <__gethex+0x3ea>
 800ddce:	e7f0      	b.n	800ddb2 <__gethex+0x3fe>
 800ddd0:	0800e7b5 	.word	0x0800e7b5

0800ddd4 <L_shift>:
 800ddd4:	f1c2 0208 	rsb	r2, r2, #8
 800ddd8:	0092      	lsls	r2, r2, #2
 800ddda:	b570      	push	{r4, r5, r6, lr}
 800dddc:	f1c2 0620 	rsb	r6, r2, #32
 800dde0:	6843      	ldr	r3, [r0, #4]
 800dde2:	6804      	ldr	r4, [r0, #0]
 800dde4:	fa03 f506 	lsl.w	r5, r3, r6
 800dde8:	432c      	orrs	r4, r5
 800ddea:	40d3      	lsrs	r3, r2
 800ddec:	6004      	str	r4, [r0, #0]
 800ddee:	f840 3f04 	str.w	r3, [r0, #4]!
 800ddf2:	4288      	cmp	r0, r1
 800ddf4:	d3f4      	bcc.n	800dde0 <L_shift+0xc>
 800ddf6:	bd70      	pop	{r4, r5, r6, pc}

0800ddf8 <__match>:
 800ddf8:	b530      	push	{r4, r5, lr}
 800ddfa:	6803      	ldr	r3, [r0, #0]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de02:	b914      	cbnz	r4, 800de0a <__match+0x12>
 800de04:	6003      	str	r3, [r0, #0]
 800de06:	2001      	movs	r0, #1
 800de08:	bd30      	pop	{r4, r5, pc}
 800de0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800de12:	2d19      	cmp	r5, #25
 800de14:	bf98      	it	ls
 800de16:	3220      	addls	r2, #32
 800de18:	42a2      	cmp	r2, r4
 800de1a:	d0f0      	beq.n	800ddfe <__match+0x6>
 800de1c:	2000      	movs	r0, #0
 800de1e:	e7f3      	b.n	800de08 <__match+0x10>

0800de20 <__hexnan>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	680b      	ldr	r3, [r1, #0]
 800de26:	6801      	ldr	r1, [r0, #0]
 800de28:	115e      	asrs	r6, r3, #5
 800de2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de2e:	f013 031f 	ands.w	r3, r3, #31
 800de32:	b087      	sub	sp, #28
 800de34:	bf18      	it	ne
 800de36:	3604      	addne	r6, #4
 800de38:	2500      	movs	r5, #0
 800de3a:	1f37      	subs	r7, r6, #4
 800de3c:	4682      	mov	sl, r0
 800de3e:	4690      	mov	r8, r2
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	f846 5c04 	str.w	r5, [r6, #-4]
 800de46:	46b9      	mov	r9, r7
 800de48:	463c      	mov	r4, r7
 800de4a:	9502      	str	r5, [sp, #8]
 800de4c:	46ab      	mov	fp, r5
 800de4e:	784a      	ldrb	r2, [r1, #1]
 800de50:	1c4b      	adds	r3, r1, #1
 800de52:	9303      	str	r3, [sp, #12]
 800de54:	b342      	cbz	r2, 800dea8 <__hexnan+0x88>
 800de56:	4610      	mov	r0, r2
 800de58:	9105      	str	r1, [sp, #20]
 800de5a:	9204      	str	r2, [sp, #16]
 800de5c:	f7ff fd94 	bl	800d988 <__hexdig_fun>
 800de60:	2800      	cmp	r0, #0
 800de62:	d151      	bne.n	800df08 <__hexnan+0xe8>
 800de64:	9a04      	ldr	r2, [sp, #16]
 800de66:	9905      	ldr	r1, [sp, #20]
 800de68:	2a20      	cmp	r2, #32
 800de6a:	d818      	bhi.n	800de9e <__hexnan+0x7e>
 800de6c:	9b02      	ldr	r3, [sp, #8]
 800de6e:	459b      	cmp	fp, r3
 800de70:	dd13      	ble.n	800de9a <__hexnan+0x7a>
 800de72:	454c      	cmp	r4, r9
 800de74:	d206      	bcs.n	800de84 <__hexnan+0x64>
 800de76:	2d07      	cmp	r5, #7
 800de78:	dc04      	bgt.n	800de84 <__hexnan+0x64>
 800de7a:	462a      	mov	r2, r5
 800de7c:	4649      	mov	r1, r9
 800de7e:	4620      	mov	r0, r4
 800de80:	f7ff ffa8 	bl	800ddd4 <L_shift>
 800de84:	4544      	cmp	r4, r8
 800de86:	d952      	bls.n	800df2e <__hexnan+0x10e>
 800de88:	2300      	movs	r3, #0
 800de8a:	f1a4 0904 	sub.w	r9, r4, #4
 800de8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800de92:	f8cd b008 	str.w	fp, [sp, #8]
 800de96:	464c      	mov	r4, r9
 800de98:	461d      	mov	r5, r3
 800de9a:	9903      	ldr	r1, [sp, #12]
 800de9c:	e7d7      	b.n	800de4e <__hexnan+0x2e>
 800de9e:	2a29      	cmp	r2, #41	@ 0x29
 800dea0:	d157      	bne.n	800df52 <__hexnan+0x132>
 800dea2:	3102      	adds	r1, #2
 800dea4:	f8ca 1000 	str.w	r1, [sl]
 800dea8:	f1bb 0f00 	cmp.w	fp, #0
 800deac:	d051      	beq.n	800df52 <__hexnan+0x132>
 800deae:	454c      	cmp	r4, r9
 800deb0:	d206      	bcs.n	800dec0 <__hexnan+0xa0>
 800deb2:	2d07      	cmp	r5, #7
 800deb4:	dc04      	bgt.n	800dec0 <__hexnan+0xa0>
 800deb6:	462a      	mov	r2, r5
 800deb8:	4649      	mov	r1, r9
 800deba:	4620      	mov	r0, r4
 800debc:	f7ff ff8a 	bl	800ddd4 <L_shift>
 800dec0:	4544      	cmp	r4, r8
 800dec2:	d936      	bls.n	800df32 <__hexnan+0x112>
 800dec4:	f1a8 0204 	sub.w	r2, r8, #4
 800dec8:	4623      	mov	r3, r4
 800deca:	f853 1b04 	ldr.w	r1, [r3], #4
 800dece:	f842 1f04 	str.w	r1, [r2, #4]!
 800ded2:	429f      	cmp	r7, r3
 800ded4:	d2f9      	bcs.n	800deca <__hexnan+0xaa>
 800ded6:	1b3b      	subs	r3, r7, r4
 800ded8:	f023 0303 	bic.w	r3, r3, #3
 800dedc:	3304      	adds	r3, #4
 800dede:	3401      	adds	r4, #1
 800dee0:	3e03      	subs	r6, #3
 800dee2:	42b4      	cmp	r4, r6
 800dee4:	bf88      	it	hi
 800dee6:	2304      	movhi	r3, #4
 800dee8:	4443      	add	r3, r8
 800deea:	2200      	movs	r2, #0
 800deec:	f843 2b04 	str.w	r2, [r3], #4
 800def0:	429f      	cmp	r7, r3
 800def2:	d2fb      	bcs.n	800deec <__hexnan+0xcc>
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	b91b      	cbnz	r3, 800df00 <__hexnan+0xe0>
 800def8:	4547      	cmp	r7, r8
 800defa:	d128      	bne.n	800df4e <__hexnan+0x12e>
 800defc:	2301      	movs	r3, #1
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	2005      	movs	r0, #5
 800df02:	b007      	add	sp, #28
 800df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	3501      	adds	r5, #1
 800df0a:	2d08      	cmp	r5, #8
 800df0c:	f10b 0b01 	add.w	fp, fp, #1
 800df10:	dd06      	ble.n	800df20 <__hexnan+0x100>
 800df12:	4544      	cmp	r4, r8
 800df14:	d9c1      	bls.n	800de9a <__hexnan+0x7a>
 800df16:	2300      	movs	r3, #0
 800df18:	f844 3c04 	str.w	r3, [r4, #-4]
 800df1c:	2501      	movs	r5, #1
 800df1e:	3c04      	subs	r4, #4
 800df20:	6822      	ldr	r2, [r4, #0]
 800df22:	f000 000f 	and.w	r0, r0, #15
 800df26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df2a:	6020      	str	r0, [r4, #0]
 800df2c:	e7b5      	b.n	800de9a <__hexnan+0x7a>
 800df2e:	2508      	movs	r5, #8
 800df30:	e7b3      	b.n	800de9a <__hexnan+0x7a>
 800df32:	9b01      	ldr	r3, [sp, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d0dd      	beq.n	800def4 <__hexnan+0xd4>
 800df38:	f1c3 0320 	rsb	r3, r3, #32
 800df3c:	f04f 32ff 	mov.w	r2, #4294967295
 800df40:	40da      	lsrs	r2, r3
 800df42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800df46:	4013      	ands	r3, r2
 800df48:	f846 3c04 	str.w	r3, [r6, #-4]
 800df4c:	e7d2      	b.n	800def4 <__hexnan+0xd4>
 800df4e:	3f04      	subs	r7, #4
 800df50:	e7d0      	b.n	800def4 <__hexnan+0xd4>
 800df52:	2004      	movs	r0, #4
 800df54:	e7d5      	b.n	800df02 <__hexnan+0xe2>

0800df56 <__ascii_mbtowc>:
 800df56:	b082      	sub	sp, #8
 800df58:	b901      	cbnz	r1, 800df5c <__ascii_mbtowc+0x6>
 800df5a:	a901      	add	r1, sp, #4
 800df5c:	b142      	cbz	r2, 800df70 <__ascii_mbtowc+0x1a>
 800df5e:	b14b      	cbz	r3, 800df74 <__ascii_mbtowc+0x1e>
 800df60:	7813      	ldrb	r3, [r2, #0]
 800df62:	600b      	str	r3, [r1, #0]
 800df64:	7812      	ldrb	r2, [r2, #0]
 800df66:	1e10      	subs	r0, r2, #0
 800df68:	bf18      	it	ne
 800df6a:	2001      	movne	r0, #1
 800df6c:	b002      	add	sp, #8
 800df6e:	4770      	bx	lr
 800df70:	4610      	mov	r0, r2
 800df72:	e7fb      	b.n	800df6c <__ascii_mbtowc+0x16>
 800df74:	f06f 0001 	mvn.w	r0, #1
 800df78:	e7f8      	b.n	800df6c <__ascii_mbtowc+0x16>

0800df7a <_realloc_r>:
 800df7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df7e:	4680      	mov	r8, r0
 800df80:	4615      	mov	r5, r2
 800df82:	460c      	mov	r4, r1
 800df84:	b921      	cbnz	r1, 800df90 <_realloc_r+0x16>
 800df86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df8a:	4611      	mov	r1, r2
 800df8c:	f7fd be60 	b.w	800bc50 <_malloc_r>
 800df90:	b92a      	cbnz	r2, 800df9e <_realloc_r+0x24>
 800df92:	f7fd fde9 	bl	800bb68 <_free_r>
 800df96:	2400      	movs	r4, #0
 800df98:	4620      	mov	r0, r4
 800df9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df9e:	f000 f840 	bl	800e022 <_malloc_usable_size_r>
 800dfa2:	4285      	cmp	r5, r0
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	d802      	bhi.n	800dfae <_realloc_r+0x34>
 800dfa8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dfac:	d8f4      	bhi.n	800df98 <_realloc_r+0x1e>
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4640      	mov	r0, r8
 800dfb2:	f7fd fe4d 	bl	800bc50 <_malloc_r>
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d0ec      	beq.n	800df96 <_realloc_r+0x1c>
 800dfbc:	42b5      	cmp	r5, r6
 800dfbe:	462a      	mov	r2, r5
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	bf28      	it	cs
 800dfc4:	4632      	movcs	r2, r6
 800dfc6:	f7ff fc45 	bl	800d854 <memcpy>
 800dfca:	4621      	mov	r1, r4
 800dfcc:	4640      	mov	r0, r8
 800dfce:	f7fd fdcb 	bl	800bb68 <_free_r>
 800dfd2:	463c      	mov	r4, r7
 800dfd4:	e7e0      	b.n	800df98 <_realloc_r+0x1e>

0800dfd6 <__ascii_wctomb>:
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	b141      	cbz	r1, 800dfee <__ascii_wctomb+0x18>
 800dfdc:	2aff      	cmp	r2, #255	@ 0xff
 800dfde:	d904      	bls.n	800dfea <__ascii_wctomb+0x14>
 800dfe0:	228a      	movs	r2, #138	@ 0x8a
 800dfe2:	601a      	str	r2, [r3, #0]
 800dfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe8:	4770      	bx	lr
 800dfea:	700a      	strb	r2, [r1, #0]
 800dfec:	2001      	movs	r0, #1
 800dfee:	4770      	bx	lr

0800dff0 <fiprintf>:
 800dff0:	b40e      	push	{r1, r2, r3}
 800dff2:	b503      	push	{r0, r1, lr}
 800dff4:	4601      	mov	r1, r0
 800dff6:	ab03      	add	r3, sp, #12
 800dff8:	4805      	ldr	r0, [pc, #20]	@ (800e010 <fiprintf+0x20>)
 800dffa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dffe:	6800      	ldr	r0, [r0, #0]
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	f000 f83f 	bl	800e084 <_vfiprintf_r>
 800e006:	b002      	add	sp, #8
 800e008:	f85d eb04 	ldr.w	lr, [sp], #4
 800e00c:	b003      	add	sp, #12
 800e00e:	4770      	bx	lr
 800e010:	20000128 	.word	0x20000128

0800e014 <abort>:
 800e014:	b508      	push	{r3, lr}
 800e016:	2006      	movs	r0, #6
 800e018:	f000 fa08 	bl	800e42c <raise>
 800e01c:	2001      	movs	r0, #1
 800e01e:	f7f3 fe07 	bl	8001c30 <_exit>

0800e022 <_malloc_usable_size_r>:
 800e022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e026:	1f18      	subs	r0, r3, #4
 800e028:	2b00      	cmp	r3, #0
 800e02a:	bfbc      	itt	lt
 800e02c:	580b      	ldrlt	r3, [r1, r0]
 800e02e:	18c0      	addlt	r0, r0, r3
 800e030:	4770      	bx	lr

0800e032 <__sfputc_r>:
 800e032:	6893      	ldr	r3, [r2, #8]
 800e034:	3b01      	subs	r3, #1
 800e036:	2b00      	cmp	r3, #0
 800e038:	b410      	push	{r4}
 800e03a:	6093      	str	r3, [r2, #8]
 800e03c:	da08      	bge.n	800e050 <__sfputc_r+0x1e>
 800e03e:	6994      	ldr	r4, [r2, #24]
 800e040:	42a3      	cmp	r3, r4
 800e042:	db01      	blt.n	800e048 <__sfputc_r+0x16>
 800e044:	290a      	cmp	r1, #10
 800e046:	d103      	bne.n	800e050 <__sfputc_r+0x1e>
 800e048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e04c:	f000 b932 	b.w	800e2b4 <__swbuf_r>
 800e050:	6813      	ldr	r3, [r2, #0]
 800e052:	1c58      	adds	r0, r3, #1
 800e054:	6010      	str	r0, [r2, #0]
 800e056:	7019      	strb	r1, [r3, #0]
 800e058:	4608      	mov	r0, r1
 800e05a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <__sfputs_r>:
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	4606      	mov	r6, r0
 800e064:	460f      	mov	r7, r1
 800e066:	4614      	mov	r4, r2
 800e068:	18d5      	adds	r5, r2, r3
 800e06a:	42ac      	cmp	r4, r5
 800e06c:	d101      	bne.n	800e072 <__sfputs_r+0x12>
 800e06e:	2000      	movs	r0, #0
 800e070:	e007      	b.n	800e082 <__sfputs_r+0x22>
 800e072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e076:	463a      	mov	r2, r7
 800e078:	4630      	mov	r0, r6
 800e07a:	f7ff ffda 	bl	800e032 <__sfputc_r>
 800e07e:	1c43      	adds	r3, r0, #1
 800e080:	d1f3      	bne.n	800e06a <__sfputs_r+0xa>
 800e082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e084 <_vfiprintf_r>:
 800e084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e088:	460d      	mov	r5, r1
 800e08a:	b09d      	sub	sp, #116	@ 0x74
 800e08c:	4614      	mov	r4, r2
 800e08e:	4698      	mov	r8, r3
 800e090:	4606      	mov	r6, r0
 800e092:	b118      	cbz	r0, 800e09c <_vfiprintf_r+0x18>
 800e094:	6a03      	ldr	r3, [r0, #32]
 800e096:	b90b      	cbnz	r3, 800e09c <_vfiprintf_r+0x18>
 800e098:	f7fc fdf8 	bl	800ac8c <__sinit>
 800e09c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e09e:	07d9      	lsls	r1, r3, #31
 800e0a0:	d405      	bmi.n	800e0ae <_vfiprintf_r+0x2a>
 800e0a2:	89ab      	ldrh	r3, [r5, #12]
 800e0a4:	059a      	lsls	r2, r3, #22
 800e0a6:	d402      	bmi.n	800e0ae <_vfiprintf_r+0x2a>
 800e0a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0aa:	f7fc ff06 	bl	800aeba <__retarget_lock_acquire_recursive>
 800e0ae:	89ab      	ldrh	r3, [r5, #12]
 800e0b0:	071b      	lsls	r3, r3, #28
 800e0b2:	d501      	bpl.n	800e0b8 <_vfiprintf_r+0x34>
 800e0b4:	692b      	ldr	r3, [r5, #16]
 800e0b6:	b99b      	cbnz	r3, 800e0e0 <_vfiprintf_r+0x5c>
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	f000 f938 	bl	800e330 <__swsetup_r>
 800e0c0:	b170      	cbz	r0, 800e0e0 <_vfiprintf_r+0x5c>
 800e0c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0c4:	07dc      	lsls	r4, r3, #31
 800e0c6:	d504      	bpl.n	800e0d2 <_vfiprintf_r+0x4e>
 800e0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0cc:	b01d      	add	sp, #116	@ 0x74
 800e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d2:	89ab      	ldrh	r3, [r5, #12]
 800e0d4:	0598      	lsls	r0, r3, #22
 800e0d6:	d4f7      	bmi.n	800e0c8 <_vfiprintf_r+0x44>
 800e0d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0da:	f7fc feef 	bl	800aebc <__retarget_lock_release_recursive>
 800e0de:	e7f3      	b.n	800e0c8 <_vfiprintf_r+0x44>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0e4:	2320      	movs	r3, #32
 800e0e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0ee:	2330      	movs	r3, #48	@ 0x30
 800e0f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2a0 <_vfiprintf_r+0x21c>
 800e0f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0f8:	f04f 0901 	mov.w	r9, #1
 800e0fc:	4623      	mov	r3, r4
 800e0fe:	469a      	mov	sl, r3
 800e100:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e104:	b10a      	cbz	r2, 800e10a <_vfiprintf_r+0x86>
 800e106:	2a25      	cmp	r2, #37	@ 0x25
 800e108:	d1f9      	bne.n	800e0fe <_vfiprintf_r+0x7a>
 800e10a:	ebba 0b04 	subs.w	fp, sl, r4
 800e10e:	d00b      	beq.n	800e128 <_vfiprintf_r+0xa4>
 800e110:	465b      	mov	r3, fp
 800e112:	4622      	mov	r2, r4
 800e114:	4629      	mov	r1, r5
 800e116:	4630      	mov	r0, r6
 800e118:	f7ff ffa2 	bl	800e060 <__sfputs_r>
 800e11c:	3001      	adds	r0, #1
 800e11e:	f000 80a7 	beq.w	800e270 <_vfiprintf_r+0x1ec>
 800e122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e124:	445a      	add	r2, fp
 800e126:	9209      	str	r2, [sp, #36]	@ 0x24
 800e128:	f89a 3000 	ldrb.w	r3, [sl]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f000 809f 	beq.w	800e270 <_vfiprintf_r+0x1ec>
 800e132:	2300      	movs	r3, #0
 800e134:	f04f 32ff 	mov.w	r2, #4294967295
 800e138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e13c:	f10a 0a01 	add.w	sl, sl, #1
 800e140:	9304      	str	r3, [sp, #16]
 800e142:	9307      	str	r3, [sp, #28]
 800e144:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e148:	931a      	str	r3, [sp, #104]	@ 0x68
 800e14a:	4654      	mov	r4, sl
 800e14c:	2205      	movs	r2, #5
 800e14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e152:	4853      	ldr	r0, [pc, #332]	@ (800e2a0 <_vfiprintf_r+0x21c>)
 800e154:	f7f2 f844 	bl	80001e0 <memchr>
 800e158:	9a04      	ldr	r2, [sp, #16]
 800e15a:	b9d8      	cbnz	r0, 800e194 <_vfiprintf_r+0x110>
 800e15c:	06d1      	lsls	r1, r2, #27
 800e15e:	bf44      	itt	mi
 800e160:	2320      	movmi	r3, #32
 800e162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e166:	0713      	lsls	r3, r2, #28
 800e168:	bf44      	itt	mi
 800e16a:	232b      	movmi	r3, #43	@ 0x2b
 800e16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e170:	f89a 3000 	ldrb.w	r3, [sl]
 800e174:	2b2a      	cmp	r3, #42	@ 0x2a
 800e176:	d015      	beq.n	800e1a4 <_vfiprintf_r+0x120>
 800e178:	9a07      	ldr	r2, [sp, #28]
 800e17a:	4654      	mov	r4, sl
 800e17c:	2000      	movs	r0, #0
 800e17e:	f04f 0c0a 	mov.w	ip, #10
 800e182:	4621      	mov	r1, r4
 800e184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e188:	3b30      	subs	r3, #48	@ 0x30
 800e18a:	2b09      	cmp	r3, #9
 800e18c:	d94b      	bls.n	800e226 <_vfiprintf_r+0x1a2>
 800e18e:	b1b0      	cbz	r0, 800e1be <_vfiprintf_r+0x13a>
 800e190:	9207      	str	r2, [sp, #28]
 800e192:	e014      	b.n	800e1be <_vfiprintf_r+0x13a>
 800e194:	eba0 0308 	sub.w	r3, r0, r8
 800e198:	fa09 f303 	lsl.w	r3, r9, r3
 800e19c:	4313      	orrs	r3, r2
 800e19e:	9304      	str	r3, [sp, #16]
 800e1a0:	46a2      	mov	sl, r4
 800e1a2:	e7d2      	b.n	800e14a <_vfiprintf_r+0xc6>
 800e1a4:	9b03      	ldr	r3, [sp, #12]
 800e1a6:	1d19      	adds	r1, r3, #4
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	9103      	str	r1, [sp, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	bfbb      	ittet	lt
 800e1b0:	425b      	neglt	r3, r3
 800e1b2:	f042 0202 	orrlt.w	r2, r2, #2
 800e1b6:	9307      	strge	r3, [sp, #28]
 800e1b8:	9307      	strlt	r3, [sp, #28]
 800e1ba:	bfb8      	it	lt
 800e1bc:	9204      	strlt	r2, [sp, #16]
 800e1be:	7823      	ldrb	r3, [r4, #0]
 800e1c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1c2:	d10a      	bne.n	800e1da <_vfiprintf_r+0x156>
 800e1c4:	7863      	ldrb	r3, [r4, #1]
 800e1c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1c8:	d132      	bne.n	800e230 <_vfiprintf_r+0x1ac>
 800e1ca:	9b03      	ldr	r3, [sp, #12]
 800e1cc:	1d1a      	adds	r2, r3, #4
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	9203      	str	r2, [sp, #12]
 800e1d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1d6:	3402      	adds	r4, #2
 800e1d8:	9305      	str	r3, [sp, #20]
 800e1da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2b0 <_vfiprintf_r+0x22c>
 800e1de:	7821      	ldrb	r1, [r4, #0]
 800e1e0:	2203      	movs	r2, #3
 800e1e2:	4650      	mov	r0, sl
 800e1e4:	f7f1 fffc 	bl	80001e0 <memchr>
 800e1e8:	b138      	cbz	r0, 800e1fa <_vfiprintf_r+0x176>
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	eba0 000a 	sub.w	r0, r0, sl
 800e1f0:	2240      	movs	r2, #64	@ 0x40
 800e1f2:	4082      	lsls	r2, r0
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	3401      	adds	r4, #1
 800e1f8:	9304      	str	r3, [sp, #16]
 800e1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1fe:	4829      	ldr	r0, [pc, #164]	@ (800e2a4 <_vfiprintf_r+0x220>)
 800e200:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e204:	2206      	movs	r2, #6
 800e206:	f7f1 ffeb 	bl	80001e0 <memchr>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d03f      	beq.n	800e28e <_vfiprintf_r+0x20a>
 800e20e:	4b26      	ldr	r3, [pc, #152]	@ (800e2a8 <_vfiprintf_r+0x224>)
 800e210:	bb1b      	cbnz	r3, 800e25a <_vfiprintf_r+0x1d6>
 800e212:	9b03      	ldr	r3, [sp, #12]
 800e214:	3307      	adds	r3, #7
 800e216:	f023 0307 	bic.w	r3, r3, #7
 800e21a:	3308      	adds	r3, #8
 800e21c:	9303      	str	r3, [sp, #12]
 800e21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e220:	443b      	add	r3, r7
 800e222:	9309      	str	r3, [sp, #36]	@ 0x24
 800e224:	e76a      	b.n	800e0fc <_vfiprintf_r+0x78>
 800e226:	fb0c 3202 	mla	r2, ip, r2, r3
 800e22a:	460c      	mov	r4, r1
 800e22c:	2001      	movs	r0, #1
 800e22e:	e7a8      	b.n	800e182 <_vfiprintf_r+0xfe>
 800e230:	2300      	movs	r3, #0
 800e232:	3401      	adds	r4, #1
 800e234:	9305      	str	r3, [sp, #20]
 800e236:	4619      	mov	r1, r3
 800e238:	f04f 0c0a 	mov.w	ip, #10
 800e23c:	4620      	mov	r0, r4
 800e23e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e242:	3a30      	subs	r2, #48	@ 0x30
 800e244:	2a09      	cmp	r2, #9
 800e246:	d903      	bls.n	800e250 <_vfiprintf_r+0x1cc>
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d0c6      	beq.n	800e1da <_vfiprintf_r+0x156>
 800e24c:	9105      	str	r1, [sp, #20]
 800e24e:	e7c4      	b.n	800e1da <_vfiprintf_r+0x156>
 800e250:	fb0c 2101 	mla	r1, ip, r1, r2
 800e254:	4604      	mov	r4, r0
 800e256:	2301      	movs	r3, #1
 800e258:	e7f0      	b.n	800e23c <_vfiprintf_r+0x1b8>
 800e25a:	ab03      	add	r3, sp, #12
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	462a      	mov	r2, r5
 800e260:	4b12      	ldr	r3, [pc, #72]	@ (800e2ac <_vfiprintf_r+0x228>)
 800e262:	a904      	add	r1, sp, #16
 800e264:	4630      	mov	r0, r6
 800e266:	f7fb feb9 	bl	8009fdc <_printf_float>
 800e26a:	4607      	mov	r7, r0
 800e26c:	1c78      	adds	r0, r7, #1
 800e26e:	d1d6      	bne.n	800e21e <_vfiprintf_r+0x19a>
 800e270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e272:	07d9      	lsls	r1, r3, #31
 800e274:	d405      	bmi.n	800e282 <_vfiprintf_r+0x1fe>
 800e276:	89ab      	ldrh	r3, [r5, #12]
 800e278:	059a      	lsls	r2, r3, #22
 800e27a:	d402      	bmi.n	800e282 <_vfiprintf_r+0x1fe>
 800e27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e27e:	f7fc fe1d 	bl	800aebc <__retarget_lock_release_recursive>
 800e282:	89ab      	ldrh	r3, [r5, #12]
 800e284:	065b      	lsls	r3, r3, #25
 800e286:	f53f af1f 	bmi.w	800e0c8 <_vfiprintf_r+0x44>
 800e28a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e28c:	e71e      	b.n	800e0cc <_vfiprintf_r+0x48>
 800e28e:	ab03      	add	r3, sp, #12
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462a      	mov	r2, r5
 800e294:	4b05      	ldr	r3, [pc, #20]	@ (800e2ac <_vfiprintf_r+0x228>)
 800e296:	a904      	add	r1, sp, #16
 800e298:	4630      	mov	r0, r6
 800e29a:	f7fc f937 	bl	800a50c <_printf_i>
 800e29e:	e7e4      	b.n	800e26a <_vfiprintf_r+0x1e6>
 800e2a0:	0800ea79 	.word	0x0800ea79
 800e2a4:	0800ea83 	.word	0x0800ea83
 800e2a8:	08009fdd 	.word	0x08009fdd
 800e2ac:	0800e061 	.word	0x0800e061
 800e2b0:	0800ea7f 	.word	0x0800ea7f

0800e2b4 <__swbuf_r>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	460e      	mov	r6, r1
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	b118      	cbz	r0, 800e2c6 <__swbuf_r+0x12>
 800e2be:	6a03      	ldr	r3, [r0, #32]
 800e2c0:	b90b      	cbnz	r3, 800e2c6 <__swbuf_r+0x12>
 800e2c2:	f7fc fce3 	bl	800ac8c <__sinit>
 800e2c6:	69a3      	ldr	r3, [r4, #24]
 800e2c8:	60a3      	str	r3, [r4, #8]
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	071a      	lsls	r2, r3, #28
 800e2ce:	d501      	bpl.n	800e2d4 <__swbuf_r+0x20>
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	b943      	cbnz	r3, 800e2e6 <__swbuf_r+0x32>
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f000 f82a 	bl	800e330 <__swsetup_r>
 800e2dc:	b118      	cbz	r0, 800e2e6 <__swbuf_r+0x32>
 800e2de:	f04f 37ff 	mov.w	r7, #4294967295
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	6922      	ldr	r2, [r4, #16]
 800e2ea:	1a98      	subs	r0, r3, r2
 800e2ec:	6963      	ldr	r3, [r4, #20]
 800e2ee:	b2f6      	uxtb	r6, r6
 800e2f0:	4283      	cmp	r3, r0
 800e2f2:	4637      	mov	r7, r6
 800e2f4:	dc05      	bgt.n	800e302 <__swbuf_r+0x4e>
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f7ff fa47 	bl	800d78c <_fflush_r>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d1ed      	bne.n	800e2de <__swbuf_r+0x2a>
 800e302:	68a3      	ldr	r3, [r4, #8]
 800e304:	3b01      	subs	r3, #1
 800e306:	60a3      	str	r3, [r4, #8]
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	6022      	str	r2, [r4, #0]
 800e30e:	701e      	strb	r6, [r3, #0]
 800e310:	6962      	ldr	r2, [r4, #20]
 800e312:	1c43      	adds	r3, r0, #1
 800e314:	429a      	cmp	r2, r3
 800e316:	d004      	beq.n	800e322 <__swbuf_r+0x6e>
 800e318:	89a3      	ldrh	r3, [r4, #12]
 800e31a:	07db      	lsls	r3, r3, #31
 800e31c:	d5e1      	bpl.n	800e2e2 <__swbuf_r+0x2e>
 800e31e:	2e0a      	cmp	r6, #10
 800e320:	d1df      	bne.n	800e2e2 <__swbuf_r+0x2e>
 800e322:	4621      	mov	r1, r4
 800e324:	4628      	mov	r0, r5
 800e326:	f7ff fa31 	bl	800d78c <_fflush_r>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d0d9      	beq.n	800e2e2 <__swbuf_r+0x2e>
 800e32e:	e7d6      	b.n	800e2de <__swbuf_r+0x2a>

0800e330 <__swsetup_r>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4b29      	ldr	r3, [pc, #164]	@ (800e3d8 <__swsetup_r+0xa8>)
 800e334:	4605      	mov	r5, r0
 800e336:	6818      	ldr	r0, [r3, #0]
 800e338:	460c      	mov	r4, r1
 800e33a:	b118      	cbz	r0, 800e344 <__swsetup_r+0x14>
 800e33c:	6a03      	ldr	r3, [r0, #32]
 800e33e:	b90b      	cbnz	r3, 800e344 <__swsetup_r+0x14>
 800e340:	f7fc fca4 	bl	800ac8c <__sinit>
 800e344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e348:	0719      	lsls	r1, r3, #28
 800e34a:	d422      	bmi.n	800e392 <__swsetup_r+0x62>
 800e34c:	06da      	lsls	r2, r3, #27
 800e34e:	d407      	bmi.n	800e360 <__swsetup_r+0x30>
 800e350:	2209      	movs	r2, #9
 800e352:	602a      	str	r2, [r5, #0]
 800e354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e358:	81a3      	strh	r3, [r4, #12]
 800e35a:	f04f 30ff 	mov.w	r0, #4294967295
 800e35e:	e033      	b.n	800e3c8 <__swsetup_r+0x98>
 800e360:	0758      	lsls	r0, r3, #29
 800e362:	d512      	bpl.n	800e38a <__swsetup_r+0x5a>
 800e364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e366:	b141      	cbz	r1, 800e37a <__swsetup_r+0x4a>
 800e368:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e36c:	4299      	cmp	r1, r3
 800e36e:	d002      	beq.n	800e376 <__swsetup_r+0x46>
 800e370:	4628      	mov	r0, r5
 800e372:	f7fd fbf9 	bl	800bb68 <_free_r>
 800e376:	2300      	movs	r3, #0
 800e378:	6363      	str	r3, [r4, #52]	@ 0x34
 800e37a:	89a3      	ldrh	r3, [r4, #12]
 800e37c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e380:	81a3      	strh	r3, [r4, #12]
 800e382:	2300      	movs	r3, #0
 800e384:	6063      	str	r3, [r4, #4]
 800e386:	6923      	ldr	r3, [r4, #16]
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	f043 0308 	orr.w	r3, r3, #8
 800e390:	81a3      	strh	r3, [r4, #12]
 800e392:	6923      	ldr	r3, [r4, #16]
 800e394:	b94b      	cbnz	r3, 800e3aa <__swsetup_r+0x7a>
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e39c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3a0:	d003      	beq.n	800e3aa <__swsetup_r+0x7a>
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	f000 f883 	bl	800e4b0 <__smakebuf_r>
 800e3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ae:	f013 0201 	ands.w	r2, r3, #1
 800e3b2:	d00a      	beq.n	800e3ca <__swsetup_r+0x9a>
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	60a2      	str	r2, [r4, #8]
 800e3b8:	6962      	ldr	r2, [r4, #20]
 800e3ba:	4252      	negs	r2, r2
 800e3bc:	61a2      	str	r2, [r4, #24]
 800e3be:	6922      	ldr	r2, [r4, #16]
 800e3c0:	b942      	cbnz	r2, 800e3d4 <__swsetup_r+0xa4>
 800e3c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e3c6:	d1c5      	bne.n	800e354 <__swsetup_r+0x24>
 800e3c8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ca:	0799      	lsls	r1, r3, #30
 800e3cc:	bf58      	it	pl
 800e3ce:	6962      	ldrpl	r2, [r4, #20]
 800e3d0:	60a2      	str	r2, [r4, #8]
 800e3d2:	e7f4      	b.n	800e3be <__swsetup_r+0x8e>
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	e7f7      	b.n	800e3c8 <__swsetup_r+0x98>
 800e3d8:	20000128 	.word	0x20000128

0800e3dc <_raise_r>:
 800e3dc:	291f      	cmp	r1, #31
 800e3de:	b538      	push	{r3, r4, r5, lr}
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	460c      	mov	r4, r1
 800e3e4:	d904      	bls.n	800e3f0 <_raise_r+0x14>
 800e3e6:	2316      	movs	r3, #22
 800e3e8:	6003      	str	r3, [r0, #0]
 800e3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e3f2:	b112      	cbz	r2, 800e3fa <_raise_r+0x1e>
 800e3f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3f8:	b94b      	cbnz	r3, 800e40e <_raise_r+0x32>
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	f000 f830 	bl	800e460 <_getpid_r>
 800e400:	4622      	mov	r2, r4
 800e402:	4601      	mov	r1, r0
 800e404:	4628      	mov	r0, r5
 800e406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e40a:	f000 b817 	b.w	800e43c <_kill_r>
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d00a      	beq.n	800e428 <_raise_r+0x4c>
 800e412:	1c59      	adds	r1, r3, #1
 800e414:	d103      	bne.n	800e41e <_raise_r+0x42>
 800e416:	2316      	movs	r3, #22
 800e418:	6003      	str	r3, [r0, #0]
 800e41a:	2001      	movs	r0, #1
 800e41c:	e7e7      	b.n	800e3ee <_raise_r+0x12>
 800e41e:	2100      	movs	r1, #0
 800e420:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e424:	4620      	mov	r0, r4
 800e426:	4798      	blx	r3
 800e428:	2000      	movs	r0, #0
 800e42a:	e7e0      	b.n	800e3ee <_raise_r+0x12>

0800e42c <raise>:
 800e42c:	4b02      	ldr	r3, [pc, #8]	@ (800e438 <raise+0xc>)
 800e42e:	4601      	mov	r1, r0
 800e430:	6818      	ldr	r0, [r3, #0]
 800e432:	f7ff bfd3 	b.w	800e3dc <_raise_r>
 800e436:	bf00      	nop
 800e438:	20000128 	.word	0x20000128

0800e43c <_kill_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	4d07      	ldr	r5, [pc, #28]	@ (800e45c <_kill_r+0x20>)
 800e440:	2300      	movs	r3, #0
 800e442:	4604      	mov	r4, r0
 800e444:	4608      	mov	r0, r1
 800e446:	4611      	mov	r1, r2
 800e448:	602b      	str	r3, [r5, #0]
 800e44a:	f7f3 fbe1 	bl	8001c10 <_kill>
 800e44e:	1c43      	adds	r3, r0, #1
 800e450:	d102      	bne.n	800e458 <_kill_r+0x1c>
 800e452:	682b      	ldr	r3, [r5, #0]
 800e454:	b103      	cbz	r3, 800e458 <_kill_r+0x1c>
 800e456:	6023      	str	r3, [r4, #0]
 800e458:	bd38      	pop	{r3, r4, r5, pc}
 800e45a:	bf00      	nop
 800e45c:	20001938 	.word	0x20001938

0800e460 <_getpid_r>:
 800e460:	f7f3 bbce 	b.w	8001c00 <_getpid>

0800e464 <__swhatbuf_r>:
 800e464:	b570      	push	{r4, r5, r6, lr}
 800e466:	460c      	mov	r4, r1
 800e468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e46c:	2900      	cmp	r1, #0
 800e46e:	b096      	sub	sp, #88	@ 0x58
 800e470:	4615      	mov	r5, r2
 800e472:	461e      	mov	r6, r3
 800e474:	da0d      	bge.n	800e492 <__swhatbuf_r+0x2e>
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e47c:	f04f 0100 	mov.w	r1, #0
 800e480:	bf14      	ite	ne
 800e482:	2340      	movne	r3, #64	@ 0x40
 800e484:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e488:	2000      	movs	r0, #0
 800e48a:	6031      	str	r1, [r6, #0]
 800e48c:	602b      	str	r3, [r5, #0]
 800e48e:	b016      	add	sp, #88	@ 0x58
 800e490:	bd70      	pop	{r4, r5, r6, pc}
 800e492:	466a      	mov	r2, sp
 800e494:	f000 f848 	bl	800e528 <_fstat_r>
 800e498:	2800      	cmp	r0, #0
 800e49a:	dbec      	blt.n	800e476 <__swhatbuf_r+0x12>
 800e49c:	9901      	ldr	r1, [sp, #4]
 800e49e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4a6:	4259      	negs	r1, r3
 800e4a8:	4159      	adcs	r1, r3
 800e4aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4ae:	e7eb      	b.n	800e488 <__swhatbuf_r+0x24>

0800e4b0 <__smakebuf_r>:
 800e4b0:	898b      	ldrh	r3, [r1, #12]
 800e4b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4b4:	079d      	lsls	r5, r3, #30
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	460c      	mov	r4, r1
 800e4ba:	d507      	bpl.n	800e4cc <__smakebuf_r+0x1c>
 800e4bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	6123      	str	r3, [r4, #16]
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	6163      	str	r3, [r4, #20]
 800e4c8:	b003      	add	sp, #12
 800e4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4cc:	ab01      	add	r3, sp, #4
 800e4ce:	466a      	mov	r2, sp
 800e4d0:	f7ff ffc8 	bl	800e464 <__swhatbuf_r>
 800e4d4:	9f00      	ldr	r7, [sp, #0]
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	4639      	mov	r1, r7
 800e4da:	4630      	mov	r0, r6
 800e4dc:	f7fd fbb8 	bl	800bc50 <_malloc_r>
 800e4e0:	b948      	cbnz	r0, 800e4f6 <__smakebuf_r+0x46>
 800e4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4e6:	059a      	lsls	r2, r3, #22
 800e4e8:	d4ee      	bmi.n	800e4c8 <__smakebuf_r+0x18>
 800e4ea:	f023 0303 	bic.w	r3, r3, #3
 800e4ee:	f043 0302 	orr.w	r3, r3, #2
 800e4f2:	81a3      	strh	r3, [r4, #12]
 800e4f4:	e7e2      	b.n	800e4bc <__smakebuf_r+0xc>
 800e4f6:	89a3      	ldrh	r3, [r4, #12]
 800e4f8:	6020      	str	r0, [r4, #0]
 800e4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4fe:	81a3      	strh	r3, [r4, #12]
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e506:	b15b      	cbz	r3, 800e520 <__smakebuf_r+0x70>
 800e508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e50c:	4630      	mov	r0, r6
 800e50e:	f000 f81d 	bl	800e54c <_isatty_r>
 800e512:	b128      	cbz	r0, 800e520 <__smakebuf_r+0x70>
 800e514:	89a3      	ldrh	r3, [r4, #12]
 800e516:	f023 0303 	bic.w	r3, r3, #3
 800e51a:	f043 0301 	orr.w	r3, r3, #1
 800e51e:	81a3      	strh	r3, [r4, #12]
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	431d      	orrs	r5, r3
 800e524:	81a5      	strh	r5, [r4, #12]
 800e526:	e7cf      	b.n	800e4c8 <__smakebuf_r+0x18>

0800e528 <_fstat_r>:
 800e528:	b538      	push	{r3, r4, r5, lr}
 800e52a:	4d07      	ldr	r5, [pc, #28]	@ (800e548 <_fstat_r+0x20>)
 800e52c:	2300      	movs	r3, #0
 800e52e:	4604      	mov	r4, r0
 800e530:	4608      	mov	r0, r1
 800e532:	4611      	mov	r1, r2
 800e534:	602b      	str	r3, [r5, #0]
 800e536:	f7f3 fbaf 	bl	8001c98 <_fstat>
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	d102      	bne.n	800e544 <_fstat_r+0x1c>
 800e53e:	682b      	ldr	r3, [r5, #0]
 800e540:	b103      	cbz	r3, 800e544 <_fstat_r+0x1c>
 800e542:	6023      	str	r3, [r4, #0]
 800e544:	bd38      	pop	{r3, r4, r5, pc}
 800e546:	bf00      	nop
 800e548:	20001938 	.word	0x20001938

0800e54c <_isatty_r>:
 800e54c:	b538      	push	{r3, r4, r5, lr}
 800e54e:	4d06      	ldr	r5, [pc, #24]	@ (800e568 <_isatty_r+0x1c>)
 800e550:	2300      	movs	r3, #0
 800e552:	4604      	mov	r4, r0
 800e554:	4608      	mov	r0, r1
 800e556:	602b      	str	r3, [r5, #0]
 800e558:	f7f3 fbae 	bl	8001cb8 <_isatty>
 800e55c:	1c43      	adds	r3, r0, #1
 800e55e:	d102      	bne.n	800e566 <_isatty_r+0x1a>
 800e560:	682b      	ldr	r3, [r5, #0]
 800e562:	b103      	cbz	r3, 800e566 <_isatty_r+0x1a>
 800e564:	6023      	str	r3, [r4, #0]
 800e566:	bd38      	pop	{r3, r4, r5, pc}
 800e568:	20001938 	.word	0x20001938
 800e56c:	00000000 	.word	0x00000000

0800e570 <floor>:
 800e570:	ec51 0b10 	vmov	r0, r1, d0
 800e574:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e580:	2e13      	cmp	r6, #19
 800e582:	460c      	mov	r4, r1
 800e584:	4605      	mov	r5, r0
 800e586:	4680      	mov	r8, r0
 800e588:	dc34      	bgt.n	800e5f4 <floor+0x84>
 800e58a:	2e00      	cmp	r6, #0
 800e58c:	da17      	bge.n	800e5be <floor+0x4e>
 800e58e:	a332      	add	r3, pc, #200	@ (adr r3, 800e658 <floor+0xe8>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	f7f1 fe82 	bl	800029c <__adddf3>
 800e598:	2200      	movs	r2, #0
 800e59a:	2300      	movs	r3, #0
 800e59c:	f7f2 fac4 	bl	8000b28 <__aeabi_dcmpgt>
 800e5a0:	b150      	cbz	r0, 800e5b8 <floor+0x48>
 800e5a2:	2c00      	cmp	r4, #0
 800e5a4:	da55      	bge.n	800e652 <floor+0xe2>
 800e5a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e5aa:	432c      	orrs	r4, r5
 800e5ac:	2500      	movs	r5, #0
 800e5ae:	42ac      	cmp	r4, r5
 800e5b0:	4c2b      	ldr	r4, [pc, #172]	@ (800e660 <floor+0xf0>)
 800e5b2:	bf08      	it	eq
 800e5b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e5b8:	4621      	mov	r1, r4
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	e023      	b.n	800e606 <floor+0x96>
 800e5be:	4f29      	ldr	r7, [pc, #164]	@ (800e664 <floor+0xf4>)
 800e5c0:	4137      	asrs	r7, r6
 800e5c2:	ea01 0307 	and.w	r3, r1, r7
 800e5c6:	4303      	orrs	r3, r0
 800e5c8:	d01d      	beq.n	800e606 <floor+0x96>
 800e5ca:	a323      	add	r3, pc, #140	@ (adr r3, 800e658 <floor+0xe8>)
 800e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d0:	f7f1 fe64 	bl	800029c <__adddf3>
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f7f2 faa6 	bl	8000b28 <__aeabi_dcmpgt>
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d0eb      	beq.n	800e5b8 <floor+0x48>
 800e5e0:	2c00      	cmp	r4, #0
 800e5e2:	bfbe      	ittt	lt
 800e5e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e5e8:	4133      	asrlt	r3, r6
 800e5ea:	18e4      	addlt	r4, r4, r3
 800e5ec:	ea24 0407 	bic.w	r4, r4, r7
 800e5f0:	2500      	movs	r5, #0
 800e5f2:	e7e1      	b.n	800e5b8 <floor+0x48>
 800e5f4:	2e33      	cmp	r6, #51	@ 0x33
 800e5f6:	dd0a      	ble.n	800e60e <floor+0x9e>
 800e5f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e5fc:	d103      	bne.n	800e606 <floor+0x96>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	f7f1 fe4b 	bl	800029c <__adddf3>
 800e606:	ec41 0b10 	vmov	d0, r0, r1
 800e60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e60e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e612:	f04f 37ff 	mov.w	r7, #4294967295
 800e616:	40df      	lsrs	r7, r3
 800e618:	4207      	tst	r7, r0
 800e61a:	d0f4      	beq.n	800e606 <floor+0x96>
 800e61c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e658 <floor+0xe8>)
 800e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e622:	f7f1 fe3b 	bl	800029c <__adddf3>
 800e626:	2200      	movs	r2, #0
 800e628:	2300      	movs	r3, #0
 800e62a:	f7f2 fa7d 	bl	8000b28 <__aeabi_dcmpgt>
 800e62e:	2800      	cmp	r0, #0
 800e630:	d0c2      	beq.n	800e5b8 <floor+0x48>
 800e632:	2c00      	cmp	r4, #0
 800e634:	da0a      	bge.n	800e64c <floor+0xdc>
 800e636:	2e14      	cmp	r6, #20
 800e638:	d101      	bne.n	800e63e <floor+0xce>
 800e63a:	3401      	adds	r4, #1
 800e63c:	e006      	b.n	800e64c <floor+0xdc>
 800e63e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e642:	2301      	movs	r3, #1
 800e644:	40b3      	lsls	r3, r6
 800e646:	441d      	add	r5, r3
 800e648:	4545      	cmp	r5, r8
 800e64a:	d3f6      	bcc.n	800e63a <floor+0xca>
 800e64c:	ea25 0507 	bic.w	r5, r5, r7
 800e650:	e7b2      	b.n	800e5b8 <floor+0x48>
 800e652:	2500      	movs	r5, #0
 800e654:	462c      	mov	r4, r5
 800e656:	e7af      	b.n	800e5b8 <floor+0x48>
 800e658:	8800759c 	.word	0x8800759c
 800e65c:	7e37e43c 	.word	0x7e37e43c
 800e660:	bff00000 	.word	0xbff00000
 800e664:	000fffff 	.word	0x000fffff

0800e668 <_init>:
 800e668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66a:	bf00      	nop
 800e66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e66e:	bc08      	pop	{r3}
 800e670:	469e      	mov	lr, r3
 800e672:	4770      	bx	lr

0800e674 <_fini>:
 800e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e676:	bf00      	nop
 800e678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e67a:	bc08      	pop	{r3}
 800e67c:	469e      	mov	lr, r3
 800e67e:	4770      	bx	lr
